{
	"info": {
		"_postman_id": "2cb8729c-c411-4fa1-b0db-7e5833a1ae13",
		"name": "Cartis - Core API Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Individual API Requests",
			"item": [
				{
					"name": "Organisation",
					"item": [
						{
							"name": "Operator's API to create an organisation",
							"item": [
								{
									"name": "Operator's API to create an organisation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if(pm.expect(pm.response.json().status).to.eql(\"success\")){\r",
													"pm.environment.set(\"orgUuid\", pm.response.json().data.organisation.uuid);\r",
													"}\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response body has status as 'success'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"});\r",
													"pm.test(\"Response Body message is 'Organisation Created'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(\"Organisation Created\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\")  ;\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"{{baseUrl}}/organisation\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"status\": {\r",
													"      \"type\": \"string\",\r",
													"      \"enum\":[\r",
													"            \"success\",\r",
													"            \"failure\",\r",
													"            \"queued\",\r",
													"            \"pending\",\r",
													"            \"forbidden\"\r",
													"      ]\r",
													"    },\r",
													"    \"message\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"data\": {\r",
													"      \"type\": \"object\",\r",
													"      \"properties\": {\r",
													"        \"organisation\": {\r",
													"          \"type\": \"object\",\r",
													"          \"properties\": {\r",
													"            \"uuid\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"name\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"description\": {\r",
													"              \"type\": \"null\"\r",
													"            },\r",
													"            \"permalink\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"createdAt\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"updatedAt\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"createdBy\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"logoUrl\": {\r",
													"              \"type\": \"null\"\r",
													"            },\r",
													"            \"organisationOwner\": {\r",
													"              \"type\": \"object\",\r",
													"              \"properties\": {\r",
													"                \"uuid\": {\r",
													"                  \"type\": \"string\"\r",
													"                },\r",
													"                \"name\": {\r",
													"                  \"type\": \"string\"\r",
													"                },\r",
													"                \"email\": {\r",
													"                  \"type\": \"string\"\r",
													"                },\r",
													"                \"role\": {\r",
													"                  \"type\": \"null\"\r",
													"                },\r",
													"                \"createdAt\": {\r",
													"                  \"type\": \"string\"\r",
													"                },\r",
													"                \"updatedAt\": {\r",
													"                  \"type\": \"string\"\r",
													"                },\r",
													"                \"createdBy\": {\r",
													"                  \"type\": \"string\"\r",
													"                }\r",
													"              },\r",
													"              \"required\": [\r",
													"                \"uuid\",\r",
													"                \"name\",\r",
													"                \"email\",\r",
													"                \"role\",\r",
													"                \"createdAt\",\r",
													"                \"updatedAt\",\r",
													"                \"createdBy\"\r",
													"              ]\r",
													"            }\r",
													"          },\r",
													"          \"required\": [\r",
													"            \"uuid\",\r",
													"            \"name\",\r",
													"            \"description\",\r",
													"            \"permalink\",\r",
													"            \"createdAt\",\r",
													"            \"updatedAt\",\r",
													"            \"createdBy\",\r",
													"            \"logoUrl\",\r",
													"            \"organisationOwner\"\r",
													"          ]\r",
													"        }\r",
													"      },\r",
													"      \"required\": [\r",
													"        \"organisation\"\r",
													"      ],\r",
													"      \"additionalProperties\":false\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"status\",\r",
													"    \"message\",\r",
													"    \"data\"\r",
													"  ],\r",
													"  \"additionalProperties\":false\r",
													"};\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"orgName\",\"orgName_\"+Math.floor((Math.random() * 10000000000) + 1));\r",
													"pm.environment.set(\"orgOwnerName\",\"owner_\"+pm.environment.get(\"orgName\"));\r",
													"pm.environment.set(\"orgEmailAddress\",\"orgEmailAdd_\"+pm.environment.get(\"orgName\")+\"@cartisdemo.co.in\");\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{orgName}}\",\n    \"organisationOwner\": {\n    \"name\": \"{{orgOwnerName}}\",\n    \"email\": \"{{orgEmailAddress}}\"\n  }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post org create duplicate record",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Body matches 'Incorrect authentication credentials.'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"organisation with this name already exists\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{orgName}}\",\n    \"organisationOwner\": {\n    \"name\": \"{{orgOwnerName}}\",\n    \"email\": \"{{orgEmailAddress}}\"\n  }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post org - More than 50 char name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Response body status is 'failure'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Response body message is 'Validation Error'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(\"Validation Error\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\")  ;\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"var errMessage = \"Ensure this field has no more than 50 characters.\";\r",
													"pm.test(\"Response body validation error message is '\"+errMessage+\"' \", function () {\r",
													"    pm.expect(pm.response.json().validation_errors.name[0][0]).to.eql(errMessage);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{orgName}} - Deleasdasdadadadhauygfawdawdawdwadasdaiquhf4a564a6w4da64da6dw8aw6d4a684d6aw4da684d68a4da65d4aw65d4aw68d!@#&(*@!&$*!&^$*&@!^$*!^$*te2\",\n    \"organisationOwner\": {\n    \"name\": \"{{orgOwnerName}}\",\n    \"email\": \"{{orgEmailAddress}}\"\n  }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post org - Already existing email",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Body matches 'Incorrect authentication credentials.'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"organisation owner with this email already exists\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{orgName}}-AlreadyExistingEmail\",\n    \"organisationOwner\": {\n    \"name\": \"{{orgOwnerName}}\",\n    \"email\": \"pankaj.devrani@asteria.co.in\"\n  }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post org - Without request body",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Response body status is 'failure'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Response body message is 'Validation Error'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(\"Validation Error\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\")  ;\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"pm.test(\"Response body validation error message is 'Ensure this field has no more than 100 characters.' \", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.validation_errors.name[0][0]).to.eql(\"This field is required.\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{baseUrl}}/organisations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post org - Invalid request body json",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Response body status is 'failure'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\")  ;\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"var errorMessage = \"JSON parse error\";\r",
													"pm.test(\"Response body validation error message is '\"+errorMessage+\"' \", function () {\r",
													"    pm.expect(pm.response.json().message).to.contain(errorMessage);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": null,\r\n    \"description\": \r\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post org - null org name request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Response body status is 'failure'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Response body message is 'Validation Error'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\")  ;\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"pm.test(\"Response body validation error message is 'Ensure this field has no more than 100 characters.' \", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.validation_errors.name[0][0]).to.eql(\"This field may not be null.\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": null,\r\n    \"description\": \"Create Random Demo Org description\"\r\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post org - Support alph numaric and special character",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if(pm.expect(pm.response.json().status).to.eql(\"success\")){\r",
													"    pm.environment.set(\"orgUuidDelete\", pm.response.json().data.organisation.uuid);\r",
													"}\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response body status is 'success'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"});\r",
													"pm.test(\"Response body message is 'Project Created'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(\"Organisation Created\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\")  ;\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{orgName}}!@#$%^&*()+=|''}`~{][:;><.,/?\",\n    \"organisationOwner\": {\n    \"name\": \"SupportAlphonumeric_-!@#$%^&*()_+=-|''}\",\n    \"email\": \"Su!{{orgEmailAddress}}\"\n  }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Deleting alpha numaric org created",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Body matches string : 'Deleted Organisation'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Deleted Organisation\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuidDelete}}",
													"type": "string",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Successful only when a user has access to org delete perms",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\"\n}"
										},
										{
											"name": "User is not logged in",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "When the delete org call fails internally",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Post org invalid content-type header",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 415\", function () {\r",
													"    pm.response.to.have.status(415);\r",
													"});\r",
													"pm.test(\"Response Body has status as 'failure'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Response Body has message as 'Unsupported media type'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.contain(\"Unsupported media type\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Unsupported Media Type\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true,
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-yaml",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Create asda adsadaRandom Demo Org\",\n    \"description\": \"Create Random Demo Org description\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post org invalid accept header",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 406\", function () {\r",
													"    pm.response.to.have.status(406);\r",
													"});\r",
													"var message = \"Could not satisfy the request Accept header.\";\r",
													"pm.test(\"Response body message is '\"+message+\"'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(message);\r",
													"});\r",
													"pm.test(\"Response body status is 'failure'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Not Acceptable\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Create asda adsadaRandom Demo Org\",\n    \"description\": \"Create Random Demo Org description\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/organisations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post org invalid auth token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"pm.test(\"Status code name has Unauthorized\", function () {\r",
													"    pm.response.to.have.status(\"Unauthorized\");\r",
													"});\r",
													"pm.test(\"response body status value is 'forbidden'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"forbidden\");\r",
													"});\r",
													"var errMessage = \"Log in to do this action\";\r",
													"pm.test(\"response body message is '\"+errMessage+\"'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(errMessage);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1qTkZRVUkyT1RRM01qTXpOa1l4TmpCQ04wSTVNa0kxUmpFNVFVSkVOelkzTnpnNFJqTXpRZyJ9.eyJodHRwczovL2V4YW1wbGUuY29tL3JvbGVzIjpbInVzZXIiXSwiaHR0cHM6Ly9kamFuZ28td2ViYXBwL3JvbGUiOiJ1c2VyIiwibmlja25hbWUiOiJwYW5rYWouZGV2cmFuaSIsIm5hbWUiOiJwYW5rYWouZGV2cmFuaUBhc3RlcmlhLmNvLmluIiwicGljdHVyZSI6Imh0dHBzOi8vcy5ncmF2YXRhci5jb20vYXZhdGFyLzRjN2YzYzM0OWNkYzkzZmMxODVmMTMzMThhZjIzMjcxP3M9NDgwJnI9cGcmZD1odHRwcyUzQSUyRiUyRmNkbi5hdXRoMC5jb20lMkZhdmF0YXJzJTJGcGEucG5nIiwidXBkYXRlZF9hdCI6IjIwMjAtMDYtMTFUMTI6MzU6MjQuMTk4WiIsImlzcyI6Imh0dHBzOi8vaW5zaWdodDEuYXV0aDAuY29tLyIsInN1YiI6ImF1dGgwfDVlYzdiMTBjZTZmNGUwMGJmMjAzNzZjMyIsImF1ZCI6IlNzTENHTmdnMHlBN0I3c0g1ZU5WTUZtQ1A5SlZkZGUzIiwiaWF0IjoxNTkxOTQ3NDYwLCJleHAiOjE1OTE5ODM0NjB9.kYNMikKc84EQXRC32dwkOXW0gkJKfqQTOLVmOkKs5QmvVKcVQNZVbo4fQFuYf07Qu1OpvYKmqBHf3Z5H8nsy-Mfeyufgr86X_p5vdThkpCGMzg3uX06LqKoVDcRRzDndQpmvve5Ripla3ucN5IME363U1EfwqmDPs4jBoAxuB80qurcVq3NBn8dOJzJNCRgGW-aHPP6LJAvezGgWpiDnKRcKLIbU2ig7h5t-8LhWOKDi48TBHGyOQYdxqUE7fC2NCi6ghTX7SnLxXA6S1SMwpqQgAApEnjklY8ImuP6in3Rd5JnvJJedDZTcYWK43iKBMoe5exhYd547XNtpQWttww",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Create Random Demo Org\",\n    \"description\": \"Create Random Demo Org description\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get all the organisation User has access to",
							"item": [
								{
									"name": "Get all the organisation User has access to",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response body has status as 'success'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"status\": {\r",
													"      \"type\": \"string\",\r",
													"      \"enum\":[\r",
													"            \"success\",\r",
													"            \"failure\",\r",
													"            \"queued\",\r",
													"            \"pending\",\r",
													"            \"forbidden\"\r",
													"      ]\r",
													"    },\r",
													"    \"message\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"data\": {\r",
													"      \"type\": \"object\",\r",
													"      \"properties\": {\r",
													"        \"organisations\": {\r",
													"          \"type\": \"array\",\r",
													"          \"minItems\": 0,\r",
													"          \"items\": {\r",
													"            \"type\": \"object\",\r",
													"            \"properties\": {\r",
													"              \"uuid\": {\r",
													"                \"type\": \"string\"\r",
													"              },\r",
													"              \"name\": {\r",
													"                \"type\": \"string\"\r",
													"              },\r",
													"              \"description\": {\r",
													"                \"type\": [\"string\", \"null\" ]\r",
													"              },\r",
													"              \"permalink\": {\r",
													"                \"type\": \"string\"\r",
													"              },\r",
													"              \"createdAt\": {\r",
													"                \"type\": \"string\"\r",
													"              },\r",
													"              \"updatedAt\": {\r",
													"                \"type\": \"string\"\r",
													"              },\r",
													"              \"createdBy\": {\r",
													"                \"type\": [\r",
													"                  \"string\",\r",
													"                  \"null\"\r",
													"                ]\r",
													"              },\r",
													"              \"logoUrl\": {\r",
													"                \"type\": [\"string\", \"null\" ]\r",
													"              },\r",
													"              \"organisationOwner\": {\r",
													"                \"type\": [\r",
													"                  \"object\",\r",
													"                  \"null\"\r",
													"                ],\r",
													"                \"properties\": {\r",
													"                  \"uuid\": {\r",
													"                    \"type\": \"string\"\r",
													"                  },\r",
													"                  \"name\": {\r",
													"                    \"type\": \"string\"\r",
													"                  },\r",
													"                  \"email\": {\r",
													"                    \"type\": \"string\"\r",
													"                  },\r",
													"                  \"role\": {\r",
													"                    \"type\": [ \"string\", \"null\" ]\r",
													"                  },\r",
													"                  \"createdAt\": {\r",
													"                    \"type\": \"string\"\r",
													"                  },\r",
													"                  \"updatedAt\": {\r",
													"                    \"type\": \"string\"\r",
													"                  },\r",
													"                  \"createdBy\": {\r",
													"                    \"type\": \"string\"\r",
													"                  }\r",
													"                },\r",
													"                \"required\": [\r",
													"                  \"uuid\",\r",
													"                  \"name\",\r",
													"                  \"email\",\r",
													"                  \"role\",\r",
													"                  \"createdAt\",\r",
													"                  \"updatedAt\",\r",
													"                  \"createdBy\"\r",
													"                ],\r",
													"                \"additionalProperties\":false\r",
													"              }\r",
													"            },\r",
													"            \"required\": [\r",
													"              \"uuid\",\r",
													"              \"name\",\r",
													"              \"description\",\r",
													"              \"permalink\",\r",
													"              \"createdAt\",\r",
													"              \"updatedAt\",\r",
													"              \"createdBy\",\r",
													"              \"logoUrl\",\r",
													"              \"organisationOwner\"\r",
													"            ],\r",
													"            \"additionalProperties\":false\r",
													"          }\r",
													"        }\r",
													"      },\r",
													"      \"required\": [\r",
													"        \"organisations\"\r",
													"      ],\r",
													"      \"additionalProperties\":false\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"status\",\r",
													"    \"message\",\r",
													"    \"data\"\r",
													"  ],\r",
													"  \"additionalProperties\":false\r",
													"};\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"    var result = tv4.validateResult(pm.response.json(),schema);\r",
													"    if(!result.valid){\r",
													"        console.log(result);\r",
													"    }\r",
													"  pm.expect(result.valid).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{baseUrl}}/organisations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all org - with request body",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response body has status as 'success'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"status\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"message\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"data\": {\r",
													"      \"type\": \"object\",\r",
													"      \"properties\": {\r",
													"        \"organisations\": {\r",
													"          \"type\": \"array\",\r",
													"          \"minItems\": 0,\r",
													"          \"items\": {\r",
													"            \"type\": \"object\",\r",
													"            \"properties\": {\r",
													"              \"uuid\": {\r",
													"                \"type\": \"string\"\r",
													"              },\r",
													"              \"name\": {\r",
													"                \"type\": \"string\"\r",
													"              },\r",
													"              \"description\": {\r",
													"                \"type\": [\"string\", \"null\" ]\r",
													"              },\r",
													"              \"permalink\": {\r",
													"                \"type\": \"string\"\r",
													"              },\r",
													"              \"createdAt\": {\r",
													"                \"type\": \"string\"\r",
													"              },\r",
													"              \"updatedAt\": {\r",
													"                \"type\": \"string\"\r",
													"              },\r",
													"              \"createdBy\": {\r",
													"                \"type\": [\r",
													"                  \"string\",\r",
													"                  \"null\"\r",
													"                ]\r",
													"              },\r",
													"              \"logoUrl\": {\r",
													"                \"type\": [\"string\", \"null\" ]\r",
													"              },\r",
													"              \"organisationOwner\": {\r",
													"                \"type\": [\r",
													"                  \"object\",\r",
													"                  \"null\"\r",
													"                ],\r",
													"                \"properties\": {\r",
													"                  \"uuid\": {\r",
													"                    \"type\": \"string\"\r",
													"                  },\r",
													"                  \"name\": {\r",
													"                    \"type\": \"string\"\r",
													"                  },\r",
													"                  \"email\": {\r",
													"                    \"type\": \"string\"\r",
													"                  },\r",
													"                  \"role\": {\r",
													"                    \"type\": [ \"string\", \"null\" ]\r",
													"                  },\r",
													"                  \"createdAt\": {\r",
													"                    \"type\": \"string\"\r",
													"                  },\r",
													"                  \"updatedAt\": {\r",
													"                    \"type\": \"string\"\r",
													"                  },\r",
													"                  \"createdBy\": {\r",
													"                    \"type\": \"string\"\r",
													"                  }\r",
													"                },\r",
													"                \"required\": [\r",
													"                  \"uuid\",\r",
													"                  \"name\",\r",
													"                  \"email\",\r",
													"                  \"role\",\r",
													"                  \"createdAt\",\r",
													"                  \"updatedAt\",\r",
													"                  \"createdBy\"\r",
													"                ],\r",
													"                \"additionalProperties\":false\r",
													"              }\r",
													"            },\r",
													"            \"required\": [\r",
													"              \"uuid\",\r",
													"              \"name\",\r",
													"              \"description\",\r",
													"              \"permalink\",\r",
													"              \"createdAt\",\r",
													"              \"updatedAt\",\r",
													"              \"createdBy\",\r",
													"              \"logoUrl\",\r",
													"              \"organisationOwner\"\r",
													"            ],\r",
													"            \"additionalProperties\":false\r",
													"          }\r",
													"        }\r",
													"      },\r",
													"      \"required\": [\r",
													"        \"organisations\"\r",
													"      ],\r",
													"      \"additionalProperties\":false\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"status\",\r",
													"    \"message\",\r",
													"    \"data\"\r",
													"  ],\r",
													"  \"additionalProperties\":false\r",
													"};\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"    var result = tv4.validateResult(pm.response.json(),schema);\r",
													"    if(!result.valid){\r",
													"        console.log(result);\r",
													"    }\r",
													"  pm.expect(result.valid).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Delete2233\",\r\n    \"description\": \"Create Random Demo Org description\"\r\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations"
											]
										}
									},
									"response": [
										{
											"name": "Fired on the main/landing page",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisations",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisations"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"organisations\": [\n   {\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"permalink\": \"<string>\",\n    \"uuid\": \"<string>\",\n    \"metaData\": {\n     \"userRole\": {}\n    }\n   },\n   {\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"permalink\": \"<string>\",\n    \"uuid\": \"<string>\",\n    \"metaData\": {\n     \"userRole\": {}\n    }\n   }\n  ]\n }\n}"
										},
										{
											"name": "User is not logged in",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisations",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisations"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get all org - Invalid accept header",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 406\", function () {\r",
													"    pm.response.to.have.status(406);\r",
													"});\r",
													"var message = \"Could not satisfy the request Accept header.\";\r",
													"pm.test(\"Response body message is '\"+message+\"'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(message);\r",
													"});\r",
													"pm.test(\"Response body status is 'failure'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Not Acceptable\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/organisations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations"
											]
										}
									},
									"response": [
										{
											"name": "User is not logged in",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisations",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisations"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Fired on the main/landing page",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisations",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisations"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"organisations\": [\n   {\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"permalink\": \"<string>\",\n    \"uuid\": \"<string>\",\n    \"metaData\": {\n     \"userRole\": {}\n    }\n   },\n   {\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"permalink\": \"<string>\",\n    \"uuid\": \"<string>\",\n    \"metaData\": {\n     \"userRole\": {}\n    }\n   }\n  ]\n }\n}"
										}
									]
								},
								{
									"name": "Get all org - Invalid auth token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"pm.test(\"Status code name has Unauthorized\", function () {\r",
													"    pm.response.to.have.status(\"Unauthorized\");\r",
													"});\r",
													"pm.test(\"response body status value is 'forbidden'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"forbidden\");\r",
													"});\r",
													"var errMessage = \"Log in to do this action\";\r",
													"pm.test(\"response body message is '\"+errMessage+\"'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(errMessage);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1qTkZRVUkyT1RRM01qTXpOa1l4TmpCQ04wSTVNa0kxUmpFNVFVSkVOelkzTnpnNFJqTXpRZyJ9.eyJodHRwczovL2V4YW1wbGUuY29tL3JvbGVzIjpbInVzZXIiXSwiaHR0cHM6Ly9kamFuZ28td2ViYXBwL3JvbGUiOiJ1c2VyIiwibmlja25hbWUiOiJwYW5rYWouZGV2cmFuaSIsIm5hbWUiOiJwYW5rYWouZGV2cmFuaUBhc3RlcmlhLmNvLmluIiwicGljdHVyZSI6Imh0dHBzOi8vcy5ncmF2YXRhci5jb20vYXZhdGFyLzRjN2YzYzM0OWNkYzkzZmMxODVmMTMzMThhZjIzMjcxP3M9NDgwJnI9cGcmZD1odHRwcyUzQSUyRiUyRmNkbi5hdXRoMC5jb20lMkZhdmF0YXJzJTJGcGEucG5nIiwidXBkYXRlZF9hdCI6IjIwMjAtMDYtMTBUMDc6Mzc6MjEuNDM4WiIsImlzcyI6Imh0dHBzOi8vaW5zaWdodDEuYXV0aDAuY29tLyIsInN1YiI6ImF1dGgwfDVlYzdiMTBjZTZmNGUwMGJmMjAzNzZjMyIsImF1ZCI6IlNzTENHTmdnMHlBN0I3c0g1ZU5WTUZtQ1A5SlZkZGUzIiwiaWF0IjoxNTkxODc4OTI1LCJleHAiOjE1OTE5MTQ5MjV9.b-FwIG8vG9rtPDVAhQjlf2tzV9nlq8RFqL1w264skuxsXR01b067gXzOAh5i0VXQ_J5WDMTV-DDkpeUZwE_m57Tl1jSJ_4n0dSWFd39_TI0jNiDQ23qt_OfmDTjEVf0b7GMj3hDk5Vwi0S7BumpE67jX2Pk1QayPXpfBGz2z3kC8qi1pXddWnCPB_E-LtZ6fwmbyOQ-HDSbkcdadBlqtRAPpNWx7APOf-6XbdDB6nF19s_BD1oKJNX2ieKqfV3Ggf2opGHtwrvusd2yFYnCbvdy9pnOTsB4SmrZUMDEArAmTTp5pXqx6UytJ1TQ2fqsBE6DEPCwYK_jLL7QLjFmsWR",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/organisations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations"
											]
										}
									},
									"response": [
										{
											"name": "User is not logged in",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisations",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisations"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Fired on the main/landing page",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisations",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisations"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"organisations\": [\n   {\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"permalink\": \"<string>\",\n    \"uuid\": \"<string>\",\n    \"metaData\": {\n     \"userRole\": {}\n    }\n   },\n   {\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"permalink\": \"<string>\",\n    \"uuid\": \"<string>\",\n    \"metaData\": {\n     \"userRole\": {}\n    }\n   }\n  ]\n }\n}"
										}
									]
								}
							]
						},
						{
							"name": "{organisation Uuid}",
							"item": [
								{
									"name": "Get an organisation's details",
									"item": [
										{
											"name": "Get an organisation's details",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Response body status is equal to : 'success'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response body organisation uuid is as expected\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.organisation.uuid).to.eql(pm.environment.get(\"orgUuid\"));\r",
															"});\r",
															"pm.test(\"Response body org name is equal to : '\"+pm.environment.get(\"orgName\")+\"'\", function () {\r",
															"    pm.expect(pm.response.json().data.organisation.name).to.eql(pm.environment.get(\"orgName\"));\r",
															"});\r",
															"\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"status\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"message\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"data\": {\r",
															"      \"type\": \"object\",\r",
															"      \"properties\": {\r",
															"        \"organisation\": {\r",
															"          \"type\": \"object\",\r",
															"          \"properties\": {\r",
															"            \"uuid\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"permalink\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"name\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"description\": {\r",
															"              \"type\": [\"string\", \"null\" ]\r",
															"            },\r",
															"            \"createdAt\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"updatedAt\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"createdBy\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"logoUrl\": {\r",
															"              \"type\": \"null\"\r",
															"            },\r",
															"            \"organisationOwner\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"uuid\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"name\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"email\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"role\": {\r",
															"                  \"type\": \"null\"\r",
															"                },\r",
															"                \"createdAt\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"updatedAt\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"createdBy\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"uuid\",\r",
															"                \"name\",\r",
															"                \"email\",\r",
															"                \"role\",\r",
															"                \"createdAt\",\r",
															"                \"updatedAt\",\r",
															"                \"createdBy\"\r",
															"              ]\r",
															"            }\r",
															"          },\r",
															"          \"required\": [\r",
															"            \"uuid\",\r",
															"            \"permalink\",\r",
															"            \"name\",\r",
															"            \"description\",\r",
															"            \"createdAt\",\r",
															"            \"updatedAt\",\r",
															"            \"createdBy\",\r",
															"            \"logoUrl\",\r",
															"            \"organisationOwner\"\r",
															"          ]\r",
															"        }\r",
															"      },\r",
															"      \"required\": [\r",
															"        \"organisation\"\r",
															"      ]\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"status\",\r",
															"    \"message\",\r",
															"    \"data\"\r",
															"  ]\r",
															"};\r",
															"\r",
															"pm.test('Schema is valid', function() {\r",
															"    var result = tv4.validateResult(pm.response.json(),schema);\r",
															"    if(!result.valid){\r",
															"        console.log(result);\r",
															"    }\r",
															"  pm.expect(result.valid).to.be.true;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "When the get org details call fails internally",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user has access to org",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"organisation\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												},
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Get an org - with request body",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Response Body has status as 'success'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Your test name\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.organisation.uuid).to.eql(pm.environment.get(\"orgUuid\"));\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{orgName}}\",\r\n    \"description\": \"Create Random Demo Org description\"\r\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": [
												{
													"name": "Successful only when a user has access to org",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"organisation\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												},
												{
													"name": "When the get org details call fails internally",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Get an org - invalid org Uuid",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"pm.test(\"Response Body has status as 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"var errorMessage = \"Resource Not Found\";\r",
															"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
															"});\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"status\": {\r",
															"      \"type\": \"string\",\r",
															"      \"enum\":[\r",
															"            \"success\",\r",
															"            \"failure\",\r",
															"            \"queued\",\r",
															"            \"pending\",\r",
															"            \"forbidden\"\r",
															"      ],\r",
															"      \"additionalProperties\":false\r",
															"    },\r",
															"    \"message\": {\r",
															"      \"type\": \"string\"\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"status\",\r",
															"    \"message\"\r",
															"  ]\r",
															"};\r",
															"pm.test('Schema is valid', function() {\r",
															"    var result = tv4.validateResult(pm.response.json(),schema);\r",
															"    if(!result.valid){\r",
															"        console.log(result);\r",
															"    }\r",
															"  pm.expect(result.valid).to.be.true;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "47cbeedb-99dd-4e43-8882-298645304137",
															"type": "string"
														}
													]
												}
											},
											"response": [
												{
													"name": "When the get org details call fails internally",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user has access to org",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"organisation\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												},
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Invalid accept header",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 406\", function () {\r",
															"    pm.response.to.have.status(406);\r",
															"});\r",
															"var message = \"Could not satisfy the request Accept header.\";\r",
															"pm.test(\"Response body message is '\"+message+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(message);\r",
															"});\r",
															"pm.test(\"Response body status is 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Acceptable\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.api+json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "When the get org details call fails internally",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user has access to org",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"organisation\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												},
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Invalid auth token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 401\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"pm.test(\"Status code name has Unauthorized\", function () {\r",
															"    pm.response.to.have.status(\"Unauthorized\");\r",
															"});\r",
															"pm.test(\"response body status value is 'forbidden'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"forbidden\");\r",
															"});\r",
															"var errMessage = \"Log in to do this action\";\r",
															"pm.test(\"response body message is '\"+errMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errMessage);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1qTkZRVUkyT1RRM01qTXpOa1l4TmpCQ04wSTVNa0kxUmpFNVFVSkVOelkzTnpnNFJqTXpRZyJ9.eyJodHRwczovL2V4YW1wbGUuY29tL3JvbGVzIjpbInVzZXIiXSwiaHR0cHM6Ly9kamFuZ28td2ViYXBwL3JvbGUiOiJ1c2VyIiwibmlja25hbWUiOiJwYW5rYWouZGV2cmFuaSIsIm5hbWUiOiJwYW5rYWouZGV2cmFuaUBhc3RlcmlhLmNvLmluIiwicGljdHVyZSI6Imh0dHBzOi8vcy5ncmF2YXRhci5jb20vYXZhdGFyLzRjN2YzYzM0OWNkYzkzZmMxODVmMTMzMThhZjIzMjcxP3M9NDgwJnI9cGcmZD1odHRwcyUzQSUyRiUyRmNkbi5hdXRoMC5jb20lMkZhdmF0YXJzJTJGcGEucG5nIiwidXBkYXRlZF9hdCI6IjIwMjAtMDYtMTFUMTI6MzU6MjQuMTk4WiIsImlzcyI6Imh0dHBzOi8vaW5zaWdodDEuYXV0aDAuY29tLyIsInN1YiI6ImF1dGgwfDVlYzdiMTBjZTZmNGUwMGJmMjAzNzZjMyIsImF1ZCI6IlNzTENHTmdnMHlBN0I3c0g1ZU5WTUZtQ1A5SlZkZGUzIiwiaWF0IjoxNTkxOTQ3NDYwLCJleHAiOjE1OTE5ODM0NjB9.kYNMikKc84EQXRC32dwkOXW0gkJKfqQTOLVmOkKs5QmvVKcVQNZVbo4fQFuYf07Qu1OpvYKmqBHf3Z5H8nsy-Mfeyufgr86X_p5vdThkpCGMzg3uX06LqKoVDcRRzDndQpmvve5Ripla3ucN5IME363U1EfwqmDPs4jBoAxuB80qurcVq3NBn8dOJzJNCRgGW-aHPP6LJAvezGgWpiDnKRcKLIbU2ig7h5t-8LhWOKDi48TBHGyOQYdxqUE7fC2NCi6ghTX7SnLxXA6S1SMwpqQgAApEnjklY8ImuP6in3Rd5JnvJJedDZTcYWK43iKBMoe5exhYd547XNtpQWttWE",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "When the get org details call fails internally",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user has access to org",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"organisation\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												}
											]
										}
									]
								},
								{
									"name": "Edit an organisation's details",
									"item": [
										{
											"name": "Edit an organisation's details",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.expect(pm.response.json().data.organisation.uuid).to.eql(pm.environment.get(\"orgUuid\"))){\r",
															"    pm.environment.set(\"orgName\",pm.environment.get(\"editOrgName\"));\r",
															"}\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Body matches string : 'success'\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Your test name\", function () {\r",
															"    pm.expect(pm.response.json().data.organisation.uuid).to.eql(pm.environment.get(\"orgUuid\"));\r",
															"});\r",
															"pm.test(\"Response body has organisation name as : '\"+pm.environment.get(\"editOrgName\")+\"'\", function () {\r",
															"    pm.expect(pm.response.json().data.organisation.name).to.eql(pm.environment.get(\"editOrgName\"));\r",
															"});\r",
															"pm.test(\"Response body has organisation description as : 'Changed Org description'\", function () {\r",
															"    pm.expect(pm.response.json().data.organisation.description).to.eql(\"Changed Org description\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"editOrgName\",\"orgName_\"+Math.floor((Math.random() * 10000000000) + 1));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"{{editOrgName}}\",\n    \"description\":\"Changed Org description\",\n    \"organisationOwner\": {\n    \"name\": \"{{ownerName}}\",\n    \"email\": \"{{orgEmailAddress}}\"\n  }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "When the update org call fails internally",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user has access to org edit perms",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"organisation\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												}
											]
										},
										{
											"name": "Edit org - Duplicate request",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.expect(pm.response.json().data.organisation.uuid).to.eql(pm.environment.get(\"orgUuid\"))){\r",
															"    pm.environment.set(\"orgName\",pm.environment.get(\"editOrgName\"));\r",
															"}\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Body matches string : 'success'\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Your test name\", function () {\r",
															"    pm.expect(pm.response.json().data.organisation.uuid).to.eql(pm.environment.get(\"orgUuid\"));\r",
															"});\r",
															"pm.test(\"Response body has organisation name as : '\"+pm.environment.get(\"editOrgName\")+\"'\", function () {\r",
															"    pm.expect(pm.response.json().data.organisation.name).to.eql(pm.environment.get(\"editOrgName\"));\r",
															"});\r",
															"pm.test(\"Response body has organisation description as : 'Changed Org description'\", function () {\r",
															"    pm.expect(pm.response.json().data.organisation.description).to.eql(\"Changed Org description\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"{{editOrgName}}\",\n    \"organisationOwner\": {\n    \"name\": \"{{orgOwnerName}}\",\n    \"email\": \"{{orgEmailAddress}}\"\n  }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "When the update org call fails internally",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user has access to org edit perms",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"organisation\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												},
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Edit org - wrong orgUuid",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"pm.test(\"Response body has tatus as 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"var errorMessage = \"Resource Not Found\";\r",
															"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"{{editOrgName}}\",\n    \"organisationOwner\": {\n    \"name\": \"{{orgOwnerName}}\",\n    \"email\": \"{{orgEmailAddress}}\"\n  }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "64651346846531313516",
															"type": "string",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Successful only when a user has access to org edit perms",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"organisation\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												},
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "When the update org call fails internally",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Edit org - More than 50 char name",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Response body status is 'failure'\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Response body message is 'Validation Error'\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.message).to.eql(\"Validation Error\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\")  ;\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"var errMessage = \"Ensure this field has no more than 50 characters.\";\r",
															"pm.test(\"Response body validation error message is '\"+errMessage+\"' \", function () {\r",
															"    pm.expect(pm.response.json().validation_errors.name[0][0]).to.eql(errMessage);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"Deleasdasdadadadhauygfawdawdawdwadasdaiquhf4a564a6w4da64da6dw8aw6d4a684d6aw4da684d68a4da65d4aw65d4aw68d!@#&(*@!&$*!&^$*&@!^$*!^$*te2\",\n    \"description\":\"Changed Org description\",\n    \"organisationOwner\": {\n    \"name\": \"{{ownerName}}\",\n    \"email\": \"{{orgEmailAddress}}\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Edit org - Without request body",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Response body status is 'failure'\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Response body message is 'Validation Error'\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.message).to.eql(\"Validation Error\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\")  ;\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"pm.test(\"Response body validation error message is 'Ensure this field has no more than 100 characters.' \", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.validation_errors.name[0][0]).to.eql(\"This field is required.\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Edit org - Invalid request body json",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Response body status is 'failure'\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\")  ;\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"var errorMessage = \"JSON parse error\";\r",
															"pm.test(\"Response body validation error message is '\"+errorMessage+\"' \", function () {\r",
															"    pm.expect(pm.response.json().message).to.contain(errorMessage);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": ,\r\n    \"description\": \r\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Edit org - null org name request",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Response body status is 'failure'\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Response body message is 'Validation Error'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\")  ;\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"pm.test(\"Response body validation error message is 'Ensure this field has no more than 100 characters.' \", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.validation_errors.name[0][0]).to.eql(\"This field may not be null.\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": null,\r\n    \"description\": \"Create Random Demo Org description\"\r\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Edit org - invalid content-type header",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 415\", function () {\r",
															"    pm.response.to.have.status(415);\r",
															"});\r",
															"pm.test(\"Response Body has status as 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Response Body has message as 'Unsupported media type'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.contain(\"Unsupported media type\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Unsupported Media Type\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true,
													"content-type": true
												}
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/xml"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"Create asda adsadaRandom Demo Org\",\n    \"description\": \"Create Random Demo Org description\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Edit org invalid accept header",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 406\", function () {\r",
															"    pm.response.to.have.status(406);\r",
															"});\r",
															"var message = \"Could not satisfy the request Accept header.\";\r",
															"pm.test(\"Response body message is '\"+message+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(message);\r",
															"});\r",
															"pm.test(\"Response body status is 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Acceptable\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/atom+xml",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"Name Changes Org\",\n    \"description\": \"Changed Description\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "When the update org call fails internally",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user has access to org edit perms",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"organisation\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												},
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Edit org - Invalid auth token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 401\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"pm.test(\"Status code name has Unauthorized\", function () {\r",
															"    pm.response.to.have.status(\"Unauthorized\");\r",
															"});\r",
															"pm.test(\"response body status value is 'forbidden'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"forbidden\");\r",
															"});\r",
															"var errMessage = \"Log in to do this action\";\r",
															"pm.test(\"response body message is '\"+errMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errMessage);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1qTkZRVUkyT1RRM01qTXpOa1l4TmpCQ04wSTVNa0kxUmpFNVFVSkVOelkzTnpnNFJqTXpRZyJ9.eyJodHRwczovL2V4YW1wbGUuY29tL3JvbGVzIjpbInVzZXIiXSwiaHR0cHM6Ly9kamFuZ28td2ViYXBwL3JvbGUiOiJ1c2VyIiwibmlja25hbWUiOiJwYW5rYWouZGV2cmFuaSIsIm5hbWUiOiJwYW5rYWouZGV2cmFuaUBhc3RlcmlhLmNvLmluIiwicGljdHVyZSI6Imh0dHBzOi8vcy5ncmF2YXRhci5jb20vYXZhdGFyLzRjN2YzYzM0OWNkYzkzZmMxODVmMTMzMThhZjIzMjcxP3M9NDgwJnI9cGcmZD1odHRwcyUzQSUyRiUyRmNkbi5hdXRoMC5jb20lMkZhdmF0YXJzJTJGcGEucG5nIiwidXBkYXRlZF9hdCI6IjIwMjAtMDYtMTJUMDc6Mzc6MzkuMDE0WiIsImlzcyI6Imh0dHBzOi8vaW5zaWdodDEuYXV0aDAuY29tLyIsInN1YiI6ImF1dGgwfDVlYzdiMTBjZTZmNGUwMGJmMjAzNzZjMyIsImF1ZCI6IlNzTENHTmdnMHlBN0I3c0g1ZU5WTUZtQ1A5SlZkZGUzIiwiaWF0IjoxNTkyMjAxNzc2LCJleHAiOjE1OTIyMzc3NzZ9.NfOcvlsmhi6na-fut67v3PCOhku1EFYM9SvUCaqhSrM4D5ItQS9d-4Z_H8n3x5nc6r4rvTG09Pn3Gk-sDdf1137QmSdgzC-HfYYVEmR5xbiLYHPmZZnxL9ItjKNBYYbY9VBWzSpT434Vzz7DnjiJkyos3mDrLMACjDLQQ-6jCVplDXkOh0NHzQBWy6traQhkKkLceeZ3sa9Bc4PjQt18jzS5a50VHjitaczIZje7ILPeKtG0T3sNIrISyl5HZUK_KXmyzTMKw_9I9zAExkT9GGMBwqxfC6XpQ57wIvBZJN-i4uVNSd3Qjtw1yrCpz-vPMvIk7sbODtEAATtPpLapww",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"Name Changes Org\",\n    \"description\": \"Changed Description\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Successful only when a user has access to org edit perms",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"organisation\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												},
												{
													"name": "When the update org call fails internally",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Remove an organisation (soft delete)",
									"item": [
										{
											"name": "Remove org - wrong orgUuid",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"var errorMessage = \"Resource Not Found\";\r",
															"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
															"});\r",
															"pm.test(\"Body matches string : 'failure'\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"failure\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "6568846313186",
															"type": "string",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Successful only when a user has access to org delete perms",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\"\n}"
												},
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "When the delete org call fails internally",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Remove an organisation (soft delete)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Response body has message : 'Deleted Organisation'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(\"Deleted Organisation\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"status\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"message\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"data\": {\r",
															"      \"type\": \"object\"\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"status\",\r",
															"    \"message\",\r",
															"    \"data\"\r",
															"  ],\r",
															"  \"additionalProperties\":false\r",
															"};\r",
															"\r",
															"pm.test('Schema is valid', function() {\r",
															"    var result = tv4.validateResult(pm.response.json(),schema);\r",
															"    if(!result.valid){\r",
															"        console.log(result);\r",
															"    }\r",
															"  pm.expect(result.valid).to.be.true;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Successful only when a user has access to org delete perms",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\"\n}"
												},
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "When the delete org call fails internally",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Remove org - Duplicate request",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"var errorMessage = \"Resource Not Found\";\r",
															"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
															"});\r",
															"pm.test(\"Body matches string : 'failure'\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"failure\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "When the delete org call fails internally",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user has access to org delete perms",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\"\n}"
												},
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Remove org - Invalid accept header",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 406\", function () {\r",
															"    pm.response.to.have.status(406);\r",
															"});\r",
															"var message = \"Could not satisfy the request Accept header.\";\r",
															"pm.test(\"Response body message is '\"+message+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(message);\r",
															"});\r",
															"pm.test(\"Response body status is 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Acceptable\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/octet-stream"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user has access to org delete perms",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\"\n}"
												},
												{
													"name": "When the delete org call fails internally",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Remove org - Invalid auth token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 401\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"pm.test(\"Status code name has Unauthorized\", function () {\r",
															"    pm.response.to.have.status(\"Unauthorized\");\r",
															"});\r",
															"pm.test(\"response body status value is 'forbidden'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"forbidden\");\r",
															"});\r",
															"var errMessage = \"Log in to do this action\";\r",
															"pm.test(\"response body message is '\"+errMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errMessage);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1qTkZRVUkyT1RRM01qTXpOa1l4TmpCQ04wSTVNa0kxUmpFNVFVSkVOelkzTnpnNFJqTXpRZyJ9.eyJodHRwczovL2V4YW1wbGUuY29tL3JvbGVzIjpbInVzZXIiXSwiaHR0cHM6Ly9kamFuZ28td2ViYXBwL3JvbGUiOiJ1c2VyIiwibmlja25hbWUiOiJwYW5rYWouZGV2cmFuaSIsIm5hbWUiOiJwYW5rYWouZGV2cmFuaUBhc3RlcmlhLmNvLmluIiwicGljdHVyZSI6Imh0dHBzOi8vcy5ncmF2YXRhci5jb20vYXZhdGFyLzRjN2YzYzM0OWNkYzkzZmMxODVmMTMzMThhZjIzMjcxP3M9NDgwJnI9cGcmZD1odHRwcyUzQSUyRiUyRmNkbi5hdXRoMC5jb20lMkZhdmF0YXJzJTJGcGEucG5nIiwidXBkYXRlZF9hdCI6IjIwMjAtMDYtMTJUMDc6Mzc6MzkuMDE0WiIsImlzcyI6Imh0dHBzOi8vaW5zaWdodDEuYXV0aDAuY29tLyIsInN1YiI6ImF1dGgwfDVlYzdiMTBjZTZmNGUwMGJmMjAzNzZjMyIsImF1ZCI6IlNzTENHTmdnMHlBN0I3c0g1ZU5WTUZtQ1A5SlZkZGUzIiwiaWF0IjoxNTkyMjAxNzc2LCJleHAiOjE1OTIyMzc3NzZ9.NfOcvlsmhi6na-fut67v3PCOhku1EFYM9SvUCaqhSrM4D5ItQS9d-4Z_H8n3x5nc6r4rvTG09Pn3Gk-sDdf1137QmSdgzC-HfYYVEmR5xbiLYHPmZZnxL9ItjKNBYYbY9VBWzSpT434Vzz7DnjiJkyos3mDrLMACjDLQQ-6jCVplDXkOh0NHzQBWy6traQhkKkLceeZ3sa9Bc4PjQt18jzS5a50VHjitaczIZje7ILPeKtG0T3sNIrISyl5HZUK_KXmyzTMKw_9I9zAExkT9GGMBwqxfC6XpQ57wIvBZJN-i4uVNSd3Qjtw1yrCpz-vPMvIk7sbODtEAATtPwwapww",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "When the delete org call fails internally",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user has access to org delete perms",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\"\n}"
												}
											]
										},
										{
											"name": "Creating deleted org again for other requests",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"orgUuid\", pm.response.json().data.organisation.uuid);\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Response body has status as 'success'\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.status).to.eql(\"success\");\r",
															"});\r",
															"pm.test(\"Response Body message is 'Organisation Created'\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.message).to.eql(\"Organisation Created\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\")  ;\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"var schema = {\r",
															"  \"$schema\": \"{{baseUrl}}/organisation\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"status\": {\r",
															"      \"type\": \"string\",\r",
															"      \"enum\":[\r",
															"            \"success\",\r",
															"            \"failure\",\r",
															"            \"queued\",\r",
															"            \"pending\",\r",
															"            \"forbidden\"\r",
															"      ]\r",
															"    },\r",
															"    \"message\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"data\": {\r",
															"      \"type\": \"object\",\r",
															"      \"properties\": {\r",
															"        \"organisation\": {\r",
															"          \"type\": \"object\",\r",
															"          \"properties\": {\r",
															"            \"uuid\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"name\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"description\": {\r",
															"              \"type\": \"null\"\r",
															"            },\r",
															"            \"permalink\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"createdAt\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"updatedAt\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"createdBy\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"logoUrl\": {\r",
															"              \"type\": \"null\"\r",
															"            },\r",
															"            \"organisationOwner\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"uuid\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"name\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"email\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"role\": {\r",
															"                  \"type\": \"null\"\r",
															"                },\r",
															"                \"createdAt\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"updatedAt\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"createdBy\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"uuid\",\r",
															"                \"name\",\r",
															"                \"email\",\r",
															"                \"role\",\r",
															"                \"createdAt\",\r",
															"                \"updatedAt\",\r",
															"                \"createdBy\"\r",
															"              ]\r",
															"            }\r",
															"          },\r",
															"          \"required\": [\r",
															"            \"uuid\",\r",
															"            \"name\",\r",
															"            \"description\",\r",
															"            \"permalink\",\r",
															"            \"createdAt\",\r",
															"            \"updatedAt\",\r",
															"            \"createdBy\",\r",
															"            \"logoUrl\",\r",
															"            \"organisationOwner\"\r",
															"          ]\r",
															"        }\r",
															"      },\r",
															"      \"required\": [\r",
															"        \"organisation\"\r",
															"      ],\r",
															"      \"additionalProperties\":false\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"status\",\r",
															"    \"message\",\r",
															"    \"data\"\r",
															"  ],\r",
															"  \"additionalProperties\":false\r",
															"};\r",
															"\r",
															"pm.test('Schema is valid', function() {\r",
															"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"orgName\",\"orgName_\"+Math.floor((Math.random() * 10000000000) + 1));\r",
															"pm.environment.set(\"orgOwnerName\",\"orgOwnerName_\"+pm.environment.get(\"orgName\"));\r",
															"pm.environment.set(\"orgEmailAddress\",\"orgEmailAdd_\"+pm.environment.get(\"orgName\")+\"@cartisdemo.co.in\");\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"{{orgName}}\",\n    \"organisationOwner\": {\n    \"name\": \"{{orgOwnerName}}\",\n    \"email\": \"{{orgEmailAddress}}\"\n  }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Site",
					"item": [
						{
							"name": "A user's API to create a site(with sufficient privs)",
							"item": [
								{
									"name": "A user's API to create a site(with sufficient privs)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if(pm.expect(pm.response.json().status).to.eql(\"success\")){\r",
													"pm.environment.set(\"siteUuid\", pm.response.json().data.site.uuid);\r",
													"}\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response body status is : 'success'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
													"});\r",
													"pm.test(\"Response Body message is 'Project Created'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(\"Site Created\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\")  ;\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response body site name is equal to : '\"+pm.environment.get(\"siteName\")+\"'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.data.site.name).to.eql(pm.environment.get(\"siteName\"));\r",
													"});\r",
													"pm.test(\"Response body should have org uuid as expected.\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.data.site.organisationUuid).to.eql(pm.environment.get(\"orgUuid\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"siteName\",\"siteName\"+Math.floor((Math.random() * 10000000000) + 1));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{siteName}}\",\n  \"description\": \"description-{{siteName}}\",\n  \"locName\": \"locationName-{{siteName}}\",\n  \"locCoordinates\": {\n    \"lat\": 0,\n    \"lng\": 0\n  }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "When the create site call fails internally",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid",
														"site"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "User is not logged in",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid",
														"site"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Successful only when a user with sufficient permissions calls the API",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid",
														"site"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"site\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"organisationUuid\": \"<string>\",\n   \"location\": \"<string>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
										}
									]
								},
								{
									"name": "Create site - Create duplicate record",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"siteUuid\", pm.response.json().data.site.uuid);\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response body status is : 'success'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
													"});\r",
													"pm.test(\"Response Body message is 'site Created'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(\"Site Created\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\")  ;\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response body site name is equal to : '\"+pm.environment.get(\"siteName\")+\"'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.data.site.name).to.eql(pm.environment.get(\"siteName\"));\r",
													"});\r",
													"pm.test(\"Response body should have org uuid as expected.\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.data.site.organisationUuid).to.eql(pm.environment.get(\"orgUuid\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{siteName}}\",\n  \"description\": \"description-{{siteName}}\",\n  \"locName\": \"locationName-{{siteName}}\",\n  \"locCoordinates\": {\n    \"lat\": 0,\n    \"lng\": 0\n  }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create site - wrong orgUuid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"pm.test(\"Response body has status as 'failure'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"var errorMessage = \"Resource Not Found\";\r",
													"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{siteName}}\",\n  \"description\": \"description-{{siteName}}\",\n  \"locName\": \"locationName-{{siteName}}\",\n  \"locCoordinates\": {\n    \"lat\": 0,\n    \"lng\": 0\n  }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "548613",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create site - More than 50 char name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Response body status is 'failure'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Response body message is 'Validation Error'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(\"Validation Error\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\")  ;\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"var errMessage = \"Ensure this field has no more than 50 characters.\";\r",
													"pm.test(\"Response body validation error message is '\"+errMessage+\"' \", function () {\r",
													"    pm.expect(pm.response.json().validation_errors.name[0][0]).to.eql(errMessage);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"More than 50 char name for the site is not allowed.\",\n    \"description\": \"demositedescription\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": [
										{
											"name": "User is not logged in",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid",
														"site"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "When the create site call fails internally",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid",
														"site"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Successful only when a user with sufficient permissions calls the API",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid",
														"site"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"site\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"organisationUuid\": \"<string>\",\n   \"location\": \"<string>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
										}
									]
								},
								{
									"name": "Create site - More than 240 char description",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Response body status is 'failure'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Response body message is 'Validation Error'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(\"Validation Error\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\")  ;\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"var errMessage = \"Ensure this field has no more than 240 characters.\";\r",
													"pm.test(\"Response body validation error message is '\"+errMessage+\"' \", function () {\r",
													"    pm.expect(pm.response.json().validation_errors.description[0][0]).to.eql(errMessage);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{siteName}}\",\n    \"description\": \"uklahfkjahsfkjahkvlahvhuashvlahkvskslhavkjsdhfksjhfklshfklshkdhfksljhfksljahfklshdfklsjhfkljsdhflkhskdfhshflkshfkjahkvlahvhuashvlahkvskslhavkjsdhfksjhfklshfklshkdhfksljhfksljahfklshdfklsjhfkljsdhflkhskdfhshflkshfkjahkvlahvhuashvlahkvskslhavk\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"type": "string",
													"value": "{{orgUuid}}"
												}
											]
										}
									},
									"response": [
										{
											"name": "When the create site call fails internally",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid",
														"site"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "User is not logged in",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid",
														"site"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Successful only when a user with sufficient permissions calls the API",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid",
														"site"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"site\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"organisationUuid\": \"<string>\",\n   \"location\": \"<string>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
										}
									]
								},
								{
									"name": "Create site - More than 512 char location address",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response body status is : 'success'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
													"});\r",
													"pm.test(\"Response Body message is 'Project Created'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(\"Site Created\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\")  ;\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response body site name is equal to : '\"+pm.environment.get(\"siteName\")+\"'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.data.site.name).to.eql(pm.environment.get(\"siteName\"));\r",
													"});\r",
													"pm.test(\"Response body should have org uuid as expected.\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.data.site.organisationUuid).to.eql(pm.environment.get(\"orgUuid\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{siteName}}\",\n    \"description\": \"Demo_description\",\n    \"locName\": \"hvhuashvljsdhfksjahkvladfhshflkshfkjahkvlahvhuashvljsdhfksjahkvladfhshflkshfkjahkvlahvhuaklshvhuashvljsdhfksjahkvladfhshflkshfkjahvhuaksadasadasdasdaadasdhvhuasahvljsdhfksjahkvladfhshflkshfkjahkvlahvhuaklshvhuashvljsdhjahkvladfhashfvalahvhuaklshvhuashvljsdahfksjahkvladfhshflkshfkjahkvlahvhuaklshvhuashvljsdhfksjahkvladfhshflkshfkjahkvlahvhuaklshvhuashvljsdhfksjahkvladfhshflkshfkjahkvlahvhuaklshvhuashvljsdhfksjahkvladfhshflkshfkjahkvlahvhuaklshvhuashvljsdhfksjahkvladfhshflkshfkjahkvlahvhuaklsasdadasdadasaaaaaw\",\n    \"locCoordinates\": {\n    \"lat\": 2,\n    \"lng\": 3\n  }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"type": "string",
													"value": "{{orgUuid}}"
												}
											]
										}
									},
									"response": [
										{
											"name": "When the create site call fails internally",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid",
														"site"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Successful only when a user with sufficient permissions calls the API",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid",
														"site"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"site\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"organisationUuid\": \"<string>\",\n   \"location\": \"<string>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
										},
										{
											"name": "User is not logged in",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid",
														"site"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Create site - Without location name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response body status is : 'success'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
													"});\r",
													"pm.test(\"Response Body message is 'Project Created'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(\"Site Created\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\")  ;\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response body site name is equal to : '\"+pm.environment.get(\"siteName\")+\"'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.data.site.name).to.eql(pm.environment.get(\"siteName\"));\r",
													"});\r",
													"pm.test(\"Response body should have org uuid as expected.\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.data.site.organisationUuid).to.eql(pm.environment.get(\"orgUuid\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{siteName}}\",\n  \"description\": \"description-{{siteName}}\",\n  \"locCoordinates\": {\n    \"lat\": 0,\n    \"lng\": 0\n  }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "When the create site call fails internally",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid",
														"site"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "User is not logged in",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid",
														"site"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Successful only when a user with sufficient permissions calls the API",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid",
														"site"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"site\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"organisationUuid\": \"<string>\",\n   \"location\": \"<string>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
										}
									]
								},
								{
									"name": "Create site - Without location co-ordinate",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Response body status is 'failure'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Response body message is 'Validation Error'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(\"Validation Error\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\")  ;\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"pm.test(\"Response body validation error message is 'This field is required.' \", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.validation_errors.locCoordinates[0][0]).to.eql(\"This field is required.\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{siteName}}\",\n  \"description\": \"description-{{siteName}}\",\n  \"locName\": \"locationName-{{siteName}}\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "User is not logged in",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid",
														"site"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Successful only when a user with sufficient permissions calls the API",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid",
														"site"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"site\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"organisationUuid\": \"<string>\",\n   \"location\": \"<string>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
										},
										{
											"name": "When the create site call fails internally",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid",
														"site"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Create site- Without request body",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Response body status is 'failure'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Response body message is 'Validation Error'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(\"Validation Error\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\")  ;\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"pm.test(\"Response body validation error message is 'Ensure this field has no more than 100 characters.' \", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.validation_errors.name[0][0]).to.eql(\"This field is required.\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create site - Invalid request body json",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Response body status is 'failure'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\")  ;\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"var errorMessage = \"JSON parse error\";\r",
													"pm.test(\"Response body validation error message is '\"+errorMessage+\"' \", function () {\r",
													"    pm.expect(pm.response.json().message).to.contain(errorMessage);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{siteName}}\"\r\n  \"description\": \"description-{{siteName}}\",\r\n  \"locName\": \"locationName-{{siteName}}\",\r\n  \"locCoordinates\": {\r\n    \"lat\": 0,\r\n    \"lng\": 0\r\n  }\r\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create site - Support alph numaric and special character",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response body status is 'success'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"});\r",
													"pm.test(\"Response body message is 'Site Created'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(\"Site Created\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\")  ;\r",
													"});\r",
													"pm.test(\"Status code name has OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Verify orgUuid present in the response\", function () {\r",
													"    pm.expect( pm.response.json().data.site.organisationUuid).to.eql(pm.environment.get(\"orgUuid\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{siteName}}-!@#$%^&*()+=|''}0`~{][:;><.,/?\",\n    \"description\": \"{{siteName}} - Site Description\",\n  \"locCoordinates\": {\n    \"lat\": 0,\n    \"lng\": 0\n  }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Successful only when a user with sufficient permissions calls the API",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid",
														"site"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"site\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"organisationUuid\": \"<string>\",\n   \"location\": \"<string>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
										},
										{
											"name": "When the create site call fails internally",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid",
														"site"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "User is not logged in",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid",
														"site"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Create site - null site name request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Response body status is 'failure'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Response body message is 'Validation Error'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\")  ;\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"pm.test(\"Response body validation error message is 'Ensure this field has no more than 100 characters.' \", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.validation_errors.name[0][0]).to.eql(\"This field may not be null.\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": null,\r\n  \"description\": \"description-{{siteName}}\",\r\n  \"locName\": \"locationName-{{siteName}}\",\r\n  \"locCoordinates\": {\r\n    \"lat\": 0,\r\n    \"lng\": 0\r\n  }\r\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create site - empty site name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Response body status is 'failure'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Response body message is 'Validation Error'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\")  ;\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"pm.test(\"Response body validation error message is 'This field may not be blank.' \", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.validation_errors.name[0][0]).to.eql(\"This field may not be blank.\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"\",\r\n  \"description\": \"description-{{siteName}}\",\r\n  \"locName\": \"locationName-{{siteName}}\",\r\n  \"locCoordinates\": {\r\n    \"lat\": 0,\r\n    \"lng\": 0\r\n  }\r\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create site - Invalid content-type header",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 415\", function () {\r",
													"    pm.response.to.have.status(415);\r",
													"});\r",
													"pm.test(\"Response Body has status as 'failure'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Response Body has message as 'Unsupported media type'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.contain(\"Unsupported media type\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Unsupported Media Type\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true,
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/pdf"
											},
											{
												"key": "",
												"value": "",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{siteName}}\",\n    \"description\": \"demo\",\n    \"location\": \"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create site - Invalid accept header",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 406\", function () {\r",
													"    pm.response.to.have.status(406);\r",
													"});\r",
													"var message = \"Could not satisfy the request Accept header.\";\r",
													"pm.test(\"Response body message is '\"+message+\"'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(message);\r",
													"});\r",
													"pm.test(\"Response body status is 'failure'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Not Acceptable\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/xml",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/graphql",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"demosite\",\n    \"description\": \"demo\",\n    \"location\": \"\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "User is not logged in",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid",
														"site"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "When the create site call fails internally",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid",
														"site"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Successful only when a user with sufficient permissions calls the API",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid",
														"site"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"site\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"organisationUuid\": \"<string>\",\n   \"location\": \"<string>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
										}
									]
								},
								{
									"name": "Create site - Invalid auth token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"pm.test(\"Status code name has Unauthorized\", function () {\r",
													"    pm.response.to.have.status(\"Unauthorized\");\r",
													"});\r",
													"pm.test(\"response body status value is 'forbidden'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"forbidden\");\r",
													"});\r",
													"var errMessage = \"Log in to do this action\";\r",
													"pm.test(\"response body message is '\"+errMessage+\"'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(errMessage);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJSUzIwwiIsInR5cCI6IkpXVCIsImtpZCI6Ik1qTkZRVUkyT1RRM01qTXpOa1l4TmpCQ04wSTVNa0kxUmpFNVFVSkVOelkzTnpnNFJqTXpRZyJ9.eyJodHRwczovL2V4YW1wbGUuY29tL3JvbGVzIjpbInVzZXIiXSwiaHR0cHM6Ly9kamFuZ28td2ViYXBwL3JvbGUiOiJ1c2VyIiwibmlja25hbWUiOiJwYW5rYWouZGV2cmFuaSIsIm5hbWUiOiJwYW5rYWouZGV2cmFuaUBhc3RlcmlhLmNvLmluIiwicGljdHVyZSI6Imh0dHBzOi8vcy5ncmF2YXRhci5jb20vYXZhdGFyLzRjN2YzYzM0OWNkYzkzZmMxODVmMTMzMThhZjIzMjcxP3M9NDgwJnI9cGcmZD1odHRwcyUzQSUyRiUyRmNkbi5hdXRoMC5jb20lMkZhdmF0YXJzJTJGcGEucG5nIiwidXBkYXRlZF9hdCI6IjIwMjAtMDYtMTJUMDc6Mzc6MzkuMDE0WiIsImlzcyI6Imh0dHBzOi8vaW5zaWdodDEuYXV0aDAuY29tLyIsInN1YiI6ImF1dGgwfDVlYzdiMTBjZTZmNGUwMGJmMjAzNzZjMyIsImF1ZCI6IlNzTENHTmdnMHlBN0I3c0g1ZU5WTUZtQ1A5SlZkZGUzIiwiaWF0IjoxNTkyMjAxNzc2LCJleHAiOjE1OTIyMzc3NzZ9.NfOcvlsmhi6na-fut67v3PCOhku1wwYM9SvUCaqhSrM4D5ItQS9d-4Z_H8n3x5nc6r4rvTG09Pn3Gk-sDdf1137QmSdgzC-HfYYVEmR5xbiLYHPmZZnxL9ItjKNBYYbY9VBWzSpT434Vzz7DnjiJkyos3mDrLMACjDLQQ-6jCVplDXkOh0NHzQBWy6traQhkKkLceeZ3sa9Bc4PjQt18jzS5a50VHjitaczIZje7ILPeKtG0T3sNIrISyl5HZUK_KXmyzTMKw_9I9zAExkT9GGMBwqxfC6XpQ57wIvBZJN-i4uVNSd3Qjtw1yrCpz-vPMvIk7sbODtEAATtPwwapww",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"demosite\",\n    \"description\": \"demo\",\n    \"location\": \"\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Successful only when a user with sufficient permissions calls the API",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid",
														"site"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"site\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"organisationUuid\": \"<string>\",\n   \"location\": \"<string>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
										},
										{
											"name": "When the create site call fails internally",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid",
														"site"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "User is not logged in",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid",
														"site"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Get all the sites User has access to",
							"item": [
								{
									"name": "Get all the sites User has access to",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Body matches string : 'success'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites?archived=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites"
											],
											"query": [
												{
													"key": "archived",
													"value": "false"
												}
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": [
										{
											"name": "User is not logged in",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/v2/sites?organisationUuid=<string>&published=<boolean>&archived=<boolean>&public=<boolean>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"sites"
													],
													"query": [
														{
															"key": "organisationUuid",
															"value": "<string>"
														},
														{
															"key": "published",
															"value": "<boolean>"
														},
														{
															"key": "archived",
															"value": "<boolean>"
														},
														{
															"key": "public",
															"value": "<boolean>"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Fired on the site details or main page",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/v2/sites?organisationUuid=<string>&published=<boolean>&archived=<boolean>&public=<boolean>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"sites"
													],
													"query": [
														{
															"key": "organisationUuid",
															"value": "<string>"
														},
														{
															"key": "published",
															"value": "<boolean>"
														},
														{
															"key": "archived",
															"value": "<boolean>"
														},
														{
															"key": "public",
															"value": "<boolean>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"sites\": [\n   {\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"permalink\": \"<string>\",\n    \"uuid\": \"<string>\",\n    \"published\": \"<boolean>\",\n    \"publishedAt\": \"<number>\",\n    \"archived\": \"<boolean>\",\n    \"archivedAt\": \"<number>\",\n    \"organisationUuid\": \"<string>\",\n    \"location\": \"<string>\",\n    \"metaData\": {\n     \"userRole\": {}\n    }\n   },\n   {\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"permalink\": \"<string>\",\n    \"uuid\": \"<string>\",\n    \"published\": \"<boolean>\",\n    \"publishedAt\": \"<number>\",\n    \"archived\": \"<boolean>\",\n    \"archivedAt\": \"<number>\",\n    \"organisationUuid\": \"<string>\",\n    \"location\": \"<string>\",\n    \"metaData\": {\n     \"userRole\": {}\n    }\n   }\n  ]\n }\n}"
										}
									]
								},
								{
									"name": "Get all sites - with request body",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"response has status as 'success'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Delete2233\",\r\n    \"description\": \"Create Random Demo Org description\"\r\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites?archived=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites"
											],
											"query": [
												{
													"key": "archived",
													"value": "false"
												}
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": [
										{
											"name": "Fired on the main/landing page",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisations",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisations"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"organisations\": [\n   {\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"permalink\": \"<string>\",\n    \"uuid\": \"<string>\",\n    \"metaData\": {\n     \"userRole\": {}\n    }\n   },\n   {\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"permalink\": \"<string>\",\n    \"uuid\": \"<string>\",\n    \"metaData\": {\n     \"userRole\": {}\n    }\n   }\n  ]\n }\n}"
										},
										{
											"name": "User is not logged in",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisations",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisations"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get all sites - with wrong orgUuid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"pm.test(\"Response body has status as 'failure'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"var errorMessage = \"Resource Not Found\";\r",
													"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites?archived=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites"
											],
											"query": [
												{
													"key": "archived",
													"value": "false"
												}
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "wwww",
													"type": "string"
												}
											]
										}
									},
									"response": [
										{
											"name": "Successful only when a user has access to org",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"organisation\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
										},
										{
											"name": "User is not logged in",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "When the get org details call fails internally",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get all sites - Invalid accept header",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 406\", function () {\r",
													"    pm.response.to.have.status(406);\r",
													"});\r",
													"var message = \"Could not satisfy the request Accept header.\";\r",
													"pm.test(\"Response body message is '\"+message+\"'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(message);\r",
													"});\r",
													"pm.test(\"Response body status is 'failure'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Not Acceptable\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/zip"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites?archived=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites"
											],
											"query": [
												{
													"key": "archived",
													"value": "false"
												}
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": [
										{
											"name": "Fired on the main/landing page",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisations",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisations"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"organisations\": [\n   {\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"permalink\": \"<string>\",\n    \"uuid\": \"<string>\",\n    \"metaData\": {\n     \"userRole\": {}\n    }\n   },\n   {\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"permalink\": \"<string>\",\n    \"uuid\": \"<string>\",\n    \"metaData\": {\n     \"userRole\": {}\n    }\n   }\n  ]\n }\n}"
										},
										{
											"name": "User is not logged in",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisations",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisations"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get all site - Invalid auth token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"pm.test(\"Status code name has Unauthorized\", function () {\r",
													"    pm.response.to.have.status(\"Unauthorized\");\r",
													"});\r",
													"pm.test(\"response body status value is 'forbidden'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"forbidden\");\r",
													"});\r",
													"var errMessage = \"Log in to do this action\";\r",
													"pm.test(\"response body message is '\"+errMessage+\"'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(errMessage);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1qTkZRVUkyT1RRM01qTXpOa1l4TmpCQ04wSTVNa0kxUmpFNVFVSkVOelkzTnpnNFJqTXpRZyJ9.eyJodHRwczovL2V4YW1wbGUuY29tL3JvbGVzIjpbInVzZXIiXSwiaHR0cHM6Ly9kamFuZ28td2ViYXBwL3JvbGUiOiJ1c2VyIiwibmlja25hbWUiOiJwYW5rYWouZGV2cmFuaSIsIm5hbWUiOiJwYW5rYWouZGV2cmFuaUBhc3RlcmlhLmNvLmluIiwicGljdHVyZSI6Imh0dHBzOi8vcy5ncmF2YXRhci5jb20vYXZhdGFyLzRjN2YzYzM0OWNkYzkzZmMxODVmMTMzMThhZjIzMjcxP3M9NDgwJnI9cGcmZD1odHRwcyUzQSUyRiUyRmNkbi5hdXRoMC5jb20lMkZhdmF0YXJzJTJGcGEucG5nIiwidXBkYXRlZF9hdCI6IjIwMjAtMDYtMTBUMDc6Mzc6MjEuNDM4WiIsImlzcyI6Imh0dHBzOi8vaW5zaWdodDEuYXV0aDAuY29tLyIsInN1YiI6ImF1dGgwfDVlYzdiMTBjZTZmNGUwMGJmMjAzNzZjMyIsImF1ZCI6IlNzTENHTmdnMHlBN0I3c0g1ZU5WTUZtQ1A5SlZkZGUzIiwiaWF0IjoxNTkxODc4OTI1LCJleHAiOjE1OTE5MTQ5MjV9.b-FwIG8vG9rtPDVAhQjlf2tzV9nlq8RFqL1w264skuxsXR01b067gXzOAh5i0VXQ_J5WDMTV-DDkpeUZwE_m57Tl1jSJ_4n0dSWFd39_TI0jNiDQ23qt_OfmDTjEVf0b7GMj3hDk5Vwi0S7BumpE67jX2Pk1QayPXpfBGz2z3kC8qi1pXddWnCPB_E-LtZ6fwmbyOQ-HDSbkcdadBlqtRAPpNWx7APOf-6XbdDB6nF19s_BD1oKJNX2ieKqfV3Ggf2opGHtwrvusd2yFYnCbvdy9pnOTsB4SmrZUMDEArAmTTp5pXqx6UytJ1TQ2fqsBE6DEPCwYK_jLL7QLjFmsWR",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites?archived=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites"
											],
											"query": [
												{
													"key": "archived",
													"value": "false"
												}
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": [
										{
											"name": "Fired on the main/landing page",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisations",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisations"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"organisations\": [\n   {\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"permalink\": \"<string>\",\n    \"uuid\": \"<string>\",\n    \"metaData\": {\n     \"userRole\": {}\n    }\n   },\n   {\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"permalink\": \"<string>\",\n    \"uuid\": \"<string>\",\n    \"metaData\": {\n     \"userRole\": {}\n    }\n   }\n  ]\n }\n}"
										},
										{
											"name": "User is not logged in",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisations",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisations"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "site/{site Uuid}",
							"item": [
								{
									"name": "Get details of a site User has access to",
									"item": [
										{
											"name": "Get details of a site User has access to",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Response body has tatus as 'success'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response body site name is equal to : '\"+pm.environment.get(\"siteName\")+\"'\", function () {\r",
															"    pm.expect(pm.response.json().data.site.name).to.eql(pm.environment.get(\"siteName\"));\r",
															"});\r",
															"pm.test(\"Response body should have site uuid as expected.\", function () {;\r",
															"    pm.expect(pm.response.json().data.site.uuid).to.eql(pm.environment.get(\"siteUuid\"));\r",
															"});\r",
															"pm.test(\"Response body should have org uuid as expected.\", function () {;\r",
															"    pm.expect(pm.response.json().data.site.organisationUuid).to.eql(pm.environment.get(\"orgUuid\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": [
												{
													"name": "When the get site details call fails internally",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/site/:siteUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"site",
																":siteUuid"
															],
															"variable": [
																{
																	"key": "siteUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user has access to site",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/site/:siteUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"site",
																":siteUuid"
															],
															"variable": [
																{
																	"key": "siteUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"site\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"organisationUuid\": \"<string>\",\n   \"location\": \"<string>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												},
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/site/:siteUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"site",
																":siteUuid"
															],
															"variable": [
																{
																	"key": "siteUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Get site - with request body",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Response Body has status as 'success'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response body site uuid is same as expected\", function () {\r",
															"    pm.expect(pm.response.json().data.site.uuid).to.eql(pm.environment.get(\"siteUuid\"));\r",
															"\r",
															"});\r",
															"pm.test(\"Response body org uuid is same as expected\", function () {\r",
															"    pm.expect(pm.response.json().data.site.organisationUuid).to.eql(pm.environment.get(\"orgUuid\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{siteName}}\",\r\n    \"description\": \"Create Random Demo Org description\"\r\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": [
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user has access to org",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"organisation\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												},
												{
													"name": "When the get org details call fails internally",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Get site - with wrong orgUuid",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"pm.test(\"Response body has status as 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"var errorMessage = \"Resource Not Found\";\r",
															"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "wwww",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": [
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user has access to org",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"organisation\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												},
												{
													"name": "When the get org details call fails internally",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Get site - with wrong siteUuid",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"pm.test(\"Response body has status as 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"var errorMessage = \"Resource Not Found\";\r",
															"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "316546513",
															"type": "string"
														}
													]
												}
											},
											"response": [
												{
													"name": "When the get org details call fails internally",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user has access to org",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"organisation\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												},
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Get site - Invalid accept header",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 406\", function () {\r",
															"    pm.response.to.have.status(406);\r",
															"});\r",
															"var message = \"Could not satisfy the request Accept header.\";\r",
															"pm.test(\"Response body message is '\"+message+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(message);\r",
															"});\r",
															"pm.test(\"Response body status is 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Acceptable\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/vnd.api+json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": [
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "When the get org details call fails internally",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user has access to org",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"organisation\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												}
											]
										},
										{
											"name": "Get site - Invalid auth token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 401\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"pm.test(\"Status code name has Unauthorized\", function () {\r",
															"    pm.response.to.have.status(\"Unauthorized\");\r",
															"});\r",
															"pm.test(\"response body status value is 'forbidden'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"forbidden\");\r",
															"});\r",
															"var errMessage = \"Log in to do this action\";\r",
															"pm.test(\"response body message is '\"+errMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errMessage);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1qTkZRVUkyT1RRM01qTXpOa1l4TmpCQ04wSTVNa0kxUmpFNVFVSkVOelkzTnpnNFJqTXpRZyJ9.eyJodHRwczovL2V4YW1wbGUuY29tL3JvbGVzIjpbInVzZXIiXSwiaHR0cHM6Ly9kamFuZ28td2ViYXBwL3JvbGUiOiJ1c2VyIiwibmlja25hbWUiOiJwYW5rYWouZGV2cmFuaSIsIm5hbWUiOiJwYW5rYWouZGV2cmFuaUBhc3RlcmlhLmNvLmluIiwicGljdHVyZSI6Imh0dHBzOi8vcy5ncmF2YXRhci5jb20vYXZhdGFyLzRjN2YzYzM0OWNkYzkzZmMxODVmMTMzMThhZjIzMjcxP3M9NDgwJnI9cGcmZD1odHRwcyUzQSUyRiUyRmNkbi5hdXRoMC5jb20lMkZhdmF0YXJzJTJGcGEucG5nIiwidXBkYXRlZF9hdCI6IjIwMjAtMDYtMTFUMTI6MzU6MjQuMTk4WiIsImlzcyI6Imh0dHBzOi8vaW5zaWdodDEuYXV0aDAuY29tLyIsInN1YiI6ImF1dGgwfDVlYzdiMTBjZTZmNGUwMGJmMjAzNzZjMyIsImF1ZCI6IlNzTENHTmdnMHlBN0I3c0g1ZU5WTUZtQ1A5SlZkZGUzIiwiaWF0IjoxNTkxOTQ3NDYwLCJleHAiOjE1OTE5ODM0NjB9.kYNMikKc84EQXRC32dwkOXW0gkJKfqQTOLVmOkKs5QmvVKcVQNZVbo4fQFuYf07Qu1OpvYKmqBHf3Z5H8nsy-Mfeyufgr86X_p5vdThkpCGMzg3uX06LqKoVDcRRzDndQpmvve5Ripla3ucN5IME363U1EfwqmDPs4jBoAxuB80qurcVq3NBn8dOJzJNCRgGW-aHPP6LJAvezGgWpiDnKRcKLIbU2ig7h5t-8LhWOKDi48TBHGyOQYdxqUE7fC2NCi6ghTX7SnLxXA6S1SMwpqQgAApEnjklY8ImuP6in3Rd5JnvJJedDZTcYWK43iKBMoe5exhYd547XNtpQWttWE",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": [
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "When the get org details call fails internally",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user has access to org",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"organisation\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												}
											]
										}
									]
								},
								{
									"name": "Edit a site's details",
									"item": [
										{
											"name": "Edit an site's details",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"editSiteName\",\"siteName_\"+Math.floor((Math.random() * 10000000000) + 1));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.expect(pm.response.json().data.site.uuid).to.eql(pm.environment.get(\"siteUuid\"))){\r",
															"    pm.environment.set(\"siteName\",pm.environment.get(\"editSiteName\"));\r",
															"}\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Body matches string : 'success'\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response body has site uuid as expected.\", function () {\r",
															"    pm.expect(pm.response.json().data.site.uuid).to.eql(pm.environment.get(\"siteUuid\"));\r",
															"});\r",
															"pm.test(\"Response body has site name as : '\"+pm.environment.get(\"editOrgName\")+\"'\", function () {\r",
															"    pm.expect(pm.response.json().data.site.name).to.eql(pm.environment.get(\"editSiteName\"));\r",
															"});\r",
															"pm.test(\"Response body has site description as : 'Changed Site description'\", function () {\r",
															"    pm.expect(pm.response.json().data.site.description).to.eql(\"Changed description-\"+pm.environment.get(\"editSiteName\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"{{editSiteName}}\",\n    \"description\": \"Changed description-{{editSiteName}}\",\n    \"locName\": \"locationName-{{editSiteName}}\",\n    \"locCoordinates\": {\n        \"lat\": 0,\n        \"lng\": 0\n  }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": [
												{
													"name": "Successful only when a user has access to site edit perms",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/site/:siteUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"site",
																":siteUuid"
															],
															"variable": [
																{
																	"key": "siteUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"site\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"organisationUuid\": \"<string>\",\n   \"location\": \"<string>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												},
												{
													"name": "When the update site call fails internally",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/site/:siteUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"site",
																":siteUuid"
															],
															"variable": [
																{
																	"key": "siteUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/site/:siteUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"site",
																":siteUuid"
															],
															"variable": [
																{
																	"key": "siteUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Edit site - Duplicate request",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.expect(pm.response.json().data.site.uuid).to.eql(pm.environment.get(\"siteUuid\"))){\r",
															"    pm.environment.set(\"siteName\",pm.environment.get(\"editSiteName\"));\r",
															"}\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Body matches string : 'success'\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response body has site uuid as expected.\", function () {\r",
															"    pm.expect(pm.response.json().data.site.uuid).to.eql(pm.environment.get(\"siteUuid\"));\r",
															"});\r",
															"pm.test(\"Response body has site name as : '\"+pm.environment.get(\"editOrgName\")+\"'\", function () {\r",
															"    pm.expect(pm.response.json().data.site.name).to.eql(pm.environment.get(\"editSiteName\"));\r",
															"});\r",
															"pm.test(\"Response body has site description as : 'Changed Site description'\", function () {\r",
															"    pm.expect(pm.response.json().data.site.description).to.eql(\"Changed description-\"+pm.environment.get(\"editSiteName\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"{{editSiteName}}\",\n    \"description\": \"Changed description-{{editSiteName}}\",\n    \"locName\": \"locationName-{{editSiteName}}\",\n    \"locCoordinates\": {\n        \"lat\": 0,\n        \"lng\": 0\n  }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": [
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user has access to org edit perms",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"organisation\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												},
												{
													"name": "When the update org call fails internally",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Edit site - wrong orgUuid",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"pm.test(\"Response body has tatus as 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"var errorMessage = \"Resource Not Found\";\r",
															"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"{{editSiteName}}\",\n    \"description\": \"Changed description-{{editSiteName}}\",\n    \"locName\": \"locationName-{{editSiteName}}\",\n    \"locCoordinates\": {\n        \"lat\": 0,\n        \"lng\": 0\n  }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "354168465313",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": [
												{
													"name": "Successful only when a user has access to org edit perms",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"organisation\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												},
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "When the update org call fails internally",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Edit site - wrong siteUuid",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"pm.test(\"Response body has tatus as 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"var errorMessage = \"Resource Not Found\";\r",
															"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"{{editSiteName}}\",\n    \"description\": \"Changed description-{{editSiteName}}\",\n    \"locName\": \"locationName-{{editSiteName}}\",\n    \"locCoordinates\": {\n        \"lat\": 0,\n        \"lng\": 0\n  }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "87465431",
															"type": "string"
														}
													]
												}
											},
											"response": [
												{
													"name": "When the update org call fails internally",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user has access to org edit perms",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"organisation\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												}
											]
										},
										{
											"name": "Edit site - More than 50 char name",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Response body status is 'failure'\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Response body message is 'Validation Error'\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.message).to.eql(\"Validation Error\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\")  ;\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"var errMessage = \"Ensure this field has no more than 50 characters.\";\r",
															"pm.test(\"Response body validation error message is '\"+errMessage+\"' \", function () {\r",
															"    pm.expect(pm.response.json().validation_errors.name[0][0]).to.eql(errMessage);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"Deleasdasdadadadhauygfawdawdawdwadasdaiquhf4a564a6w4da64da6dw8aw6d4a684d6aw4da684d68a4da65d4aw65d4aw68d!@#&(*@!&$*!&^$*&@!^$*!^$*te2\",\n    \"description\": \"Create Random Demo site description\",\n    \"locName\": \"locationName-{{editSiteName}}\",\n    \"locCoordinates\": {\n        \"lat\": 0,\n        \"lng\": 0\n  }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"type": "string",
															"value": "{{orgUuid}}"
														},
														{
															"key": "siteUuid",
															"type": "string",
															"value": "{{siteUuid}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Edit site - More than 240 char description",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Response body status is 'failure'\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Response body message is 'Validation Error'\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.message).to.eql(\"Validation Error\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\")  ;\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"var errMessage = \"Ensure this field has no more than 240 characters.\";\r",
															"pm.test(\"Response body validation error message is '\"+errMessage+\"' \", function () {\r",
															"    pm.expect(pm.response.json().validation_errors.description[0][0]).to.eql(errMessage);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"{{siteName}}\",\n    \"description\": \"uklahfkjahsfkjahkvlahvhuashvlahkvskslhavkjsdhfksjhfklshfklshkdhfksljhfksljahfklshdfklsjhfkljsdhflkhskdfhshflkshfkjahkvlahvhuashvlahkvskslhavkjsdhfksjhfklshfklshkdhfksljhfksljahfklshdfklsjhfkljsdhflkhskdfhshflkshfkjahkvlahvhuashvlahkvskslhavk\",\n    \"locName\": \"locationName-{{editSiteName}}\",\n    \"locCoordinates\": {\n        \"lat\": 0,\n        \"lng\": 0\n  }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"type": "string",
															"value": "{{orgUuid}}"
														},
														{
															"key": "siteUuid",
															"type": "string",
															"value": "{{siteUuid}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Edit site - Without request body",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Response body status is 'failure'\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Response body message is 'Validation Error'\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.message).to.eql(\"Validation Error\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\")  ;\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"pm.test(\"Response body validation error message for name is 'Ensure this field has no more than 100 characters.' \", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.validation_errors.name[0][0]).to.eql(\"This field is required.\");\r",
															"});\r",
															"pm.test(\"Response body validation error message for locCoordinates is 'Ensure this field has no more than 100 characters.' \", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.validation_errors.locCoordinates[0][0]).to.eql(\"This field is required.\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Edit site - Invalid request body json",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Response body status is 'failure'\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\")  ;\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"var errorMessage = \"JSON parse error\";\r",
															"pm.test(\"Response body validation error message is '\"+errorMessage+\"' \", function () {\r",
															"    pm.expect(pm.response.json().message).to.contain(errorMessage);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": ,\r\n    \"description\": \r\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Edit site - site name and locCoordinates null",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Response body status is 'failure'\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Response body message is 'Validation Error'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\")  ;\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"pm.test(\"Response body validation error message for name is 'This field may not be null.' \", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.validation_errors.name[0][0]).to.eql(\"This field may not be null.\");\r",
															"});\r",
															"pm.test(\"Response body validation error message for locCoordinates is 'This field may not be null.' \", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.validation_errors.locCoordinates[0][0]).to.eql(\"This field may not be null.\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": null,\r\n    \"description\": \"Changed description-{{editSiteName}}\",\r\n    \"locName\": \"locationName-{{editSiteName}}\",\r\n    \"locCoordinates\": null\r\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Edit site - site name empty and lat long as string",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Response body status is 'failure'\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Response body message is 'Validation Error'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\")  ;\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"pm.test(\"Response body validation error message is 'This field may not be blank.' \", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.validation_errors.name[0][0]).to.eql(\"This field may not be blank.\");\r",
															"});\r",
															"pm.test(\"Response body validation error message for 'lat' is 'A valid number is required.' \", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.validation_errors.locCoordinates[0].lat[0]).to.eql(\"A valid number is required.\");\r",
															"});\r",
															"pm.test(\"Response body validation error message for 'lng' is 'A valid number is required.' \", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.validation_errors.locCoordinates[0].lng[0]).to.eql(\"A valid number is required.\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"\",\r\n    \"description\": \"Changed description-{{editSiteName}}\",\r\n    \"locName\": \"locationName-{{editSiteName}}\",\r\n    \"locCoordinates\": {\r\n        \"lat\": \"\",\r\n        \"lng\": \"\"\r\n  }\r\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Edit site - invalid content-type header",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 415\", function () {\r",
															"    pm.response.to.have.status(415);\r",
															"});\r",
															"pm.test(\"Response Body has status as 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Response Body has message as 'Unsupported media type'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.contain(\"Unsupported media type\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Unsupported Media Type\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true,
													"content-type": true
												}
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/xml"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"{{editSiteName}}\",\n    \"description\": \"Changed description-{{editSiteName}}\",\n    \"locName\": \"locationName-{{editSiteName}}\",\n    \"locCoordinates\": {\n        \"lat\": 0,\n        \"lng\": 0\n  }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Edit site - invalid accept header",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 406\", function () {\r",
															"    pm.response.to.have.status(406);\r",
															"});\r",
															"var message = \"Could not satisfy the request Accept header.\";\r",
															"pm.test(\"Response body message is '\"+message+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(message);\r",
															"});\r",
															"pm.test(\"Response body status is 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Acceptable\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/atom+xml",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"Name Changes Org\",\n    \"description\": \"Changed Description\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": [
												{
													"name": "Successful only when a user has access to org edit perms",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"organisation\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												},
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "When the update org call fails internally",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Edit site - Invalid auth token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 401\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"pm.test(\"Status code name has Unauthorized\", function () {\r",
															"    pm.response.to.have.status(\"Unauthorized\");\r",
															"});\r",
															"pm.test(\"response body status value is 'forbidden'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"forbidden\");\r",
															"});\r",
															"var errMessage = \"Log in to do this action\";\r",
															"pm.test(\"response body message is '\"+errMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errMessage);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1qTkZRVUkyT1RRM01qTXpOa1l4TmpCQ04wSTVNa0kxUmpFNVFVSkVOelkzTnpnNFJqTXpRZyJ9.eyJodHRwczovL2V4YW1wbGUuY29tL3JvbGVzIjpbInVzZXIiXSwiaHR0cHM6Ly9kamFuZ28td2ViYXBwL3JvbGUiOiJ1c2VyIiwibmlja25hbWUiOiJwYW5rYWouZGV2cmFuaSIsIm5hbWUiOiJwYW5rYWouZGV2cmFuaUBhc3RlcmlhLmNvLmluIiwicGljdHVyZSI6Imh0dHBzOi8vcy5ncmF2YXRhci5jb20vYXZhdGFyLzRjN2YzYzM0OWNkYzkzZmMxODVmMTMzMThhZjIzMjcxP3M9NDgwJnI9cGcmZD1odHRwcyUzQSUyRiUyRmNkbi5hdXRoMC5jb20lMkZhdmF0YXJzJTJGcGEucG5nIiwidXBkYXRlZF9hdCI6IjIwMjAtMDYtMTJUMDc6Mzc6MzkuMDE0WiIsImlzcyI6Imh0dHBzOi8vaW5zaWdodDEuYXV0aDAuY29tLyIsInN1YiI6ImF1dGgwfDVlYzdiMTBjZTZmNGUwMGJmMjAzNzZjMyIsImF1ZCI6IlNzTENHTmdnMHlBN0I3c0g1ZU5WTUZtQ1A5SlZkZGUzIiwiaWF0IjoxNTkyMjAxNzc2LCJleHAiOjE1OTIyMzc3NzZ9.NfOcvlsmhi6na-fut67v3PCOhku1EFYM9SvUCaqhSrM4D5ItQS9d-4Z_H8n3x5nc6r4rvTG09Pn3Gk-sDdf1137QmSdgzC-HfYYVEmR5xbiLYHPmZZnxL9ItjKNBYYbY9VBWzSpT434Vzz7DnjiJkyos3mDrLMACjDLQQ-6jCVplDXkOh0NHzQBWy6traQhkKkLceeZ3sa9Bc4PjQt18jzS5a50VHjitaczIZje7ILPeKtG0T3sNIrISyl5HZUK_KXmyzTMKw_9I9zAExkT9GGMBwqxfC6XpQ57wIvBZJN-i4uVNSd3Qjtw1yrCpz-vPMvIk7sbODtEAATtPpLapww",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"Name Changes Org\",\n    \"description\": \"Changed Description\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": [
												{
													"name": "When the update org call fails internally",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user has access to org edit perms",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"organisation\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												},
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Remove a site",
									"item": [
										{
											"name": "Remove site - wrong orgUuid",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"pm.test(\"Response body has status as 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"var errorMessage = \"Resource Not Found\";\r",
															"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "56146843",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": [
												{
													"name": "Successful only when a user has access to org delete perms",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\"\n}"
												},
												{
													"name": "When the delete org call fails internally",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Remove site - wrong siteUuid",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"pm.test(\"Response body has status as 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"var errorMessage = \"Resource Not Found\";\r",
															"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "468465313",
															"type": "string"
														}
													]
												}
											},
											"response": [
												{
													"name": "Successful only when a user has access to org delete perms",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\"\n}"
												},
												{
													"name": "When the delete org call fails internally",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Remove a site (soft delete)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Body matches string : 'success'\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Response body has message : 'Deleted Site'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(\"Deleted Site\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": [
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/site/:siteUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"site",
																":siteUuid"
															],
															"variable": [
																{
																	"key": "siteUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "When the delete site call fails internally",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/site/:siteUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"site",
																":siteUuid"
															],
															"variable": [
																{
																	"key": "siteUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user has access to site delete perms",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/site/:siteUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"site",
																":siteUuid"
															],
															"variable": [
																{
																	"key": "siteUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\"\n}"
												}
											]
										},
										{
											"name": "Remove site - Duplicate request",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"var errorMessage = \"Resource Not Found\";\r",
															"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
															"});\r",
															"pm.test(\"Body matches string : 'failure'\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"failure\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": [
												{
													"name": "Successful only when a user has access to org delete perms",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\"\n}"
												},
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "When the delete org call fails internally",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Remove site - Invalid accept header",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 406\", function () {\r",
															"    pm.response.to.have.status(406);\r",
															"});\r",
															"var message = \"Could not satisfy the request Accept header.\";\r",
															"pm.test(\"Response body message is '\"+message+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(message);\r",
															"});\r",
															"pm.test(\"Response body status is 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Acceptable\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/javascript"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": [
												{
													"name": "Successful only when a user has access to org delete perms",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\"\n}"
												},
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "When the delete org call fails internally",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Remove site- Invalid auth token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 401\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"pm.test(\"Status code name has Unauthorized\", function () {\r",
															"    pm.response.to.have.status(\"Unauthorized\");\r",
															"});\r",
															"pm.test(\"response body status value is 'forbidden'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"forbidden\");\r",
															"});\r",
															"var errMessage = \"Log in to do this action\";\r",
															"pm.test(\"response body message is '\"+errMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errMessage);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1qTkZRVUkyT1RRM01qTXpOa1l4TmpCQ04wSTVNa0kxUmpFNVFVSkVOelkzTnpnNFJqTXpRZyJ9.eyJodHRwczovL2V4YW1wbGUuY29tL3JvbGVzIjpbInVzZXIiXSwiaHR0cHM6Ly9kamFuZ28td2ViYXBwL3JvbGUiOiJ1c2VyIiwibmlja25hbWUiOiJwYW5rYWouZGV2cmFuaSIsIm5hbWUiOiJwYW5rYWouZGV2cmFuaUBhc3RlcmlhLmNvLmluIiwicGljdHVyZSI6Imh0dHBzOi8vcy5ncmF2YXRhci5jb20vYXZhdGFyLzRjN2YzYzM0OWNkYzkzZmMxODVmMTMzMThhZjIzMjcxP3M9NDgwJnI9cGcmZD1odHRwcyUzQSUyRiUyRmNkbi5hdXRoMC5jb20lMkZhdmF0YXJzJTJGcGEucG5nIiwidXBkYXRlZF9hdCI6IjIwMjAtMDYtMTJUMDc6Mzc6MzkuMDE0WiIsImlzcyI6Imh0dHBzOi8vaW5zaWdodDEuYXV0aDAuY29tLyIsInN1YiI6ImF1dGgwfDVlYzdiMTBjZTZmNGUwMGJmMjAzNzZjMyIsImF1ZCI6IlNzTENHTmdnMHlBN0I3c0g1ZU5WTUZtQ1A5SlZkZGUzIiwiaWF0IjoxNTkyMjAxNzc2LCJleHAiOjE1OTIyMzc3NzZ9.NfOcvlsmhi6na-fut67v3PCOhku1EFYM9SvUCaqhSrM4D5ItQS9d-4Z_H8n3x5nc6r4rvTG09Pn3Gk-sDdf1137QmSdgzC-HfYYVEmR5xbiLYHPmZZnxL9ItjKNBYYbY9VBWzSpT434Vzz7DnjiJkyos3mDrLMACjDLQQ-6jCVplDXkOh0NHzQBWy6traQhkKkLceeZ3sa9Bc4PjQt18jzS5a50VHjitaczIZje7ILPeKtG0T3sNIrISyl5HZUK_KXmyzTMKw_9I9zAExkT9GGMBwqxfC6XpQ57wIvBZJN-i4uVNSd3Qjtw1yrCpz-vPMvIk7sbODtEAATtPwwapww",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": [
												{
													"name": "Successful only when a user has access to org delete perms",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\"\n}"
												},
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "When the delete org call fails internally",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Another request to create a site for further requests",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"siteUuid\", pm.response.json().data.site.uuid);\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Response body status is : 'success'\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
															"});\r",
															"pm.test(\"Response Body message is 'Project Created'\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.message).to.eql(\"Site Created\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\")  ;\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response body site name is equal to : '\"+pm.environment.get(\"siteName\")+\"'\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.site.name).to.eql(pm.environment.get(\"siteName\"));\r",
															"});\r",
															"pm.test(\"Response body should have org uuid as expected.\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.site.organisationUuid).to.eql(pm.environment.get(\"orgUuid\"));\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"siteName\",\"siteName\"+Math.floor((Math.random() * 10000000000) + 1));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"{{siteName}}\",\n  \"description\": \"description-{{siteName}}\",\n  \"locName\": \"locationName-{{siteName}}\",\n  \"locCoordinates\": {\n    \"lat\": 0,\n    \"lng\": 0\n  }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "When the create site call fails internally",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid",
																"site"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid",
																"site"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user with sufficient permissions calls the API",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid",
																"site"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"site\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"organisationUuid\": \"<string>\",\n   \"location\": \"<string>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Survey",
					"item": [
						{
							"name": "A user's API to create a survey(with sufficient privs)",
							"item": [
								{
									"name": "A user's API to create a survey(with sufficient privs)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response body status is : 'success'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
													"});\r",
													"pm.test(\"Response Body message is 'Survey Created'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(\"Survey Created\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\")  ;\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response body survey name is equal to : '\"+pm.environment.get(\"surveyName\")+\"'\", function () {\r",
													"    pm.expect(pm.response.json().data.survey.name).to.eql(pm.environment.get(\"surveyName\"));\r",
													"});\r",
													"pm.test(\"Response body should have site uuid as expected.\", function () {\r",
													"    pm.expect(pm.response.json().data.survey.siteUuid).to.eql(pm.environment.get(\"siteUuid\"));\r",
													"});\r",
													"if(pm.expect(pm.response.json().status).to.eql(\"success\")){\r",
													"pm.environment.set(\"surveyUuid\", pm.response.json().data.survey.uuid);\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"surveyName\",\"surveyName\"+Math.floor((Math.random() * 10000000000) + 1));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{surveyName}}\",\n    \"description\": \"Survey description - {{surveyName}}\",\n    \"surveyFrom\": \"2020-02-01T00:00:00Z\",\n    \"surveyTo\": \"2020-02-01T00:00:00Z\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create survey - Create duplicate record",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response body status is : 'success'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
													"});\r",
													"pm.test(\"Response Body message is 'Survey Created'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(\"Survey Created\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\")  ;\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response body survey name is equal to : '\"+pm.environment.get(\"surveyName\")+\"'\", function () {\r",
													"    pm.expect(pm.response.json().data.survey.name).to.eql(pm.environment.get(\"surveyName\"));\r",
													"});\r",
													"pm.test(\"Response body should have org uuid as expected.\", function () {\r",
													"    pm.expect(pm.response.json().data.survey.siteUuid).to.eql(pm.environment.get(\"siteUuid\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{surveyName}}\",\n    \"description\": \"Survey description\",\n    \"surveyFrom\": \"2020-02-01T00:00:00Z\",\n    \"surveyTo\": \"2020-02-01T00:00:00Z\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create survey - Wrong orgUuid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"pm.test(\"Response body has status as 'failure'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"var errorMessage = \"Resource Not Found\";\r",
													"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{surveyName}}\",\n    \"description\": \"Survey description\",\n    \"surveyFrom\": \"2020-02-01T00:00:00Z\",\n    \"surveyTo\": \"2020-02-01T00:00:00Z\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"type": "string",
													"value": "."
												},
												{
													"key": "siteUuid",
													"type": "string",
													"value": "{{siteUuid}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create survey - Wrong siteUuid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"pm.test(\"Response body has status as 'failure'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"var errorMessage = \"Resource Not Found\";\r",
													"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{surveyName}}\",\n    \"description\": \"Survey description\",\n    \"surveyFrom\": \"2020-02-01T00:00:00Z\",\n    \"surveyTo\": \"2020-02-01T00:00:00Z\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"type": "string",
													"value": "{{orgUuid}}"
												},
												{
													"key": "siteUuid",
													"type": "string",
													"value": "#243"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create survey - With extra properties",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"surveyUuid\", pm.response.json().data.survey.uuid);\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response body status is : 'success'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
													"});\r",
													"pm.test(\"Response Body message is 'Survey Created'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(\"Survey Created\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\")  ;\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response body survey name is equal to : '\"+pm.environment.get(\"surveyName\")+\"'\", function () {\r",
													"    pm.expect(pm.response.json().data.survey.name).to.eql(pm.environment.get(\"surveyName\"));\r",
													"});\r",
													"pm.test(\"Response body should have org uuid as expected.\", function () {\r",
													"    pm.expect(pm.response.json().data.survey.siteUuid).to.eql(pm.environment.get(\"siteUuid\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{surveyName}}\",\n    \"description\": \"Survey description\",\n    \"surveyFrom\": \"2020-02-01T00:00:00Z\",\n    \"surveyTo\": \"2020-02-01T00:00:00Z\",\n    \"locName\": \"locationName-{{surveyName}}\",\n    \"locCoordinates\": {\n    \"lat\": 0,\n    \"lng\": 0\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create survey - Without name and description",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if(pm.expect(pm.response.json().status).to.eql(\"success\")){\r",
													"pm.environment.set(\"surveyUuidDelete\", pm.response.json().data.survey.uuid);\r",
													"}\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response body status is : 'success'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
													"});\r",
													"pm.test(\"Response Body message is 'Survey Created'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(\"Survey Created\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\")  ;\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response body survey name is equal to : 'null'\", function () {\r",
													"    pm.expect(pm.response.json().data.survey.name).to.eql(null);\r",
													"});\r",
													"pm.test(\"Response body should have org uuid as expected.\", function () {\r",
													"    pm.expect(pm.response.json().data.survey.siteUuid).to.eql(pm.environment.get(\"siteUuid\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"surveyFrom\": \"2020-02-01T00:00:00Z\",\n    \"surveyTo\": \"2020-02-01T00:00:00Z\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove the survey without name and description",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response body status is : 'success'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
													"});\r",
													"pm.test(\"Response body has message : 'Deleted Project'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(\"Deleted Survey\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												},
												{
													"key": "surveyUuid",
													"value": "{{surveyUuidDelete}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create survey - More than 50 char name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Response body status is 'failure'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Response body message is 'Validation Error'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(\"Validation Error\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\")  ;\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"var errMessage = \"Ensure this field has no more than 50 characters.\";\r",
													"pm.test(\"Response body validation error message is '\"+errMessage+\"' \", function () {\r",
													"    pm.expect(pm.response.json().validation_errors.name[0][0]).to.eql(errMessage);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Delete It demoajwhkdgajskgdjasgbjasbdjasbdagdiuoawlhbdkjbaksjbajhdaskjbkjasbfkabsfhaskjfhajksbfkjahvioushilkfkbsfm,bmdbvdzmbvmddnbavkjsabvlabkvjbskvhskalvh,smbvkjhiUHIUWHFKH28957438276I3U4Y68376829TYGIUWHEIUHG3Y8976IHKASKLJFHKWVJKBSAJVKHBWYGVUKWGHJWBMHBSJBKYUWgfyuwgsite\",\n    \"description\": \"demositedescription\",\n    \"surveyFrom\": \"2020-02-01T00:00:00Z\",\n    \"surveyTo\": \"2020-02-01T00:00:00Z\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"type": "string",
													"value": "{{orgUuid}}"
												},
												{
													"key": "siteUuid",
													"type": "string",
													"value": "{{siteUuid}}"
												}
											]
										}
									},
									"response": [
										{
											"name": "When the create site call fails internally",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid",
														"site"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "User is not logged in",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid",
														"site"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Successful only when a user with sufficient permissions calls the API",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid",
														"site"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"site\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"organisationUuid\": \"<string>\",\n   \"location\": \"<string>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
										}
									]
								},
								{
									"name": "Create survey - More than 240 char description",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Response body status is 'failure'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Response body message is 'Validation Error'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(\"Validation Error\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\")  ;\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"var errMessage = \"Ensure this field has no more than 240 characters.\";\r",
													"pm.test(\"Response body validation error message is '\"+errMessage+\"' \", function () {\r",
													"    pm.expect(pm.response.json().validation_errors.description[0][0]).to.eql(errMessage);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{siteName}}\",\n    \"description\": \"uklahfkjahsfkjahkvlahvhuashvlahkvskslhavkjsdhfksjhfklshfklshkdhfksljhfksljahfklshdfklsjhfkljsdhflkhskdfhshflkshfkjahkvlahvhuashvlahkvskslhavkjsdhfksjhfklshfklshkdhfksljhfksljahfklshdfklsjhfkljsdhflkhskdfhshflkshfkjahkvlahvhuashvlahkvskslhavk\",\n    \"surveyFrom\": \"2020-02-01T00:00:00Z\",\n    \"surveyTo\": \"2020-02-01T00:00:00Z\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"type": "string",
													"value": "{{orgUuid}}"
												},
												{
													"key": "siteUuid",
													"type": "string",
													"value": "{{siteUuid}}"
												}
											]
										}
									},
									"response": [
										{
											"name": "User is not logged in",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid",
														"site"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Successful only when a user with sufficient permissions calls the API",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid",
														"site"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"site\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"organisationUuid\": \"<string>\",\n   \"location\": \"<string>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
										},
										{
											"name": "When the create site call fails internally",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid",
														"site"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Create survey - Without request body",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Response body status is 'failure'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Response body message is 'Validation Error'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(\"Validation Error\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\")  ;\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"pm.test(\"Response body validation error message for surveyFrom field is 'This field is required.' \", function () {\r",
													"    pm.expect(pm.response.json().validation_errors.surveyFrom[0][0]).to.eql(\"This field is required.\");\r",
													"});\r",
													"pm.test(\"Response body validation error message for surveyTo field is '\"+pm.variables.get(\"requiredFieldErrorMessage\")+\"' \", function () {\r",
													"    pm.expect(pm.response.json().validation_errors.surveyTo[0][0]).to.eql(pm.variables.get(\"requiredFieldErrorMessage\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create survey - Invalid request body json",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Response body status is 'failure'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\")  ;\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"var errorMessage = \"JSON parse error\";\r",
													"pm.test(\"Response body validation error message is '\"+errorMessage+\"' \", function () {\r",
													"    pm.expect(pm.response.json().message).to.contain(errorMessage);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{surveyName}}\",\r\n    \"description\":\"\"\r\n    \"surveyFrom\": \"2020-02-01T00:00:00Z\",\r\n    \"surveyTo\": \"2020-02-01T00:00:00Z\"\r\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create survey - Support alph numaric and special character",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response body status is 'success'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"});\r",
													"pm.test(\"Response body message is 'Survey Created'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(\"Survey Created\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\")  ;\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"The survey has site Uuid as expected\", function () {\r",
													"    pm.expect( pm.response.json().data.survey.siteUuid).to.eql(pm.environment.get(\"siteUuid\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n     \"name\": \"Survey-!@#$%^&*()+=|''}0`~{][:;><.,/?\",\n    \"description\":\"{{surveyName}}-description\",\n    \"surveyFrom\": \"2020-02-01T00:00:00Z\",\n    \"surveyTo\": \"2020-02-01T00:00:00Z\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": [
										{
											"name": "When the create site call fails internally",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid",
														"site"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "User is not logged in",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid",
														"site"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Successful only when a user with sufficient permissions calls the API",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid",
														"site"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"site\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"organisationUuid\": \"<string>\",\n   \"location\": \"<string>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
										}
									]
								},
								{
									"name": "Create surevey - All properties null",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Response body status is 'failure'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Response body message is 'Validation Error'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\")  ;\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"pm.test(\"Response body validation error message for surveyFrom is 'This field may not be null.' \", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.validation_errors.surveyFrom[0][0]).to.eql(\"This field may not be null.\");\r",
													"});\r",
													"pm.test(\"Response body validation error message for surveyTo is 'This field may not be null.' \", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.validation_errors.surveyTo[0][0]).to.eql(\"This field may not be null.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": null,\r\n    \"description\": null,\r\n    \"surveyFrom\": null,\r\n    \"surveyTo\": null\r\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create survey - From date after To date",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Response body status is : 'failure'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Response Body message is 'Validation Error'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\")  ;\r",
													"});\r",
													"pm.test(\"Status code name has 'Bad Request'\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"var errorMessage = \"Survey from date is greater than the Survey to date\";\r",
													"pm.test(\"Response body should have validation_errors as '\"+errorMessage+\"'.\", function () {\r",
													"    pm.expect(pm.response.json().validation_errors.non_field_errors[0][0]).to.eql(errorMessage);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{surveyName}}\",\n    \"description\": \"Survey description\",\n    \"surveyFrom\": \"2020-02-01T00:00:00Z\",\n    \"surveyTo\": \"2020-01-01T00:00:00Z\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create survey - FromDate, ToDate empty string",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Response body status is : 'failure'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Response Body message is 'Validation Error'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\")  ;\r",
													"});\r",
													"pm.test(\"Status code name has 'Bad Request'\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"var errorMessage = \"Datetime has wrong format. Use one of these formats instead: YYYY-MM-DDThh:mm[:ss[.uuuuuu]][+HH:MM|-HH:MM|Z].\";\r",
													"pm.test(\"Response body should have survey_from validation_error as '\"+errorMessage+\"'.\", function () {\r",
													"    pm.expect(pm.response.json().validation_errors.surveyFrom[0][0]).to.eql(errorMessage);\r",
													"});\r",
													"pm.test(\"Response body should have survey_to validation_error as '\"+errorMessage+\"'.\", function () {\r",
													"    pm.expect(pm.response.json().validation_errors.surveyTo[0][0]).to.eql(errorMessage);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{surveyName}}\",\n    \"description\": \"Survey description\",\n    \"surveyFrom\": \"\",\n    \"surveyTo\": \"\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create survey -  Invalid content-type header",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 415\", function () {\r",
													"    pm.response.to.have.status(415);\r",
													"});\r",
													"pm.test(\"Response Body has status as 'failure'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Response Body has message as 'Unsupported media type'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.contain(\"Unsupported media type\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Unsupported Media Type\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/pdf"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{surveyName}}\",\n    \"description\": \"Survey description\",\n    \"surveyFrom\": \"2020-02-01T00:00:00Z\",\n    \"surveyTo\": \"2020-02-01T00:00:00Z\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create survey -  Invalid accept header",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 406\", function () {\r",
													"    pm.response.to.have.status(406);\r",
													"});\r",
													"var message = \"Could not satisfy the request Accept header.\";\r",
													"pm.test(\"Response body message is '\"+message+\"'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(message);\r",
													"});\r",
													"pm.test(\"Response body status is 'failure'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Not Acceptable\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/font-woff"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{surveyName}}\",\n    \"description\": \"Survey description\",\n    \"surveyFrom\": \"2020-02-01T00:00:00Z\",\n    \"surveyTo\": \"2020-02-01T00:00:00Z\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create survey - Invalid auth token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"pm.test(\"Status code name has Unauthorized\", function () {\r",
													"    pm.response.to.have.status(\"Unauthorized\");\r",
													"});\r",
													"pm.test(\"response body status value is 'forbidden'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"forbidden\");\r",
													"});\r",
													"var errMessage = \"Log in to do this action\";\r",
													"pm.test(\"response body message is '\"+errMessage+\"'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(errMessage);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJSUzIwwiIsInR5cCI6IkpXVCIsImtpZCI6Ik1qTkZRVUkyT1RRM01qTXpOa1l4TmpCQ04wSTVNa0kxUmpFNVFVSkVOelkzTnpnNFJqTXpRZyJ9.eyJodHRwczovL2V4YW1wbGUuY29tL3JvbGVzIjpbInVzZXIiXSwiaHR0cHM6Ly9kamFuZ28td2ViYXBwL3JvbGUiOiJ1c2VyIiwibmlja25hbWUiOiJwYW5rYWouZGV2cmFuaSIsIm5hbWUiOiJwYW5rYWouZGV2cmFuaUBhc3RlcmlhLmNvLmluIiwicGljdHVyZSI6Imh0dHBzOi8vcy5ncmF2YXRhci5jb20vYXZhdGFyLzRjN2YzYzM0OWNkYzkzZmMxODVmMTMzMThhZjIzMjcxP3M9NDgwJnI9cGcmZD1odHRwcyUzQSUyRiUyRmNkbi5hdXRoMC5jb20lMkZhdmF0YXJzJTJGcGEucG5nIiwidXBkYXRlZF9hdCI6IjIwMjAtMDYtMTJUMDc6Mzc6MzkuMDE0WiIsImlzcyI6Imh0dHBzOi8vaW5zaWdodDEuYXV0aDAuY29tLyIsInN1YiI6ImF1dGgwfDVlYzdiMTBjZTZmNGUwMGJmMjAzNzZjMyIsImF1ZCI6IlNzTENHTmdnMHlBN0I3c0g1ZU5WTUZtQ1A5SlZkZGUzIiwiaWF0IjoxNTkyMjAxNzc2LCJleHAiOjE1OTIyMzc3NzZ9.NfOcvlsmhi6na-fut67v3PCOhku1wwYM9SvUCaqhSrM4D5ItQS9d-4Z_H8n3x5nc6r4rvTG09Pn3Gk-sDdf1137QmSdgzC-HfYYVEmR5xbiLYHPmZZnxL9ItjKNBYYbY9VBWzSpT434Vzz7DnjiJkyos3mDrLMACjDLQQ-6jCVplDXkOh0NHzQBWy6traQhkKkLceeZ3sa9Bc4PjQt18jzS5a50VHjitaczIZje7ILPeKtG0T3sNIrISyl5HZUK_KXmyzTMKw_9I9zAExkT9GGMBwqxfC6XpQ57wIvBZJN-i4uVNSd3Qjtw1yrCpz-vPMvIk7sbODtEAATtPwwapww",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{surveyName}}\",\n    \"description\": \"Survey description\",\n    \"surveyFrom\": \"2020-02-01T00:00:00Z\",\n    \"surveyTo\": \"2020-02-01T00:00:00Z\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": [
										{
											"name": "When the create site call fails internally",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid",
														"site"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Successful only when a user with sufficient permissions calls the API",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid",
														"site"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"site\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"organisationUuid\": \"<string>\",\n   \"location\": \"<string>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
										},
										{
											"name": "User is not logged in",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid",
														"site"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Get all the surveys User has access to",
							"item": [
								{
									"name": "Get all the surveys User has access to",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Body matches string : 'success'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys?archived=false&published=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys"
											],
											"query": [
												{
													"key": "archived",
													"value": "false"
												},
												{
													"key": "published",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": [
										{
											"name": "User is not logged in",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/v2/surveys?siteUuid=<string>&published=<boolean>&archived=<boolean>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"surveys"
													],
													"query": [
														{
															"key": "siteUuid",
															"value": "<string>"
														},
														{
															"key": "published",
															"value": "<boolean>"
														},
														{
															"key": "archived",
															"value": "<boolean>"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Fired on the site details page",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/v2/surveys?siteUuid=<string>&published=<boolean>&archived=<boolean>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"surveys"
													],
													"query": [
														{
															"key": "siteUuid",
															"value": "<string>"
														},
														{
															"key": "published",
															"value": "<boolean>"
														},
														{
															"key": "archived",
															"value": "<boolean>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"surveys\": [\n   {\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"permalink\": \"<string>\",\n    \"uuid\": \"<string>\",\n    \"thumbnailURL\": \"<string>\",\n    \"published\": \"<boolean>\",\n    \"publishedAt\": \"<number>\",\n    \"archived\": \"<boolean>\",\n    \"archivedAt\": \"<number>\",\n    \"surveyFrom\": \"<number>\",\n    \"surveyTo\": \"<number>\",\n    \"metaData\": {\n     \"userRole\": {}\n    }\n   },\n   {\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"permalink\": \"<string>\",\n    \"uuid\": \"<string>\",\n    \"thumbnailURL\": \"<string>\",\n    \"published\": \"<boolean>\",\n    \"publishedAt\": \"<number>\",\n    \"archived\": \"<boolean>\",\n    \"archivedAt\": \"<number>\",\n    \"surveyFrom\": \"<number>\",\n    \"surveyTo\": \"<number>\",\n    \"metaData\": {\n     \"userRole\": {}\n    }\n   }\n  ]\n }\n}"
										}
									]
								},
								{
									"name": "Get all surveys - with request body",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Body matches string : 'success'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{surveyName}}\",\r\n    \"description\": \"Survey description\",\r\n    \"surveyFrom\": \"2020-02-01T00:00:00Z\",\r\n    \"surveyTo\": \"2020-02-01T00:00:00Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys?archived=false&published=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys"
											],
											"query": [
												{
													"key": "archived",
													"value": "false"
												},
												{
													"key": "published",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": [
										{
											"name": "User is not logged in",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/v2/surveys?siteUuid=<string>&published=<boolean>&archived=<boolean>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"surveys"
													],
													"query": [
														{
															"key": "siteUuid",
															"value": "<string>"
														},
														{
															"key": "published",
															"value": "<boolean>"
														},
														{
															"key": "archived",
															"value": "<boolean>"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Fired on the site details page",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/v2/surveys?siteUuid=<string>&published=<boolean>&archived=<boolean>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"surveys"
													],
													"query": [
														{
															"key": "siteUuid",
															"value": "<string>"
														},
														{
															"key": "published",
															"value": "<boolean>"
														},
														{
															"key": "archived",
															"value": "<boolean>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"surveys\": [\n   {\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"permalink\": \"<string>\",\n    \"uuid\": \"<string>\",\n    \"thumbnailURL\": \"<string>\",\n    \"published\": \"<boolean>\",\n    \"publishedAt\": \"<number>\",\n    \"archived\": \"<boolean>\",\n    \"archivedAt\": \"<number>\",\n    \"surveyFrom\": \"<number>\",\n    \"surveyTo\": \"<number>\",\n    \"metaData\": {\n     \"userRole\": {}\n    }\n   },\n   {\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"permalink\": \"<string>\",\n    \"uuid\": \"<string>\",\n    \"thumbnailURL\": \"<string>\",\n    \"published\": \"<boolean>\",\n    \"publishedAt\": \"<number>\",\n    \"archived\": \"<boolean>\",\n    \"archivedAt\": \"<number>\",\n    \"surveyFrom\": \"<number>\",\n    \"surveyTo\": \"<number>\",\n    \"metaData\": {\n     \"userRole\": {}\n    }\n   }\n  ]\n }\n}"
										}
									]
								},
								{
									"name": "Get all surveys - wrong orgUuid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"pm.test(\"Response body has status as 'failure'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"var errorMessage = \"Resource Not Found\";\r",
													"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys?archived=false&published=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys"
											],
											"query": [
												{
													"key": "archived",
													"value": "false"
												},
												{
													"key": "published",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "*",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": [
										{
											"name": "User is not logged in",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/v2/surveys?siteUuid=<string>&published=<boolean>&archived=<boolean>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"surveys"
													],
													"query": [
														{
															"key": "siteUuid",
															"value": "<string>"
														},
														{
															"key": "published",
															"value": "<boolean>"
														},
														{
															"key": "archived",
															"value": "<boolean>"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Fired on the site details page",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/v2/surveys?siteUuid=<string>&published=<boolean>&archived=<boolean>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"surveys"
													],
													"query": [
														{
															"key": "siteUuid",
															"value": "<string>"
														},
														{
															"key": "published",
															"value": "<boolean>"
														},
														{
															"key": "archived",
															"value": "<boolean>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"surveys\": [\n   {\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"permalink\": \"<string>\",\n    \"uuid\": \"<string>\",\n    \"thumbnailURL\": \"<string>\",\n    \"published\": \"<boolean>\",\n    \"publishedAt\": \"<number>\",\n    \"archived\": \"<boolean>\",\n    \"archivedAt\": \"<number>\",\n    \"surveyFrom\": \"<number>\",\n    \"surveyTo\": \"<number>\",\n    \"metaData\": {\n     \"userRole\": {}\n    }\n   },\n   {\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"permalink\": \"<string>\",\n    \"uuid\": \"<string>\",\n    \"thumbnailURL\": \"<string>\",\n    \"published\": \"<boolean>\",\n    \"publishedAt\": \"<number>\",\n    \"archived\": \"<boolean>\",\n    \"archivedAt\": \"<number>\",\n    \"surveyFrom\": \"<number>\",\n    \"surveyTo\": \"<number>\",\n    \"metaData\": {\n     \"userRole\": {}\n    }\n   }\n  ]\n }\n}"
										}
									]
								},
								{
									"name": "Get all surveys - wrong siteUuid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"pm.test(\"Response body has status as 'failure'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"var errorMessage = \"Resource Not Found\";\r",
													"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys?archived=false&published=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys"
											],
											"query": [
												{
													"key": "archived",
													"value": "false"
												},
												{
													"key": "published",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "organisationUuid",
													"type": "string",
													"value": "{{orgUuid}}"
												},
												{
													"key": "siteUuid",
													"type": "string",
													"value": "#"
												}
											]
										}
									},
									"response": [
										{
											"name": "User is not logged in",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/v2/surveys?siteUuid=<string>&published=<boolean>&archived=<boolean>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"surveys"
													],
													"query": [
														{
															"key": "siteUuid",
															"value": "<string>"
														},
														{
															"key": "published",
															"value": "<boolean>"
														},
														{
															"key": "archived",
															"value": "<boolean>"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Fired on the site details page",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/v2/surveys?siteUuid=<string>&published=<boolean>&archived=<boolean>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"surveys"
													],
													"query": [
														{
															"key": "siteUuid",
															"value": "<string>"
														},
														{
															"key": "published",
															"value": "<boolean>"
														},
														{
															"key": "archived",
															"value": "<boolean>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"surveys\": [\n   {\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"permalink\": \"<string>\",\n    \"uuid\": \"<string>\",\n    \"thumbnailURL\": \"<string>\",\n    \"published\": \"<boolean>\",\n    \"publishedAt\": \"<number>\",\n    \"archived\": \"<boolean>\",\n    \"archivedAt\": \"<number>\",\n    \"surveyFrom\": \"<number>\",\n    \"surveyTo\": \"<number>\",\n    \"metaData\": {\n     \"userRole\": {}\n    }\n   },\n   {\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"permalink\": \"<string>\",\n    \"uuid\": \"<string>\",\n    \"thumbnailURL\": \"<string>\",\n    \"published\": \"<boolean>\",\n    \"publishedAt\": \"<number>\",\n    \"archived\": \"<boolean>\",\n    \"archivedAt\": \"<number>\",\n    \"surveyFrom\": \"<number>\",\n    \"surveyTo\": \"<number>\",\n    \"metaData\": {\n     \"userRole\": {}\n    }\n   }\n  ]\n }\n}"
										}
									]
								},
								{
									"name": "Get all surveys - Invalid accept header",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 406\", function () {\r",
													"    pm.response.to.have.status(406);\r",
													"});\r",
													"var message = \"Could not satisfy the request Accept header.\";\r",
													"pm.test(\"Response body message is '\"+message+\"'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(message);\r",
													"});\r",
													"pm.test(\"Response body status is 'failure'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Not Acceptable\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/zip"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys?archived=false&published=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys"
											],
											"query": [
												{
													"key": "archived",
													"value": "false"
												},
												{
													"key": "published",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": [
										{
											"name": "Fired on the main/landing page",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisations",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisations"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"organisations\": [\n   {\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"permalink\": \"<string>\",\n    \"uuid\": \"<string>\",\n    \"metaData\": {\n     \"userRole\": {}\n    }\n   },\n   {\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"permalink\": \"<string>\",\n    \"uuid\": \"<string>\",\n    \"metaData\": {\n     \"userRole\": {}\n    }\n   }\n  ]\n }\n}"
										},
										{
											"name": "User is not logged in",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisations",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisations"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get all survey - Invalid auth token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"pm.test(\"Status code name has Unauthorized\", function () {\r",
													"    pm.response.to.have.status(\"Unauthorized\");\r",
													"});\r",
													"pm.test(\"response body status value is 'forbidden'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"forbidden\");\r",
													"});\r",
													"var errMessage = \"Log in to do this action\";\r",
													"pm.test(\"response body message is '\"+errMessage+\"'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(errMessage);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1qTkZRVUkyT1RRM01qTXpOa1l4TmpCQ04wSTVNa0kxUmpFNVFVSkVOelkzTnpnNFJqTXpRZyJ9.eyJodHRwczovL2V4YW1wbGUuY29tL3JvbGVzIjpbInVzZXIiXSwiaHR0cHM6Ly9kamFuZ28td2ViYXBwL3JvbGUiOiJ1c2VyIiwibmlja25hbWUiOiJwYW5rYWouZGV2cmFuaSIsIm5hbWUiOiJwYW5rYWouZGV2cmFuaUBhc3RlcmlhLmNvLmluIiwicGljdHVyZSI6Imh0dHBzOi8vcy5ncmF2YXRhci5jb20vYXZhdGFyLzRjN2YzYzM0OWNkYzkzZmMxODVmMTMzMThhZjIzMjcxP3M9NDgwJnI9cGcmZD1odHRwcyUzQSUyRiUyRmNkbi5hdXRoMC5jb20lMkZhdmF0YXJzJTJGcGEucG5nIiwidXBkYXRlZF9hdCI6IjIwMjAtMDYtMTBUMDc6Mzc6MjEuNDM4WiIsImlzcyI6Imh0dHBzOi8vaW5zaWdodDEuYXV0aDAuY29tLyIsInN1YiI6ImF1dGgwfDVlYzdiMTBjZTZmNGUwMGJmMjAzNzZjMyIsImF1ZCI6IlNzTENHTmdnMHlBN0I3c0g1ZU5WTUZtQ1A5SlZkZGUzIiwiaWF0IjoxNTkxODc4OTI1LCJleHAiOjE1OTE5MTQ5MjV9.b-FwIG8vG9rtPDVAhQjlf2tzV9nlq8RFqL1w264skuxsXR01b067gXzOAh5i0VXQ_J5WDMTV-DDkpeUZwE_m57Tl1jSJ_4n0dSWFd39_TI0jNiDQ23qt_OfmDTjEVf0b7GMj3hDk5Vwi0S7BumpE67jX2Pk1QayPXpfBGz2z3kC8qi1pXddWnCPB_E-LtZ6fwmbyOQ-HDSbkcdadBlqtRAPpNWx7APOf-6XbdDB6nF19s_BD1oKJNX2ieKqfV3Ggf2opGHtwrvusd2yFYnCbvdy9pnOTsB4SmrZUMDEArAmTTp5pXqx6UytJ1TQ2fqsBE6DEPCwYK_jLL7QLjFmsWR",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys?archived=false&published=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys"
											],
											"query": [
												{
													"key": "archived",
													"value": "false"
												},
												{
													"key": "published",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": [
										{
											"name": "Fired on the main/landing page",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisations",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisations"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"organisations\": [\n   {\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"permalink\": \"<string>\",\n    \"uuid\": \"<string>\",\n    \"metaData\": {\n     \"userRole\": {}\n    }\n   },\n   {\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"permalink\": \"<string>\",\n    \"uuid\": \"<string>\",\n    \"metaData\": {\n     \"userRole\": {}\n    }\n   }\n  ]\n }\n}"
										},
										{
											"name": "User is not logged in",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisations",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisations"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "survey/{survey Uuid}",
							"item": [
								{
									"name": "Get details of a survey User has access to",
									"item": [
										{
											"name": "Get details of a survey User has access to",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Response body has tatus as 'success'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response body survey name is equal to : '\"+pm.environment.get(\"surveyName\")+\"'\", function () {\r",
															"    pm.expect(pm.response.json().data.survey.name).to.eql(pm.environment.get(\"surveyName\"));\r",
															"});\r",
															"pm.test(\"Response body should have survey uuid as expected.\", function () {;\r",
															"    pm.expect(pm.response.json().data.survey.uuid).to.eql(pm.environment.get(\"surveyUuid\"));\r",
															"});\r",
															"pm.test(\"Response body should have site uuid as expected.\", function () {;\r",
															"    pm.expect(pm.response.json().data.survey.siteUuid).to.eql(pm.environment.get(\"siteUuid\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": [
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "When the get survey details call fails internally",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user has access to survey",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												}
											]
										},
										{
											"name": "Get survey - with request body",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Response body has tatus as 'success'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response body survey name is equal to : '\"+pm.environment.get(\"surveyName\")+\"'\", function () {\r",
															"    pm.expect(pm.response.json().data.survey.name).to.eql(pm.environment.get(\"surveyName\"));\r",
															"});\r",
															"pm.test(\"Response body should have survey uuid as expected.\", function () {;\r",
															"    pm.expect(pm.response.json().data.survey.uuid).to.eql(pm.environment.get(\"surveyUuid\"));\r",
															"});\r",
															"pm.test(\"Response body should have site uuid as expected.\", function () {;\r",
															"    pm.expect(pm.response.json().data.survey.siteUuid).to.eql(pm.environment.get(\"siteUuid\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{surveyName}}\",\r\n    \"description\": \"Survey description\",\r\n    \"surveyFrom\": \"2020-02-01T00:00:00Z\",\r\n    \"surveyTo\": \"2020-02-01T00:00:00Z\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Successful only when a user has access to survey",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												},
												{
													"name": "When the get survey details call fails internally",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Get survey - worng orgUuid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"pm.test(\"Response body has status as 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"var errorMessage = \"Resource Not Found\";\r",
															"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": ")(*)*&))(*",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "When the get survey details call fails internally",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user has access to survey",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												},
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Get survey - worng siteUuid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"pm.test(\"Response body has status as 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"var errorMessage = \"Resource Not Found\";\r",
															"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "!!@$$",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "When the get survey details call fails internally",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user has access to survey",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												}
											]
										},
										{
											"name": "Get survey - worng surveyUuid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"pm.test(\"Response body has status as 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"var errorMessage = \"Resource Not Found\";\r",
															"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "4684651351",
															"type": "string",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "When the get survey details call fails internally",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user has access to survey",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												}
											]
										},
										{
											"name": "Get survey - Invalid accept header",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 406\", function () {\r",
															"    pm.response.to.have.status(406);\r",
															"});\r",
															"var message = \"Could not satisfy the request Accept header.\";\r",
															"pm.test(\"Response body message is '\"+message+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(message);\r",
															"});\r",
															"pm.test(\"Response body status is 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Acceptable\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/octet-stream",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "When the get survey details call fails internally",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user has access to survey",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												},
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Get survey - Invalid auth token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 401\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"pm.test(\"Status code name has Unauthorized\", function () {\r",
															"    pm.response.to.have.status(\"Unauthorized\");\r",
															"});\r",
															"pm.test(\"response body status value is 'forbidden'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"forbidden\");\r",
															"});\r",
															"var errMessage = \"Log in to do this action\";\r",
															"pm.test(\"response body message is '\"+errMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errMessage);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1qTkZRVUkyT1RRM01qTXpOa1l4TmpCQ04wSTVNa0kxUmpFNVFVSkVOelkzTnpnNFJqTXpRZyJ9.eyJodHRwczovL2V4YW1wbGUuY29tL3JvbGVzIjpbInVzZXIiXSwiaHR0cHM6Ly9kamFuZ28td2ViYXBwL3JvbGUiOiJ1c2VyIiwibmlja25hbWUiOiJwYW5rYWouZGV2cmFuaSIsIm5hbWUiOiJwYW5rYWouZGV2cmFuaUBhc3RlcmlhLmNvLmluIiwicGljdHVyZSI6Imh0dHBzOi8vcy5ncmF2YXRhci5jb20vYXZhdGFyLzRjN2YzYzM0OWNkYzkzZmMxODVmMTMzMThhZjIzMjcxP3M9NDgwJnI9cGcmZD1odHRwcyUzQSUyRiUyRmNkbi5hdXRoMC5jb20lMkZhdmF0YXJzJTJGcGEucG5nIiwidXBkYXRlZF9hdCI6IjIwMjAtMDYtMTFUMTI6MzU6MjQuMTk4WiIsImlzcyI6Imh0dHBzOi8vaW5zaWdodDEuYXV0aDAuY29tLyIsInN1YiI6ImF1dGgwfDVlYzdiMTBjZTZmNGUwMGJmMjAzNzZjMyIsImF1ZCI6IlNzTENHTmdnMHlBN0I3c0g1ZU5WTUZtQ1A5SlZkZGUzIiwiaWF0IjoxNTkxOTQ3NDYwLCJleHAiOjE1OTE5ODM0NjB9.kYNMikKc84EQXRC32dwkOXW0gkJKfqQTOLVmOkKs5QmvVKcVQNZVbo4fQFuYf07Qu1OpvYKmqBHf3Z5H8nsy-Mfeyufgr86X_p5vdThkpCGMzg3uX06LqKoVDcRRzDndQpmvve5Ripla3ucN5IME363U1EfwqmDPs4jBoAxuB80qurcVq3NBn8dOJzJNCRgGW-aHPP6LJAvezGgWpiDnKRcKLIbU2ig7h5t-8LhWOKDi48TBHGyOQYdxqUE7fC2NCi6ghTX7SnLxXA6S1SMwpqQgAApEnjklY8ImuP6in3Rd5JnvJJedDZTcYWK43iKBMoe5exhYd547XNtpQWttWE",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user has access to survey",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												},
												{
													"name": "When the get survey details call fails internally",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Edit a survey's details",
									"item": [
										{
											"name": "Edit an survey's details",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"editSurveyName\",\"surveyName_\"+Math.floor((Math.random() * 10000000000) + 1));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.expect(pm.response.json().data.survey.uuid).to.eql(pm.environment.get(\"surveyUuid\"))){\r",
															"    pm.environment.set(\"surveyName\",pm.environment.get(\"editSurveyName\"));\r",
															"}\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Body matches string : 'success'\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response body has survey uuid as expected.\", function () {\r",
															"    pm.expect(pm.response.json().data.survey.uuid).to.eql(pm.environment.get(\"surveyUuid\"));\r",
															"});\r",
															"pm.test(\"Response body has survey name as : '\"+pm.environment.get(\"editsurveyName\")+\"'\", function () {\r",
															"    pm.expect(pm.response.json().data.survey.name).to.eql(pm.environment.get(\"editSurveyName\"));\r",
															"});\r",
															"pm.test(\"Response body has survey description as : 'Changed survey description'\", function () {\r",
															"    pm.expect(pm.response.json().data.survey.description).to.eql(\"Changed survey description - \" + pm.environment.get(\"editSurveyName\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"name\": \"{{editSurveyName}}\",\r\n  \"description\": \"Changed survey description - {{editSurveyName}}\",\r\n  \"surveyFrom\": \"2020-02-01T00:00:00Z\",\r\n  \"surveyTo\": \"2020-02-01T00:00:00Z\"\r\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": [
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user has access to survey edit perms",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												},
												{
													"name": "When the update survey call fails internally",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Edit survey - Duplicate request",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.expect(pm.response.json().data.survey.uuid).to.eql(pm.environment.get(\"surveyUuid\"))){\r",
															"    pm.environment.set(\"surveyName\",pm.environment.get(\"editSurveyName\"));\r",
															"}\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Body matches string : 'success'\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response body has survey uuid as expected.\", function () {\r",
															"    pm.expect(pm.response.json().data.survey.uuid).to.eql(pm.environment.get(\"surveyUuid\"));\r",
															"});\r",
															"pm.test(\"Response body has survey name as : '\"+pm.environment.get(\"editsurveyName\")+\"'\", function () {\r",
															"    pm.expect(pm.response.json().data.survey.name).to.eql(pm.environment.get(\"editSurveyName\"));\r",
															"});\r",
															"pm.test(\"Response body has survey description as : 'Changed survey description'\", function () {\r",
															"    pm.expect(pm.response.json().data.survey.description).to.eql(\"Changed survey description - \" + pm.environment.get(\"editSurveyName\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"name\": \"{{editSurveyName}}\",\r\n  \"description\": \"Changed survey description - {{editSurveyName}}\",\r\n  \"surveyFrom\": \"2020-02-01T00:00:00Z\",\r\n  \"surveyTo\": \"2020-02-01T00:00:00Z\"\r\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": [
												{
													"name": "Successful only when a user has access to survey edit perms",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												},
												{
													"name": "When the update survey call fails internally",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Edit survey - wrong orgUuid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"pm.test(\"Response body has tatus as 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"var errorMessage = \"Resource Not Found\";\r",
															"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"name\": \"{{editSurveyName}}\",\r\n  \"description\": \"Changed survey description - {{editSurveyName}}\",\r\n  \"surveyFrom\": \"2020-02-01T00:00:00Z\",\r\n  \"surveyTo\": \"2020-02-01T00:00:00Z\"\r\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "jkvkdjbvd",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": [
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "When the update survey call fails internally",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user has access to survey edit perms",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												}
											]
										},
										{
											"name": "Edit survey - wrong siteUuid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"pm.test(\"Response body has tatus as 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"var errorMessage = \"Resource Not Found\";\r",
															"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"name\": \"{{editSurveyName}}\",\r\n  \"description\": \"Changed survey description - {{editSurveyName}}\",\r\n  \"surveyFrom\": \"2020-02-01T00:00:00Z\",\r\n  \"surveyTo\": \"2020-02-01T00:00:00Z\"\r\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "nvkjdksvd",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": [
												{
													"name": "Successful only when a user has access to survey edit perms",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												},
												{
													"name": "When the update survey call fails internally",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Edit survey - wrong surveyUuid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"pm.test(\"Response body has tatus as 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"var errorMessage = \"Resource Not Found\";\r",
															"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"name\": \"{{editSurveyName}}\",\r\n  \"description\": \"Changed survey description - {{editSurveyName}}\",\r\n  \"surveyFrom\": \"2020-02-01T00:00:00Z\",\r\n  \"surveyTo\": \"2020-02-01T00:00:00Z\"\r\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "khsdkajhdkabscsajbk",
															"type": "string"
														}
													]
												}
											},
											"response": [
												{
													"name": "When the update survey call fails internally",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user has access to survey edit perms",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												}
											]
										},
										{
											"name": "Edit survey - More than 50 char name",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Response body status is 'failure'\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Response body message is 'Validation Error'\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.message).to.eql(\"Validation Error\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\")  ;\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"var errMessage = \"Ensure this field has no more than 50 characters.\";\r",
															"pm.test(\"Response body validation error message is '\"+errMessage+\"' \", function () {\r",
															"    pm.expect(pm.response.json().validation_errors.name[0][0]).to.eql(errMessage);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"{{editSurveyName}} - Deleasdasdadadadhauygfawdawdawdwadasdaiquhf4a564a6w4da64da6dw8aw6d4a684d6aw4da684d68a4da65d4aw65d4aw68d!@#&(*@!&$*!&^$*&@!^$*!^$*te2\",\n  \"description\": \"Create Random Demo survey description - {{editSurveyName}}\",\n  \"surveyFrom\": \"2020-02-01T00:00:00Z\",\n  \"surveyTo\": \"2020-02-01T00:00:00Z\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"type": "string",
															"value": "{{orgUuid}}"
														},
														{
															"key": "siteUuid",
															"type": "string",
															"value": "{{siteUuid}}"
														},
														{
															"key": "surveyUuid",
															"type": "string",
															"value": "{{surveyUuid}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Edit survey - More than 240 char description",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Response body status is 'failure'\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Response body message is 'Validation Error'\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.message).to.eql(\"Validation Error\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\")  ;\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"var errMessage = \"Ensure this field has no more than 240 characters.\";\r",
															"pm.test(\"Response body validation error message is '\"+errMessage+\"' \", function () {\r",
															"    pm.expect(pm.response.json().validation_errors.description[0][0]).to.eql(errMessage);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"Delete this survey\",\n  \"description\": \"uklahfkjahsfkjahkvlahvhuashvlahkvskslhavkjsdhfksjhfklshfklshkdhfksljhfksljahfklshdfklsjhfkljsdhflkhskdfhshflkshfkjahkvlahvhuashvlahkvskslhavkjsdhfksjhfklshfklshkdhfksljhfksljahfklshdfklsjhfkljsdhflkhskdfhshflkshfkjahkvlahvhuashvlahkvskslhavk\",\n  \"surveyFrom\": \"2020-02-01T00:00:00Z\",\n  \"surveyTo\": \"2020-02-01T00:00:00Z\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"type": "string",
															"value": "{{orgUuid}}"
														},
														{
															"key": "siteUuid",
															"type": "string",
															"value": "{{siteUuid}}"
														},
														{
															"key": "surveyUuid",
															"type": "string",
															"value": "{{surveyUuid}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Edit survey - Without request body",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Response body status is 'failure'\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Response body message is 'Validation Error'\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.message).to.eql(\"Validation Error\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\")  ;\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"var errorMessage = \"This field is required.\";\r",
															"pm.test(\"Response body validation error message for surveyFrom is '\"+errorMessage+\"' \", function () {\r",
															"    pm.expect(pm.response.json().validation_errors.surveyFrom[0][0]).to.eql(errorMessage);\r",
															"});\r",
															"pm.test(\"Response body validation error message for surveyTo is '\"+errorMessage+\"' \", function () {\r",
															"    pm.expect(pm.response.json().validation_errors.surveyTo[0][0]).to.eql(errorMessage);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Edit survey - Invalid request body json",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Response body status is 'failure'\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\")  ;\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"var errorMessage = \"JSON parse error\";\r",
															"pm.test(\"Response body validation error message is '\"+errorMessage+\"' \", function () {\r",
															"    pm.expect(pm.response.json().message).to.contain(errorMessage);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": ,\r\n    \"description\": \r\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Edit survey - All properties null",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Response body status is 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Response body message is 'Validation Error'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\")  ;\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"var errorMessage = \"This field may not be null.\";\r",
															"pm.test(\"Response body validation error message for surveyFrom is '\"+errorMessage+\"' \", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.validation_errors.surveyFrom[0][0]).to.eql(errorMessage);\r",
															"});\r",
															"pm.test(\"Response body validation error message for surveyTo is '\"+errorMessage+\"' \", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.validation_errors.surveyTo[0][0]).to.eql(errorMessage);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"name\": null,\r\n  \"description\": null,\r\n  \"surveyFrom\": null,\r\n  \"surveyTo\": null\r\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Edit survey - invalid content-type header",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 415\", function () {\r",
															"    pm.response.to.have.status(415);\r",
															"});\r",
															"pm.test(\"Response Body has status as 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Response Body has message as 'Unsupported media type'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.contain(\"Unsupported media type\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Unsupported Media Type\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true,
													"content-type": true
												}
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/ogg"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"{{editSurveyName}}\",\n  \"description\": \"Changed survey description - {{editSurveyName}}\",\n  \"surveyFrom\": \"2020-02-01T00:00:00Z\",\n  \"surveyTo\": \"2020-02-01T00:00:00Z\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Edit survey - invalid accept header",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 406\", function () {\r",
															"    pm.response.to.have.status(406);\r",
															"});\r",
															"var message = \"Could not satisfy the request Accept header.\";\r",
															"pm.test(\"Response body message is '\"+message+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(message);\r",
															"});\r",
															"pm.test(\"Response body status is 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Acceptable\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"type": "text",
														"value": "application/atom+xml"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"{{editSurveyName}}\",\n  \"description\": \"Changed survey description - {{editSurveyName}}\",\n  \"surveyFrom\": \"2020-02-01T00:00:00Z\",\n  \"surveyTo\": \"2020-02-01T00:00:00Z\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": [
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "When the update org call fails internally",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user has access to org edit perms",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"organisation\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												}
											]
										},
										{
											"name": "Edit survey - Invalid auth token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 401\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"pm.test(\"Status code name has Unauthorized\", function () {\r",
															"    pm.response.to.have.status(\"Unauthorized\");\r",
															"});\r",
															"pm.test(\"response body status value is 'forbidden'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"forbidden\");\r",
															"});\r",
															"var errMessage = \"Log in to do this action\";\r",
															"pm.test(\"response body message is '\"+errMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errMessage);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1qTkZRVUkyT1RRM01qTXpOa1l4TmpCQ04wSTVNa0kxUmpFNVFVSkVOelkzTnpnNFJqTXpRZyJ9.eyJodHRwczovL2V4YW1wbGUuY29tL3JvbGVzIjpbInVzZXIiXSwiaHR0cHM6Ly9kamFuZ28td2ViYXBwL3JvbGUiOiJ1c2VyIiwibmlja25hbWUiOiJwYW5rYWouZGV2cmFuaSIsIm5hbWUiOiJwYW5rYWouZGV2cmFuaUBhc3RlcmlhLmNvLmluIiwicGljdHVyZSI6Imh0dHBzOi8vcy5ncmF2YXRhci5jb20vYXZhdGFyLzRjN2YzYzM0OWNkYzkzZmMxODVmMTMzMThhZjIzMjcxP3M9NDgwJnI9cGcmZD1odHRwcyUzQSUyRiUyRmNkbi5hdXRoMC5jb20lMkZhdmF0YXJzJTJGcGEucG5nIiwidXBkYXRlZF9hdCI6IjIwMjAtMDYtMTJUMDc6Mzc6MzkuMDE0WiIsImlzcyI6Imh0dHBzOi8vaW5zaWdodDEuYXV0aDAuY29tLyIsInN1YiI6ImF1dGgwfDVlYzdiMTBjZTZmNGUwMGJmMjAzNzZjMyIsImF1ZCI6IlNzTENHTmdnMHlBN0I3c0g1ZU5WTUZtQ1A5SlZkZGUzIiwiaWF0IjoxNTkyMjAxNzc2LCJleHAiOjE1OTIyMzc3NzZ9.NfOcvlsmhi6na-fut67v3PCOhku1EFYM9SvUCaqhSrM4D5ItQS9d-4Z_H8n3x5nc6r4rvTG09Pn3Gk-sDdf1137QmSdgzC-HfYYVEmR5xbiLYHPmZZnxL9ItjKNBYYbY9VBWzSpT434Vzz7DnjiJkyos3mDrLMACjDLQQ-6jCVplDXkOh0NHzQBWy6traQhkKkLceeZ3sa9Bc4PjQt18jzS5a50VHjitaczIZje7ILPeKtG0T3sNIrISyl5HZUK_KXmyzTMKw_9I9zAExkT9GGMBwqxfC6XpQ57wIvBZJN-i4uVNSd3Qjtw1yrCpz-vPMvIk7sbODtEAATtPpLapww",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"{{editSurveyName}}\",\n  \"description\": \"Changed survey description - {{editSurveyName}}\",\n  \"surveyFrom\": \"2020-02-01T00:00:00Z\",\n  \"surveyTo\": \"2020-02-01T00:00:00Z\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": [
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user has access to org edit perms",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"organisation\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												},
												{
													"name": "When the update org call fails internally",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Remove a survey (soft delete)",
									"item": [
										{
											"name": "Remove survey - wrong orgUuid",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"pm.test(\"Response body status is : 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"var errorMessage = \"Resource Not Found\";\r",
															"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"type": "string",
															"value": "687678"
														},
														{
															"key": "siteUuid",
															"type": "string",
															"value": "{{siteUuid}}"
														},
														{
															"description": "(Required) ",
															"key": "surveyUuid",
															"type": "string",
															"value": "{{surveyUuid}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Remove survey - wrong siteUuid",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"pm.test(\"Response body status is : 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"var errorMessage = \"Resource Not Found\";\r",
															"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"type": "string",
															"value": "{{orgUuid}}"
														},
														{
															"key": "siteUuid",
															"type": "string",
															"value": "uioidhaksjhc"
														},
														{
															"description": "(Required) ",
															"key": "surveyUuid",
															"type": "string",
															"value": "{{surveyUuid}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Remove survey - wrong surveyUuid",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"pm.test(\"Response body status is : 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"var errorMessage = \"Resource Not Found\";\r",
															"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"type": "string",
															"value": "{{orgUuid}}"
														},
														{
															"key": "siteUuid",
															"type": "string",
															"value": "{{siteUuid}}"
														},
														{
															"description": "(Required) ",
															"key": "surveyUuid",
															"type": "string",
															"value": "kjashkdhasjf"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Remove a survey (soft delete)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Response body status is : 'success'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
															"});\r",
															"pm.test(\"Response body has message : 'Deleted Project'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(\"Deleted Survey\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Remove survey - Duplicate request",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"pm.test(\"Response body status is : 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"var errorMessage = \"Resource Not Found\";\r",
															"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string",
															"description": "(Required) "
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Remove survey - Invalid accept header",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 406\", function () {\r",
															"    pm.response.to.have.status(406);\r",
															"});\r",
															"var message = \"Could not satisfy the request Accept header.\";\r",
															"pm.test(\"Response body message is '\"+message+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(message);\r",
															"});\r",
															"pm.test(\"Response body status is 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Acceptable\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/rss+xml",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string",
															"description": "(Required) "
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Remove survey - Invalid auth token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 401\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"pm.test(\"Status code name has Unauthorized\", function () {\r",
															"    pm.response.to.have.status(\"Unauthorized\");\r",
															"});\r",
															"pm.test(\"response body status value is 'forbidden'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"forbidden\");\r",
															"});\r",
															"var errMessage = \"Log in to do this action\";\r",
															"pm.test(\"response body message is '\"+errMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errMessage);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1qTkZRVUkyT1RRM01qTXpOa1l4TmpCQ04wSTVNa0kxUmpFNVFVSkVOelkzTnpnNFJqTXpRZyJ9.eyJodHRwczovL2V4YW1wbGUuY29tL3JvbGVzIjpbInVzZXIiXSwiaHR0cHM6Ly9kamFuZ28td2ViYXBwL3JvbGUiOiJ1c2VyIiwibmlja25hbWUiOiJwYW5rYWouZGV2cmFuaSIsIm5hbWUiOiJwYW5rYWouZGV2cmFuaUBhc3RlcmlhLmNvLmluIiwicGljdHVyZSI6Imh0dHBzOi8vcy5ncmF2YXRhci5jb20vYXZhdGFyLzRjN2YzYzM0OWNkYzkzZmMxODVmMTMzMThhZjIzMjcxP3M9NDgwJnI9cGcmZD1odHRwcyUzQSUyRiUyRmNkbi5hdXRoMC5jb20lMkZhdmF0YXJzJTJGcGEucG5nIiwidXBkYXRlZF9hdCI6IjIwMjAtMDYtMTJUMDc6Mzc6MzkuMDE0WiIsImlzcyI6Imh0dHBzOi8vaW5zaWdodDEuYXV0aDAuY29tLyIsInN1YiI6ImF1dGgwfDVlYzdiMTBjZTZmNGUwMGJmMjAzNzZjMyIsImF1ZCI6IlNzTENHTmdnMHlBN0I3c0g1ZU5WTUZtQ1A5SlZkZGUzIiwiaWF0IjoxNTkyMjAxNzc2LCJleHAiOjE1OTIyMzc3NzZ9.NfOcvlsmhi6na-fut67v3PCOhku1EFYM9SvUCaqhSrM4D5ItQS9d-4Z_H8n3x5nc6r4rvTG09Pn3Gk-sDdf1137QmSdgzC-HfYYVEmR5xbiLYHPmZZnxL9ItjKNBYYbY9VBWzSpT434Vzz7DnjiJkyos3mDrLMACjDLQQ-6jCVplDXkOh0NHzQBWy6traQhkKkLceeZ3sa9Bc4PjQt18jzS5a50VHjitaczIZje7ILPeKtG0T3sNIrISyl5HZUK_KXmyzTMKw_9I9zAExkT9GGMBwqxfC6XpQ57wIvBZJN-i4uVNSd3Qjtw1yrCpz-vPMvIk7sbODtEAATtPwwapww",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string",
															"description": "(Required) "
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Create survey for other requests",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"surveyName\",\"surveyName\"+Math.floor((Math.random() * 10000000000) + 1));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Response body status is : 'success'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
															"});\r",
															"pm.test(\"Response Body message is 'Survey Created'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(\"Survey Created\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\")  ;\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response body survey name is equal to : '\"+pm.environment.get(\"surveyName\")+\"'\", function () {\r",
															"    pm.expect(pm.response.json().data.survey.name).to.eql(pm.environment.get(\"surveyName\"));\r",
															"});\r",
															"pm.test(\"Response body should have site uuid as expected.\", function () {\r",
															"    pm.expect(pm.response.json().data.survey.siteUuid).to.eql(pm.environment.get(\"siteUuid\"));\r",
															"});\r",
															"pm.environment.set(\"surveyUuid\", pm.response.json().data.survey.uuid);\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"{{surveyName}}\",\n    \"description\": \"Survey description\",\n    \"surveyFrom\": \"2020-02-01T00:00:00Z\",\n    \"surveyTo\": \"2020-02-01T00:00:00Z\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string",
															"description": "(Required) "
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Annotation",
					"item": [
						{
							"name": "A user's API to create an annotation(with sufficient perms)",
							"item": [
								{
									"name": "A user's API to create a Point annotation(with sufficient perms)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"annotationName\",\"annotationNamePoint\"+Math.floor((Math.random() * 10000000000) + 1));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response body status is : 'success'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
													"});\r",
													"pm.test(\"Response Body message is 'Survey Created'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(\"Annotation Created\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\")  ;\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response body annotation name is equal to : '\"+pm.environment.get(\"annotationName\")+\"'\", function () {\r",
													"    pm.expect(pm.response.json().data.annotation.name).to.eql(pm.environment.get(\"annotationName\"));\r",
													"});\r",
													"pm.test(\"Response body should have organisation uuid as expected.\", function () {\r",
													"    pm.expect(pm.response.json().data.annotation.refUuid.organisationUuid).to.eql(pm.environment.get(\"orgUuid\"));\r",
													"});\r",
													"pm.test(\"Response body should have site uuid as expected.\", function () {\r",
													"    pm.expect(pm.response.json().data.annotation.refUuid.siteUuid).to.eql(pm.environment.get(\"siteUuid\"));\r",
													"});\r",
													"pm.test(\"Response body should have survey uuid as expected.\", function () {\r",
													"    pm.expect(pm.response.json().data.annotation.refUuid.surveyUuid).to.eql(pm.environment.get(\"surveyUuid\"));\r",
													"});\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"status\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"message\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"data\": {\r",
													"      \"type\": \"object\",\r",
													"      \"properties\": {\r",
													"        \"annotation\": {\r",
													"          \"type\": \"object\",\r",
													"          \"properties\": {\r",
													"            \"createdAt\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"updatedAt\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"createdBy\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"name\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"refUuid\": {\r",
													"              \"type\": \"object\",\r",
													"              \"properties\": {\r",
													"                \"organisationUuid\": {\r",
													"                  \"type\": \"string\"\r",
													"                },\r",
													"                \"siteUuid\": {\r",
													"                  \"type\": \"string\"\r",
													"                },\r",
													"                \"surveyUuid\": {\r",
													"                  \"type\": \"string\"\r",
													"                }\r",
													"              },\r",
													"              \"additionalProperties\": false,\r",
													"              \"required\": [\r",
													"                \"organisationUuid\",\r",
													"                \"siteUuid\",\r",
													"                \"surveyUuid\"\r",
													"              ]\r",
													"            },\r",
													"            \"geojson\": {\r",
													"              \"type\": \"object\",\r",
													"              \"properties\": {\r",
													"                \"type\": {\r",
													"                  \"type\": \"string\"\r",
													"                },\r",
													"                \"properties\": {\r",
													"                  \"type\": \"object\",\r",
													"                  \"additionalProperties\": false\r",
													"                },\r",
													"                \"geometry\": {\r",
													"                  \"type\": \"object\",\r",
													"                  \"properties\": {\r",
													"                    \"type\": {\r",
													"                      \"type\": \"string\"\r",
													"                    },\r",
													"                    \"coordinates\": {\r",
													"                      \"type\": \"array\",\r",
													"                      \"items\": [\r",
													"                        {\r",
													"                          \"type\": \"array\",\r",
													"                          \"items\": [\r",
													"                            {\r",
													"                              \"type\": \"number\"\r",
													"                            },\r",
													"                            {\r",
													"                              \"type\": \"number\"\r",
													"                            }\r",
													"                          ]\r",
													"                        },\r",
													"                        {\r",
													"                          \"type\": \"array\",\r",
													"                          \"items\": [\r",
													"                            {\r",
													"                              \"type\": \"number\"\r",
													"                            },\r",
													"                            {\r",
													"                              \"type\": \"number\"\r",
													"                            }\r",
													"                          ]\r",
													"                        }\r",
													"                      ]\r",
													"                    }\r",
													"                  },\r",
													"                  \"additionalProperties\": false,\r",
													"                  \"required\": [\r",
													"                    \"type\",\r",
													"                    \"coordinates\"\r",
													"                  ]\r",
													"                }\r",
													"              },\r",
													"              \"additionalProperties\": false,\r",
													"              \"required\": [\r",
													"                \"type\",\r",
													"                \"properties\",\r",
													"                \"geometry\"\r",
													"              ]\r",
													"            },\r",
													"            \"uuid\": {\r",
													"              \"type\": \"string\"\r",
													"            }\r",
													"          },\r",
													"          \"additionalProperties\": false,\r",
													"          \"required\": [\r",
													"            \"createdAt\",\r",
													"            \"updatedAt\",\r",
													"            \"createdBy\",\r",
													"            \"name\",\r",
													"            \"refUuid\",\r",
													"            \"geojson\",\r",
													"            \"uuid\"\r",
													"          ]\r",
													"        }\r",
													"      },\r",
													"      \"additionalProperties\": false,\r",
													"      \"required\": [\r",
													"        \"annotation\"\r",
													"      ]\r",
													"    }\r",
													"  },\r",
													"  \"additionalProperties\": false,\r",
													"  \"required\": [\r",
													"    \"status\",\r",
													"    \"message\",\r",
													"    \"data\"\r",
													"  ]\r",
													"};\r",
													"if(pm.expect(pm.response.json().status).to.eql(\"success\")){\r",
													"pm.environment.set(\"annotationUuid\", pm.response.json().data.annotation.uuid);\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"name\": \"{{annotationName}}\",\n \"geojson\": {\n  \"type\": \"Feature\",\n  \"geometry\": {\n   \"type\": \"Point\",\n   \"coordinates\": [\n    56.850533903,\n    46.91059555\n   ]\n  },\n  \"properties\": {}\n }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/annotations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"annotations"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												},
												{
													"key": "surveyUuid",
													"value": "{{surveyUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "A user's API to create a Line annotation(with sufficient perms)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"annotationNameLine\",\"annotationNameLine\"+Math.floor((Math.random() * 10000000000) + 1));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response body status is : 'success'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
													"});\r",
													"pm.test(\"Response Body message is 'Survey Created'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(\"Annotation Created\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\")  ;\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response body annotation name is equal to : '\"+pm.environment.get(\"annotationName\")+\"'\", function () {\r",
													"    pm.expect(pm.response.json().data.annotation.name).to.eql(pm.environment.get(\"annotationNameLine\"));\r",
													"});\r",
													"pm.test(\"Response body should have organisation uuid as expected.\", function () {\r",
													"    pm.expect(pm.response.json().data.annotation.refUuid.organisationUuid).to.eql(pm.environment.get(\"orgUuid\"));\r",
													"});\r",
													"pm.test(\"Response body should have site uuid as expected.\", function () {\r",
													"    pm.expect(pm.response.json().data.annotation.refUuid.siteUuid).to.eql(pm.environment.get(\"siteUuid\"));\r",
													"});\r",
													"pm.test(\"Response body should have survey uuid as expected.\", function () {\r",
													"    pm.expect(pm.response.json().data.annotation.refUuid.surveyUuid).to.eql(pm.environment.get(\"surveyUuid\"));\r",
													"});\r",
													"if(pm.expect(pm.response.json().status).to.eql(\"success\")){\r",
													"pm.environment.set(\"annotationUuidLine\", pm.response.json().data.annotation.uuid);\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"name\": \"{{annotationNameLine}}\",\n \"geojson\": {\n  \"type\": \"Feature\",\n  \"geometry\": {\n   \"type\": \"LineString\",\n   \"coordinates\": [\n    [\n        8.850533903,\n        20.91059555\n    ],\n    [\n        2,\n        2\n    ]\n   ]\n  },\n  \"properties\": {}\n }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/annotations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"annotations"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												},
												{
													"key": "surveyUuid",
													"value": "{{surveyUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove Line annotation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response body status is : 'success'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
													"});\r",
													"pm.test(\"Response body has message : 'Deleted Annotation'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(\"Deleted Annotation\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/annotations/:annotationUuid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"annotations",
												":annotationUuid"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												},
												{
													"key": "surveyUuid",
													"value": "{{surveyUuid}}",
													"type": "string"
												},
												{
													"key": "annotationUuid",
													"value": "{{annotationUuidLine}}",
													"type": "string"
												}
											]
										},
										"description": "This is an api reuqest to delete an annotation."
									},
									"response": []
								},
								{
									"name": "A user's API to create a Polygon annotation(with sufficient perms) Copy",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"annotationNamePolygon\",\"annotationNamePolygon\"+Math.floor((Math.random() * 10000000000) + 1));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response body status is : 'success'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
													"});\r",
													"pm.test(\"Response Body message is 'Survey Created'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(\"Annotation Created\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\")  ;\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response body annotation name is equal to : '\"+pm.environment.get(\"annotationName\")+\"'\", function () {\r",
													"    pm.expect(pm.response.json().data.annotation.name).to.eql(pm.environment.get(\"annotationNamePolygon\"));\r",
													"});\r",
													"pm.test(\"Response body should have organisation uuid as expected.\", function () {\r",
													"    pm.expect(pm.response.json().data.annotation.refUuid.organisationUuid).to.eql(pm.environment.get(\"orgUuid\"));\r",
													"});\r",
													"pm.test(\"Response body should have site uuid as expected.\", function () {\r",
													"    pm.expect(pm.response.json().data.annotation.refUuid.siteUuid).to.eql(pm.environment.get(\"siteUuid\"));\r",
													"});\r",
													"pm.test(\"Response body should have survey uuid as expected.\", function () {\r",
													"    pm.expect(pm.response.json().data.annotation.refUuid.surveyUuid).to.eql(pm.environment.get(\"surveyUuid\"));\r",
													"});\r",
													"if(pm.expect(pm.response.json().status).to.eql(\"success\")){\r",
													"pm.environment.set(\"annotationUuidPolygon\", pm.response.json().data.annotation.uuid);\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"name\": \"{{annotationNamePolygon}}\",\n \"geojson\": {\n  \"type\": \"Feature\",\n  \"geometry\": {\n   \"type\": \"Polygon\",\n   \"coordinates\": [\n          [\n            [\n              67.5,\n              63.23362741232569\n            ],\n            [\n              56.25,\n              54.97761367069628\n            ],\n            [\n              79.1015625,\n              55.178867663281984\n            ],\n            [\n              67.5,\n              63.23362741232569\n            ]\n          ]\n        ]\n  },\n  \"properties\": {}\n }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/annotations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"annotations"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												},
												{
													"key": "surveyUuid",
													"value": "{{surveyUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove Polygon annotation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response body status is : 'success'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
													"});\r",
													"pm.test(\"Response body has message : 'Deleted Annotation'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(\"Deleted Annotation\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/annotations/:annotationUuid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"annotations",
												":annotationUuid"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												},
												{
													"key": "surveyUuid",
													"value": "{{surveyUuid}}",
													"type": "string"
												},
												{
													"key": "annotationUuid",
													"value": "{{annotationUuidPolygon}}",
													"type": "string"
												}
											]
										},
										"description": "This is an api reuqest to delete an annotation."
									},
									"response": []
								},
								{
									"name": "Create annotation - Create duplicate record",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response body status is : 'success'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
													"});\r",
													"pm.test(\"Response Body message is 'Annotation Created'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(\"Annotation Created\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\")  ;\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response body annotation name is equal to : '\"+pm.environment.get(\"annotationName\")+\"'\", function () {\r",
													"    pm.expect(pm.response.json().data.annotation.name).to.eql(pm.environment.get(\"annotationName\"));\r",
													"});\r",
													"pm.test(\"Response body should have organisation uuid as expected.\", function () {\r",
													"    pm.expect(pm.response.json().data.annotation.refUuid.organisationUuid).to.eql(pm.environment.get(\"orgUuid\"));\r",
													"});\r",
													"pm.test(\"Response body should have site uuid as expected.\", function () {\r",
													"    pm.expect(pm.response.json().data.annotation.refUuid.siteUuid).to.eql(pm.environment.get(\"siteUuid\"));\r",
													"});\r",
													"pm.test(\"Response body should have survey uuid as expected.\", function () {\r",
													"    pm.expect(pm.response.json().data.annotation.refUuid.surveyUuid).to.eql(pm.environment.get(\"surveyUuid\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"name\": \"{{annotationName}}\",\n \"geojson\": {\n  \"type\": \"Feature\",\n  \"geometry\": {\n   \"type\": \"LineString\",\n   \"coordinates\": [\n    [68.850533903,\n    21.91059555],\n    [18.850533903,\n    28.91059555]\n   ]\n  },\n  \"properties\": {}\n }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/annotations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"annotations"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												},
												{
													"key": "surveyUuid",
													"value": "{{surveyUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create annotation - Wrong orgUuid",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"pm.test(\"Response body has status as 'failure'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"var errorMessage = \"Resource Not Found\";\r",
													"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"name\": \"{{annotationName}}\",\n \"geojson\": {\n  \"type\": \"Feature\",\n  \"geometry\": {\n   \"type\": \"LineString\",\n   \"coordinates\": [\n    [6426718.850533903,\n    21610080.91059555],\n    [6426718.850533903,\n    21610080.91059555]\n   ]\n  },\n  \"properties\": {}\n }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/annotations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"annotations"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"type": "string",
													"value": "kajshdkaj"
												},
												{
													"key": "siteUuid",
													"type": "string",
													"value": "{{siteUuid}}"
												},
												{
													"key": "surveyUuid",
													"type": "string",
													"value": "{{surveyUuid}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create annotation - Wrong siteUuid",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"pm.test(\"Response body has status as 'failure'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"var errorMessage = \"Resource Not Found\";\r",
													"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"name\": \"{{annotationName}}\",\n \"geojson\": {\n  \"type\": \"Feature\",\n  \"geometry\": {\n   \"type\": \"LineString\",\n   \"coordinates\": [\n    [6426718.850533903,\n    21610080.91059555],\n    [6426718.850533903,\n    21610080.91059555]\n   ]\n  },\n  \"properties\": {}\n }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/annotations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"annotations"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"type": "string",
													"value": "{{orgUuid}}"
												},
												{
													"key": "siteUuid",
													"type": "string",
													"value": "asdn,and,a"
												},
												{
													"key": "surveyUuid",
													"type": "string",
													"value": "{{surveyUuid}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create annotation - Wrong surveyUuid",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"pm.test(\"Response body has status as 'failure'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"var errorMessage = \"Resource Not Found\";\r",
													"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"name\": \"{{annotationName}}\",\n \"geojson\": {\n  \"type\": \"Feature\",\n  \"geometry\": {\n   \"type\": \"LineString\",\n   \"coordinates\": [\n    [6426718.850533903,\n    21610080.91059555],\n    [6426718.850533903,\n    21610080.91059555]\n   ]\n  },\n  \"properties\": {}\n }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/annotations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"annotations"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"type": "string",
													"value": "{{orgUuid}}"
												},
												{
													"key": "siteUuid",
													"type": "string",
													"value": "{{siteUuid}}"
												},
												{
													"key": "surveyUuid",
													"type": "string",
													"value": "jans,mdad ba"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create annotation - wrong lat",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Response body status is 'failure'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Response body message is 'Validation Error'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(\"Validation Error\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\")  ;\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"var errorMessage = \"Incorrect lat value\";\r",
													"pm.test(\"Response body validation error message is '\"+errorMessage+\"' \", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.validation_errors.geojson[0][0].geometry[0]).to.eql(errorMessage);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"name\": \"{{annotationName}}\",\n \"geojson\": {\n  \"type\": \"Feature\",\n  \"geometry\": {\n   \"type\": \"LineString\",\n   \"coordinates\": [\n    [-91.0000000000001,\n    180\n    ],\n    [90,\n    -181\n   ]\n   ]\n  },\n  \"properties\": {}\n }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/annotations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"annotations"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"type": "string",
													"value": "{{orgUuid}}"
												},
												{
													"key": "siteUuid",
													"type": "string",
													"value": "{{siteUuid}}"
												},
												{
													"key": "surveyUuid",
													"type": "string",
													"value": "{{surveyUuid}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create annotation - wrong lng",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Response body status is 'failure'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Response body message is 'Validation Error'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(\"Validation Error\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\")  ;\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"var errorMessage = \"Incorrect lng value\";\r",
													"pm.test(\"Response body validation error message is '\"+errorMessage+\"' \", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.validation_errors.geojson[0][0].geometry[0]).to.eql(errorMessage);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"name\": \"{{annotationName}}\",\n \"geojson\": {\n  \"type\": \"Feature\",\n  \"geometry\": {\n   \"type\": \"LineString\",\n   \"coordinates\": [\n    [-90,\n    180.0000000000001\n    ],\n    [90,\n    -180\n   ]\n   ]\n  },\n  \"properties\": {}\n }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/annotations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"annotations"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"type": "string",
													"value": "{{orgUuid}}"
												},
												{
													"key": "siteUuid",
													"type": "string",
													"value": "{{siteUuid}}"
												},
												{
													"key": "surveyUuid",
													"type": "string",
													"value": "{{surveyUuid}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create annotation - More than 50 char name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Response body status is 'failure'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Response body message is 'Validation Error'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(\"Validation Error\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\")  ;\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"var errMessage = \"Ensure this field has no more than 50 characters.\";\r",
													"pm.test(\"Response body validation error message is '\"+errMessage+\"' \", function () {\r",
													"    pm.expect(pm.response.json().validation_errors.name[0][0]).to.eql(errMessage);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"name\": \"{{annotationName}}- Delete It demoajwhkdgajskgdjasgbjasbdjasbdagdiuoawlhbdkjbaksjbajhdaskjbkjasbfkabsfhaskjfhajksbfkjahvioushilkfkbsfm,bmdbvdzmbvmddnbavkjsabvlabkvjbskvhskalvh,smbvkjhiUHIUWHFKH28957438276I3U4Y68376829TYGIUWHEIUHG3Y8976IHKASKLJFHKWVJKBSAJVKHBWYGVUKWGHJWBMHBSJBKYUWgfyuwgsite\",\n \"geojson\": {\n  \"type\": \"Feature\",\n  \"geometry\": {\n   \"type\": \"Point\",\n   \"coordinates\": [\n    6426718.850533903,\n    21610080.91059555\n   ]\n  },\n  \"properties\": {}\n }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/annotations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"annotations"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												},
												{
													"key": "surveyUuid",
													"value": "{{surveyUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": [
										{
											"name": "When the create site call fails internally",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid",
														"site"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "User is not logged in",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid",
														"site"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Successful only when a user with sufficient permissions calls the API",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid",
														"site"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"site\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"organisationUuid\": \"<string>\",\n   \"location\": \"<string>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
										}
									]
								},
								{
									"name": "Create annotation - Without request body",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Response body status is 'failure'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Response body message is 'Validation Error'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(\"Validation Error\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\")  ;\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"var errorMessage = \"field is required.\";\r",
													"pm.test(\"Response body validation error message for annotation name as '\"+errorMessage+\"' \", function () {\r",
													"    pm.expect(pm.response.json().validation_errors.name[0][0]).to.eql(errorMessage);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body validation error message for annotation geojson as '\"+errorMessage+\"' \", function () {\r",
													"    pm.expect(pm.response.json().validation_errors.geojson[0][0]).to.eql(errorMessage);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/annotations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"annotations"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												},
												{
													"key": "surveyUuid",
													"value": "{{surveyUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create annotation - Invalid request body json",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Response body status is 'failure'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\")  ;\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"var errorMessage = \"JSON parse error\";\r",
													"pm.test(\"Response body validation error message is '\"+errorMessage+\"' \", function () {\r",
													"    pm.expect(pm.response.json().message).to.contain(errorMessage);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n \"name\": \"{{annotationName}}\"\r\n \"geojson\": {\r\n  \"type\": \"Feature\",\r\n  \"geometry\": {\r\n   \"type\": \"Point\",\r\n   \"coordinates\": [\r\n    6426718.850533903,\r\n    21610080.91059555\r\n   ]\r\n  },\r\n  \"properties\": {}\r\n }\r\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/annotations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"annotations"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												},
												{
													"key": "surveyUuid",
													"value": "{{surveyUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create annotation - Support alph numaric and special character",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response body status is 'success'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"});\r",
													"pm.test(\"Response body message is 'Annotation Created'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(\"Annotation Created\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\")  ;\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"The survey has site Uuid as expected\", function () {\r",
													"    pm.expect( pm.response.json().data.annotation.refUuid.siteUuid).to.eql(pm.environment.get(\"siteUuid\"));\r",
													"});\r",
													"if(pm.expect(pm.response.json().status).to.eql(\"success\")){\r",
													"pm.environment.set(\"annotationUuidDelete\", pm.response.json().data.annotation.uuid);\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"name\": \"Annotation-!@#$%^&*()+{}|][\\\\':;?\",\n \"geojson\": {\n  \"type\": \"Feature\",\n  \"geometry\": {\n   \"type\": \"Point\",\n   \"coordinates\": [\n    6.850533903,\n    6.91059555\n   ]\n  },\n  \"properties\": {}\n }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/annotations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"annotations"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												},
												{
													"key": "surveyUuid",
													"value": "{{surveyUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": [
										{
											"name": "When the create site call fails internally",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid",
														"site"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "User is not logged in",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid",
														"site"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Successful only when a user with sufficient permissions calls the API",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid",
														"site"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"site\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"organisationUuid\": \"<string>\",\n   \"location\": \"<string>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
										}
									]
								},
								{
									"name": "Remove alph numaric and special char annotation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response body status is : 'success'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
													"});\r",
													"pm.test(\"Response body has message : 'Deleted Annotation'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(\"Deleted Annotation\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/annotations/:annotationUuid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"annotations",
												":annotationUuid"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												},
												{
													"key": "surveyUuid",
													"value": "{{surveyUuid}}",
													"type": "string"
												},
												{
													"key": "annotationUuid",
													"value": "{{annotationUuidDelete}}",
													"type": "string"
												}
											]
										},
										"description": "This is an api reuqest to delete an annotation."
									},
									"response": []
								},
								{
									"name": "Create annotation - Name and geojson property null",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Response body status is 'failure'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Response body message is 'Validation Error'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\")  ;\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"var errorMessage = \"field is required.\";\r",
													"pm.test(\"Response body validation error message for name is '\"+errorMessage+\"' \", function () {\r",
													"    pm.expect(pm.response.json().validation_errors.name[0][0]).to.eql(errorMessage);\r",
													"});\r",
													"pm.test(\"Response body validation error message for surveyTo is '\"+errorMessage+\"' \", function () {\r",
													"    pm.expect(pm.response.json().validation_errors.geojson[0][0]).to.eql(errorMessage);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": null,\r\n \"geojson\": null\r\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/annotations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"annotations"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												},
												{
													"key": "surveyUuid",
													"value": "{{surveyUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create annotation - Geojson type and geometry property null",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Response body status is 'failure'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Response body message is 'Validation Error'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\")  ;\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"var errorTypeMessage = \"must not be blank (was: None)\";\r",
													"pm.test(\"Response body validation error message for geojson type is '\"+errorTypeMessage+\"' \", function () {\r",
													"    pm.expect(pm.response.json().validation_errors.geojson[0][0].type[0]).to.eql(errorTypeMessage);\r",
													"});\r",
													"var errorGeometryMessage = \"provided type is not supported\";\r",
													"pm.test(\"Response body validation error message for geometry is '\"+errorGeometryMessage+\"' \", function () {\r",
													"    pm.expect( pm.response.json().validation_errors.geojson[0][0].geometry[0]).to.eql(errorGeometryMessage);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{annotationName}}\",\r\n \"geojson\": {\r\n  \"type\": null,\r\n  \"geometry\": {\r\n   \"type\": null,\r\n   \"coordinates\": [\r\n    85.850533903,\r\n    24.910595551\r\n   ]\r\n  },\r\n  \"properties\": {}\r\n }\r\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/annotations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"annotations"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												},
												{
													"key": "surveyUuid",
													"value": "{{surveyUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create annotation - Coordinates null",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Response body status is 'failure'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Response body message is 'Validation Error'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\")  ;\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"var errorGeometryMessage = \"Coordinates must be one of ('list', 'tuple'), not None\";\r",
													"pm.test(\"Response body validation error message for geometry is '\"+errorGeometryMessage+\"' \", function () {\r",
													"    pm.expect( pm.response.json().validation_errors.geojson[0][0].geometry[0]).to.eql(errorGeometryMessage);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{annotationName}}\",\r\n \"geojson\": {\r\n  \"type\": \"Feature\",\r\n  \"geometry\": {\r\n   \"type\": \"Point\",\r\n   \"coordinates\": null\r\n  },\r\n  \"properties\": {}\r\n }\r\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/annotations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"annotations"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												},
												{
													"key": "surveyUuid",
													"value": "{{surveyUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create annotation - Coordinates value null",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Response body status is 'failure'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Response body message is 'Validation Error'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\")  ;\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"var errorGeometryMessage = \"coordinate value must be one of ('float', 'int'), not None\";\r",
													"pm.test(\"Response body validation error message for geometry is '\"+errorGeometryMessage+\"' \", function () {\r",
													"    pm.expect( pm.response.json().validation_errors.geojson[0][0].geometry[0]).to.eql(errorGeometryMessage);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{annotationName}}\",\r\n \"geojson\": {\r\n  \"type\": \"Feature\",\r\n  \"geometry\": {\r\n   \"type\": \"Point\",\r\n   \"coordinates\": [\r\n    null,\r\n    null\r\n   ]\r\n  },\r\n  \"properties\": {}\r\n }\r\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/annotations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"annotations"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												},
												{
													"key": "surveyUuid",
													"value": "{{surveyUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create annotation -  Invalid content-type header",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 415\", function () {\r",
													"    pm.response.to.have.status(415);\r",
													"});\r",
													"pm.test(\"Response Body has status as 'failure'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Response Body has message as 'Unsupported media type'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.contain(\"Unsupported media type\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Unsupported Media Type\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/pdf"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"name\": \"{{annotationName}}\",\n \"geojson\": {\n  \"type\": \"Feature\",\n  \"geometry\": {\n   \"type\": \"Point\",\n   \"coordinates\": [\n    6426718.850533903,\n    21610080.91059555\n   ]\n  },\n  \"properties\": {}\n }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/annotations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"annotations"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												},
												{
													"key": "surveyUuid",
													"value": "{{surveyUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create annotation -  Invalid accept header",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 406\", function () {\r",
													"    pm.response.to.have.status(406);\r",
													"});\r",
													"var message = \"Could not satisfy the request Accept header.\";\r",
													"pm.test(\"Response body message is '\"+message+\"'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(message);\r",
													"});\r",
													"pm.test(\"Response body status is 'failure'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Not Acceptable\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/font-woff"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"name\": \"{{annotationName}}\",\n \"geojson\": {\n  \"type\": \"Feature\",\n  \"geometry\": {\n   \"type\": \"Point\",\n   \"coordinates\": [\n    6426718.850533903,\n    21610080.91059555\n   ]\n  },\n  \"properties\": {}\n }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/annotations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"annotations"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												},
												{
													"key": "surveyUuid",
													"value": "{{surveyUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create annotation - Invalid auth token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"pm.test(\"Status code name has Unauthorized\", function () {\r",
													"    pm.response.to.have.status(\"Unauthorized\");\r",
													"});\r",
													"pm.test(\"response body status value is 'forbidden'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"forbidden\");\r",
													"});\r",
													"var errMessage = \"Log in to do this action\";\r",
													"pm.test(\"response body message is '\"+errMessage+\"'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(errMessage);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJSUzIwwiIsInR5cCI6IkpXVCIsImtpZCI6Ik1qTkZRVUkyT1RRM01qTXpOa1l4TmpCQ04wSTVNa0kxUmpFNVFVSkVOelkzTnpnNFJqTXpRZyJ9.eyJodHRwczovL2V4YW1wbGUuY29tL3JvbGVzIjpbInVzZXIiXSwiaHR0cHM6Ly9kamFuZ28td2ViYXBwL3JvbGUiOiJ1c2VyIiwibmlja25hbWUiOiJwYW5rYWouZGV2cmFuaSIsIm5hbWUiOiJwYW5rYWouZGV2cmFuaUBhc3RlcmlhLmNvLmluIiwicGljdHVyZSI6Imh0dHBzOi8vcy5ncmF2YXRhci5jb20vYXZhdGFyLzRjN2YzYzM0OWNkYzkzZmMxODVmMTMzMThhZjIzMjcxP3M9NDgwJnI9cGcmZD1odHRwcyUzQSUyRiUyRmNkbi5hdXRoMC5jb20lMkZhdmF0YXJzJTJGcGEucG5nIiwidXBkYXRlZF9hdCI6IjIwMjAtMDYtMTJUMDc6Mzc6MzkuMDE0WiIsImlzcyI6Imh0dHBzOi8vaW5zaWdodDEuYXV0aDAuY29tLyIsInN1YiI6ImF1dGgwfDVlYzdiMTBjZTZmNGUwMGJmMjAzNzZjMyIsImF1ZCI6IlNzTENHTmdnMHlBN0I3c0g1ZU5WTUZtQ1A5SlZkZGUzIiwiaWF0IjoxNTkyMjAxNzc2LCJleHAiOjE1OTIyMzc3NzZ9.NfOcvlsmhi6na-fut67v3PCOhku1wwYM9SvUCaqhSrM4D5ItQS9d-4Z_H8n3x5nc6r4rvTG09Pn3Gk-sDdf1137QmSdgzC-HfYYVEmR5xbiLYHPmZZnxL9ItjKNBYYbY9VBWzSpT434Vzz7DnjiJkyos3mDrLMACjDLQQ-6jCVplDXkOh0NHzQBWy6traQhkKkLceeZ3sa9Bc4PjQt18jzS5a50VHjitaczIZje7ILPeKtG0T3sNIrISyl5HZUK_KXmyzTMKw_9I9zAExkT9GGMBwqxfC6XpQ57wIvBZJN-i4uVNSd3Qjtw1yrCpz-vPMvIk7sbODtEAATtPwwapww",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"name\": \"{{annotationName}}\",\n \"geojson\": {\n  \"type\": \"Feature\",\n  \"geometry\": {\n   \"type\": \"Point\",\n   \"coordinates\": [\n    6426718.850533903,\n    21610080.91059555\n   ]\n  },\n  \"properties\": {}\n }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/annotations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"annotations"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												},
												{
													"key": "surveyUuid",
													"value": "{{surveyUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": [
										{
											"name": "When the create site call fails internally",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid",
														"site"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Successful only when a user with sufficient permissions calls the API",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid",
														"site"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"site\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"organisationUuid\": \"<string>\",\n   \"location\": \"<string>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
										},
										{
											"name": "User is not logged in",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid",
														"site"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Get all the annotations User has access to",
							"item": [
								{
									"name": "Get all the annotations User has access to",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Body matches string : 'success'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/annotations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"annotations"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												},
												{
													"key": "surveyUuid",
													"value": "{{surveyUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all annotation - with request body",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Body matches string : 'success'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n \"name\": \"{{annotationName}}\",\r\n \"geojson\": {\r\n  \"type\": \"Feature\",\r\n  \"geometry\": {\r\n   \"type\": \"Point\",\r\n   \"coordinates\": [\r\n    6426718.850533903,\r\n    21610080.91059555\r\n   ]\r\n  },\r\n  \"properties\": {}\r\n }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/annotations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"annotations"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												},
												{
													"key": "surveyUuid",
													"value": "{{surveyUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all annotation - wrong orgUuid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"pm.test(\"Response body has status as 'failure'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"var errorMessage = \"Resource Not Found\";\r",
													"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/annotations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"annotations"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "awdasda",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												},
												{
													"key": "surveyUuid",
													"value": "{{surveyUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all annotation - Wrong siteUuid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"pm.test(\"Response body has status as 'failure'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"var errorMessage = \"Resource Not Found\";\r",
													"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/annotations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"annotations"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "adsafafw",
													"type": "string"
												},
												{
													"key": "surveyUuid",
													"value": "{{surveyUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all annotation - Wrong surveyUuid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"pm.test(\"Response body has status as 'failure'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"var errorMessage = \"Resource Not Found\";\r",
													"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/annotations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"annotations"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												},
												{
													"key": "surveyUuid",
													"value": "asdaw",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all annotation - Invalid accept header",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 406\", function () {\r",
													"    pm.response.to.have.status(406);\r",
													"});\r",
													"var message = \"Could not satisfy the request Accept header.\";\r",
													"pm.test(\"Response body message is '\"+message+\"'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(message);\r",
													"});\r",
													"pm.test(\"Response body status is 'failure'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Not Acceptable\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/javascript",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/annotations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"annotations"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												},
												{
													"key": "surveyUuid",
													"value": "{{surveyUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all annotation - Invalid auth token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"pm.test(\"Status code name has Unauthorized\", function () {\r",
													"    pm.response.to.have.status(\"Unauthorized\");\r",
													"});\r",
													"pm.test(\"response body status value is 'forbidden'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"forbidden\");\r",
													"});\r",
													"var errMessage = \"Log in to do this action\";\r",
													"pm.test(\"response body message is '\"+errMessage+\"'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(errMessage);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1qTkZRVUkyT1RRM01qTXpOa1l4TmpCQ04wSTVNa0kxUmpFNVFVSkVOelkzTnpnNFJqTXpRZyJ9.eyJodHRwczovL2V4YW1wbGUuY29tL3JvbGVzIjpbInVzZXIiXSwiaHR0cHM6Ly9kamFuZ28td2ViYXBwL3JvbGUiOiJ1c2VyIiwibmlja25hbWUiOiJwYW5rYWouZGV2cmFuaSIsIm5hbWUiOiJwYW5rYWouZGV2cmFuaUBhc3RlcmlhLmNvLmluIiwicGljdHVyZSI6Imh0dHBzOi8vcy5ncmF2YXRhci5jb20vYXZhdGFyLzRjN2YzYzM0OWNkYzkzZmMxODVmMTMzMThhZjIzMjcxP3M9NDgwJnI9cGcmZD1odHRwcyUzQSUyRiUyRmNkbi5hdXRoMC5jb20lMkZhdmF0YXJzJTJGcGEucG5nIiwidXBkYXRlZF9hdCI6IjIwMjAtMDYtMTBUMDc6Mzc6MjEuNDM4WiIsImlzcyI6Imh0dHBzOi8vaW5zaWdodDEuYXV0aDAuY29tLyIsInN1YiI6ImF1dGgwfDVlYzdiMTBjZTZmNGUwMGJmMjAzNzZjMyIsImF1ZCI6IlNzTENHTmdnMHlBN0I3c0g1ZU5WTUZtQ1A5SlZkZGUzIiwiaWF0IjoxNTkxODc4OTI1LCJleHAiOjE1OTE5MTQ5MjV9.b-FwIG8vG9rtPDVAhQjlf2tzV9nlq8RFqL1w264skuxsXR01b067gXzOAh5i0VXQ_J5WDMTV-DDkpeUZwE_m57Tl1jSJ_4n0dSWFd39_TI0jNiDQ23qt_OfmDTjEVf0b7GMj3hDk5Vwi0S7BumpE67jX2Pk1QayPXpfBGz2z3kC8qi1pXddWnCPB_E-LtZ6fwmbyOQ-HDSbkcdadBlqtRAPpNWx7APOf-6XbdDB6nF19s_BD1oKJNX2ieKqfV3Ggf2opGHtwrvusd2yFYnCbvdy9pnOTsB4SmrZUMDEArAmTTp5pXqx6UytJ1TQ2fqsBE6DEPCwYK_jLL7QLjFmsWR",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/annotations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"annotations"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												},
												{
													"key": "surveyUuid",
													"value": "{{surveyUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": [
										{
											"name": "Fired on the main/landing page",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisations",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisations"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"organisations\": [\n   {\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"permalink\": \"<string>\",\n    \"uuid\": \"<string>\",\n    \"metaData\": {\n     \"userRole\": {}\n    }\n   },\n   {\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"permalink\": \"<string>\",\n    \"uuid\": \"<string>\",\n    \"metaData\": {\n     \"userRole\": {}\n    }\n   }\n  ]\n }\n}"
										},
										{
											"name": "User is not logged in",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisations",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisations"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "annotation/{annotation Uuid}",
							"item": [
								{
									"name": "{annotation Uuid}",
									"item": [
										{
											"name": "Get details of an annotation User has access to",
											"item": [
												{
													"name": "Get details of an annotation User has access to",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Response body has tatus as 'success'\", function () {\r",
																	"    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
																	"});\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"});\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"Response body annotation name is equal to : '\"+pm.environment.get(\"annotaionName\")+\"'\", function () {\r",
																	"    pm.expect(pm.response.json().data.annotation.name).to.eql(pm.environment.get(\"annotationName\"));\r",
																	"});\r",
																	"pm.test(\"Response body should have annotation uuid as expected.\", function () {;\r",
																	"    pm.expect(pm.response.json().data.annotation.uuid).to.eql(pm.environment.get(\"annotationUuid\"));\r",
																	"});\r",
																	"pm.test(\"Response body should have survey uuid as expected.\", function () {;\r",
																	"    pm.expect(pm.response.json().data.annotation.refUuid.surveyUuid).to.eql(pm.environment.get(\"surveyUuid\"));\r",
																	"});\r",
																	"pm.test(\"Response body should have site uuid as expected.\", function () {;\r",
																	"    pm.expect(pm.response.json().data.annotation.refUuid.siteUuid).to.eql(pm.environment.get(\"siteUuid\"));\r",
																	"});\r",
																	"pm.test(\"Response body should have site uuid as expected.\", function () {;\r",
																	"    pm.expect(pm.response.json().data.annotation.refUuid.organisationUuid).to.eql(pm.environment.get(\"orgUuid\"));\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/annotations/:annotationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"organisations",
																":organisationUuid",
																"sites",
																":siteUuid",
																"surveys",
																":surveyUuid",
																"annotations",
																":annotationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid",
																	"value": "{{orgUuid}}",
																	"type": "string",
																	"description": "(Required) "
																},
																{
																	"key": "siteUuid",
																	"value": "{{siteUuid}}",
																	"type": "string",
																	"description": "(Required) "
																},
																{
																	"key": "surveyUuid",
																	"value": "{{surveyUuid}}",
																	"type": "string",
																	"description": "(Required) "
																},
																{
																	"key": "annotationUuid",
																	"value": "{{annotationUuid}}",
																	"type": "string"
																}
															]
														}
													},
													"response": [
														{
															"name": "When the get annotation details call fails internally",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/api/core/v1/organisation/:organisationUuid/site/:siteUuid/survey/:surveyUuid/annotation/:annotationUuid",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"core",
																		"v1",
																		"organisation",
																		":organisationUuid",
																		"site",
																		":siteUuid",
																		"survey",
																		":surveyUuid",
																		"annotation",
																		":annotationUuid"
																	],
																	"variable": [
																		{
																			"key": "organisationUuid"
																		},
																		{
																			"key": "siteUuid"
																		},
																		{
																			"key": "surveyUuid"
																		},
																		{
																			"key": "annotationUuid"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "User is not logged in",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/api/core/v1/organisation/:organisationUuid/site/:siteUuid/survey/:surveyUuid/annotation/:annotationUuid",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"core",
																		"v1",
																		"organisation",
																		":organisationUuid",
																		"site",
																		":siteUuid",
																		"survey",
																		":surveyUuid",
																		"annotation",
																		":annotationUuid"
																	],
																	"variable": [
																		{
																			"key": "organisationUuid"
																		},
																		{
																			"key": "siteUuid"
																		},
																		{
																			"key": "surveyUuid"
																		},
																		{
																			"key": "annotationUuid"
																		}
																	]
																}
															},
															"status": "Unauthorized",
															"code": 401,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "Successful only when a user has access to annotation",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/api/core/v1/organisation/:organisationUuid/site/:siteUuid/survey/:surveyUuid/annotation/:annotationUuid",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"core",
																		"v1",
																		"organisation",
																		":organisationUuid",
																		"site",
																		":siteUuid",
																		"survey",
																		":surveyUuid",
																		"annotation",
																		":annotationUuid"
																	],
																	"variable": [
																		{
																			"key": "organisationUuid"
																		},
																		{
																			"key": "siteUuid"
																		},
																		{
																			"key": "surveyUuid"
																		},
																		{
																			"key": "annotationUuid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"status\": \"queued\",\n \"message\": \"laboris sint\",\n \"data\": {\n  \"annotation\": {\n   \"name\": \"nostrud eu\",\n   \"refUuid\": {\n    \"organisationUuid\": \"velit in nostrud Excepteur\",\n    \"siteUuid\": \"Lorem fugiat mollit\",\n    \"surveyUuid\": \"irure elit ea\"\n   },\n   \"geojson\": {\n    \"type\": \"Feature\",\n    \"geometry\": {\n     \"type\": \"Point\",\n     \"coordinates\": [\n      -4283317.660607502,\n      -60014066.241007894\n     ]\n    },\n    \"properties\": \"<object>\"\n   },\n   \"permalink\": \"aliqua minim velit ut in\",\n   \"uuid\": \"incididunt sit\",\n   \"createdBy\": \"Ut Duis sit\",\n   \"createdAt\": -22587323.52630721,\n   \"updatedAt\": 89449165.98390305,\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
														}
													]
												},
												{
													"name": "Get annotation - with request body",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Response body has tatus as 'success'\", function () {\r",
																	"    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
																	"});\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"});\r",
																	"pm.test(\"Status code name has string OK\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"Response body annotation name is equal to : '\"+pm.environment.get(\"annotaionName\")+\"'\", function () {\r",
																	"    pm.expect(pm.response.json().data.annotation.name).to.eql(pm.environment.get(\"annotationName\"));\r",
																	"});\r",
																	"pm.test(\"Response body should have annotation uuid as expected.\", function () {;\r",
																	"    pm.expect(pm.response.json().data.annotation.uuid).to.eql(pm.environment.get(\"annotationUuid\"));\r",
																	"});\r",
																	"pm.test(\"Response body should have survey uuid as expected.\", function () {;\r",
																	"    pm.expect(pm.response.json().data.annotation.refUuid.surveyUuid).to.eql(pm.environment.get(\"surveyUuid\"));\r",
																	"});\r",
																	"pm.test(\"Response body should have site uuid as expected.\", function () {;\r",
																	"    pm.expect(pm.response.json().data.annotation.refUuid.siteUuid).to.eql(pm.environment.get(\"siteUuid\"));\r",
																	"});\r",
																	"pm.test(\"Response body should have site uuid as expected.\", function () {;\r",
																	"    pm.expect(pm.response.json().data.annotation.refUuid.organisationUuid).to.eql(pm.environment.get(\"orgUuid\"));\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n \"name\": \"{{annotationName}}\",\r\n \"geojson\": {\r\n  \"type\": \"Feature\",\r\n  \"geometry\": {\r\n   \"type\": \"Point\",\r\n   \"coordinates\": [\r\n    6426718.850533903,\r\n    21610080.91059555\r\n   ]\r\n  },\r\n  \"properties\": {}\r\n }\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/annotations/:annotationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"organisations",
																":organisationUuid",
																"sites",
																":siteUuid",
																"surveys",
																":surveyUuid",
																"annotations",
																":annotationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid",
																	"value": "{{orgUuid}}",
																	"type": "string"
																},
																{
																	"key": "siteUuid",
																	"value": "{{siteUuid}}",
																	"type": "string"
																},
																{
																	"key": "surveyUuid",
																	"value": "{{surveyUuid}}",
																	"type": "string",
																	"description": "(Required) "
																},
																{
																	"key": "annotationUuid",
																	"value": "{{annotationUuid}}",
																	"type": "string"
																}
															]
														}
													},
													"response": [
														{
															"name": "Successful only when a user has access to survey",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"survey",
																		":surveyUuid"
																	],
																	"variable": [
																		{
																			"key": "surveyUuid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
														},
														{
															"name": "User is not logged in",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"survey",
																		":surveyUuid"
																	],
																	"variable": [
																		{
																			"key": "surveyUuid"
																		}
																	]
																}
															},
															"status": "Unauthorized",
															"code": 401,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "When the get survey details call fails internally",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"survey",
																		":surveyUuid"
																	],
																	"variable": [
																		{
																			"key": "surveyUuid"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "Get annotation - wrong orgUuid",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 404\", function () {\r",
																	"    pm.response.to.have.status(404);\r",
																	"});\r",
																	"pm.test(\"Response body has status as 'failure'\", function () {\r",
																	"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
																	"});\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"});\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"Not Found\");\r",
																	"});\r",
																	"var errorMessage = \"Resource Not Found\";\r",
																	"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
																	"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/annotations/:annotationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"organisations",
																":organisationUuid",
																"sites",
																":siteUuid",
																"surveys",
																":surveyUuid",
																"annotations",
																":annotationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid",
																	"value": "awdadw",
																	"type": "string"
																},
																{
																	"key": "siteUuid",
																	"value": "{{siteUuid}}",
																	"type": "string"
																},
																{
																	"key": "surveyUuid",
																	"value": "{{surveyUuid}}",
																	"type": "string",
																	"description": "(Required) "
																},
																{
																	"key": "annotationUuid",
																	"value": "{{annotationUuid}}",
																	"type": "string"
																}
															]
														}
													},
													"response": [
														{
															"name": "User is not logged in",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"survey",
																		":surveyUuid"
																	],
																	"variable": [
																		{
																			"key": "surveyUuid"
																		}
																	]
																}
															},
															"status": "Unauthorized",
															"code": 401,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "When the get survey details call fails internally",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"survey",
																		":surveyUuid"
																	],
																	"variable": [
																		{
																			"key": "surveyUuid"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "Successful only when a user has access to survey",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"survey",
																		":surveyUuid"
																	],
																	"variable": [
																		{
																			"key": "surveyUuid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
														}
													]
												},
												{
													"name": "Get annotation - wrong siteUuid",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 404\", function () {\r",
																	"    pm.response.to.have.status(404);\r",
																	"});\r",
																	"pm.test(\"Response body has status as 'failure'\", function () {\r",
																	"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
																	"});\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"});\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"Not Found\");\r",
																	"});\r",
																	"var errorMessage = \"Resource Not Found\";\r",
																	"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
																	"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/annotations/:annotationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"organisations",
																":organisationUuid",
																"sites",
																":siteUuid",
																"surveys",
																":surveyUuid",
																"annotations",
																":annotationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid",
																	"value": "{{orgUuid}}",
																	"type": "string"
																},
																{
																	"key": "siteUuid",
																	"value": "msdnvdlksnk",
																	"type": "string"
																},
																{
																	"key": "surveyUuid",
																	"value": "{{surveyUuid}}",
																	"type": "string",
																	"description": "(Required) "
																},
																{
																	"key": "annotationUuid",
																	"value": "{{annotationUuid}}",
																	"type": "string"
																}
															]
														}
													},
													"response": [
														{
															"name": "User is not logged in",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"survey",
																		":surveyUuid"
																	],
																	"variable": [
																		{
																			"key": "surveyUuid"
																		}
																	]
																}
															},
															"status": "Unauthorized",
															"code": 401,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "Successful only when a user has access to survey",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"survey",
																		":surveyUuid"
																	],
																	"variable": [
																		{
																			"key": "surveyUuid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
														},
														{
															"name": "When the get survey details call fails internally",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"survey",
																		":surveyUuid"
																	],
																	"variable": [
																		{
																			"key": "surveyUuid"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "Get annotation - wrong surveyUuid",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 404\", function () {\r",
																	"    pm.response.to.have.status(404);\r",
																	"});\r",
																	"pm.test(\"Response body has status as 'failure'\", function () {\r",
																	"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
																	"});\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"});\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"Not Found\");\r",
																	"});\r",
																	"var errorMessage = \"Resource Not Found\";\r",
																	"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
																	"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/annotations/:annotationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"organisations",
																":organisationUuid",
																"sites",
																":siteUuid",
																"surveys",
																":surveyUuid",
																"annotations",
																":annotationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid",
																	"value": "{{orgUuid}}",
																	"type": "string"
																},
																{
																	"key": "siteUuid",
																	"value": "{{siteUuid}}",
																	"type": "string"
																},
																{
																	"key": "surveyUuid",
																	"value": "awewafascz",
																	"type": "string",
																	"description": "(Required) "
																},
																{
																	"key": "annotationUuid",
																	"value": "{{annotationUuid}}",
																	"type": "string"
																}
															]
														}
													},
													"response": [
														{
															"name": "User is not logged in",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"survey",
																		":surveyUuid"
																	],
																	"variable": [
																		{
																			"key": "surveyUuid"
																		}
																	]
																}
															},
															"status": "Unauthorized",
															"code": 401,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "When the get survey details call fails internally",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"survey",
																		":surveyUuid"
																	],
																	"variable": [
																		{
																			"key": "surveyUuid"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "Successful only when a user has access to survey",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"survey",
																		":surveyUuid"
																	],
																	"variable": [
																		{
																			"key": "surveyUuid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
														}
													]
												},
												{
													"name": "Get annotation - wrong annotaionUuid",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 404\", function () {\r",
																	"    pm.response.to.have.status(404);\r",
																	"});\r",
																	"pm.test(\"Response body has status as 'failure'\", function () {\r",
																	"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
																	"});\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"});\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"Not Found\");\r",
																	"});\r",
																	"var errorMessage = \"Resource Not Found\";\r",
																	"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
																	"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/annotations/:annotationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"organisations",
																":organisationUuid",
																"sites",
																":siteUuid",
																"surveys",
																":surveyUuid",
																"annotations",
																":annotationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid",
																	"value": "{{orgUuid}}",
																	"type": "string"
																},
																{
																	"key": "siteUuid",
																	"value": "{{siteUuid}}",
																	"type": "string"
																},
																{
																	"key": "surveyUuid",
																	"value": "{{surveyUuid}}",
																	"type": "string",
																	"description": "(Required) "
																},
																{
																	"key": "annotationUuid",
																	"value": "asdawdawsa",
																	"type": "string"
																}
															]
														}
													},
													"response": [
														{
															"name": "User is not logged in",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"survey",
																		":surveyUuid"
																	],
																	"variable": [
																		{
																			"key": "surveyUuid"
																		}
																	]
																}
															},
															"status": "Unauthorized",
															"code": 401,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "When the get survey details call fails internally",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"survey",
																		":surveyUuid"
																	],
																	"variable": [
																		{
																			"key": "surveyUuid"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "Successful only when a user has access to survey",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"survey",
																		":surveyUuid"
																	],
																	"variable": [
																		{
																			"key": "surveyUuid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
														}
													]
												},
												{
													"name": "Get annotation - Invalid accept header",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 406\", function () {\r",
																	"    pm.response.to.have.status(406);\r",
																	"});\r",
																	"var message = \"Could not satisfy the request Accept header.\";\r",
																	"pm.test(\"Response body message is '\"+message+\"'\", function () {\r",
																	"    pm.expect(pm.response.json().message).to.eql(message);\r",
																	"});\r",
																	"pm.test(\"Response body status is 'failure'\", function () {\r",
																	"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
																	"});\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"});\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"Not Acceptable\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/octet-stream",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/annotations/:annotationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"organisations",
																":organisationUuid",
																"sites",
																":siteUuid",
																"surveys",
																":surveyUuid",
																"annotations",
																":annotationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid",
																	"value": "{{orgUuid}}",
																	"type": "string"
																},
																{
																	"key": "siteUuid",
																	"value": "{{siteUuid}}",
																	"type": "string"
																},
																{
																	"key": "surveyUuid",
																	"value": "{{surveyUuid}}",
																	"type": "string",
																	"description": "(Required) "
																},
																{
																	"key": "annotationUuid",
																	"value": "{{annotationUuid}}",
																	"type": "string"
																}
															]
														}
													},
													"response": [
														{
															"name": "When the get survey details call fails internally",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"survey",
																		":surveyUuid"
																	],
																	"variable": [
																		{
																			"key": "surveyUuid"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "User is not logged in",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"survey",
																		":surveyUuid"
																	],
																	"variable": [
																		{
																			"key": "surveyUuid"
																		}
																	]
																}
															},
															"status": "Unauthorized",
															"code": 401,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "Successful only when a user has access to survey",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"survey",
																		":surveyUuid"
																	],
																	"variable": [
																		{
																			"key": "surveyUuid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
														}
													]
												},
												{
													"name": "Get annotation - Invalid auth token",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 401\", function () {\r",
																	"    pm.response.to.have.status(401);\r",
																	"});\r",
																	"pm.test(\"Status code name has Unauthorized\", function () {\r",
																	"    pm.response.to.have.status(\"Unauthorized\");\r",
																	"});\r",
																	"pm.test(\"response body status value is 'forbidden'\", function () {\r",
																	"    pm.expect(pm.response.json().status).to.eql(\"forbidden\");\r",
																	"});\r",
																	"var errMessage = \"Log in to do this action\";\r",
																	"pm.test(\"response body message is '\"+errMessage+\"'\", function () {\r",
																	"    pm.expect(pm.response.json().message).to.eql(errMessage);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1qTkZRVUkyT1RRM01qTXpOa1l4TmpCQ04wSTVNa0kxUmpFNVFVSkVOelkzTnpnNFJqTXpRZyJ9.eyJodHRwczovL2V4YW1wbGUuY29tL3JvbGVzIjpbInVzZXIiXSwiaHR0cHM6Ly9kamFuZ28td2ViYXBwL3JvbGUiOiJ1c2VyIiwibmlja25hbWUiOiJwYW5rYWouZGV2cmFuaSIsIm5hbWUiOiJwYW5rYWouZGV2cmFuaUBhc3RlcmlhLmNvLmluIiwicGljdHVyZSI6Imh0dHBzOi8vcy5ncmF2YXRhci5jb20vYXZhdGFyLzRjN2YzYzM0OWNkYzkzZmMxODVmMTMzMThhZjIzMjcxP3M9NDgwJnI9cGcmZD1odHRwcyUzQSUyRiUyRmNkbi5hdXRoMC5jb20lMkZhdmF0YXJzJTJGcGEucG5nIiwidXBkYXRlZF9hdCI6IjIwMjAtMDYtMTFUMTI6MzU6MjQuMTk4WiIsImlzcyI6Imh0dHBzOi8vaW5zaWdodDEuYXV0aDAuY29tLyIsInN1YiI6ImF1dGgwfDVlYzdiMTBjZTZmNGUwMGJmMjAzNzZjMyIsImF1ZCI6IlNzTENHTmdnMHlBN0I3c0g1ZU5WTUZtQ1A5SlZkZGUzIiwiaWF0IjoxNTkxOTQ3NDYwLCJleHAiOjE1OTE5ODM0NjB9.kYNMikKc84EQXRC32dwkOXW0gkJKfqQTOLVmOkKs5QmvVKcVQNZVbo4fQFuYf07Qu1OpvYKmqBHf3Z5H8nsy-Mfeyufgr86X_p5vdThkpCGMzg3uX06LqKoVDcRRzDndQpmvve5Ripla3ucN5IME363U1EfwqmDPs4jBoAxuB80qurcVq3NBn8dOJzJNCRgGW-aHPP6LJAvezGgWpiDnKRcKLIbU2ig7h5t-8LhWOKDi48TBHGyOQYdxqUE7fC2NCi6ghTX7SnLxXA6S1SMwpqQgAApEnjklY8ImuP6in3Rd5JnvJJedDZTcYWK43iKBMoe5exhYd547XNtpQWttWE",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/annotations/:annotationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"organisations",
																":organisationUuid",
																"sites",
																":siteUuid",
																"surveys",
																":surveyUuid",
																"annotations",
																":annotationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid",
																	"value": "{{orgUuid}}",
																	"type": "string"
																},
																{
																	"key": "siteUuid",
																	"value": "{{siteUuid}}",
																	"type": "string"
																},
																{
																	"key": "surveyUuid",
																	"value": "{{surveyUuid}}",
																	"type": "string",
																	"description": "(Required) "
																},
																{
																	"key": "annotationUuid",
																	"value": "{{annotationUuid}}",
																	"type": "string"
																}
															]
														}
													},
													"response": [
														{
															"name": "Successful only when a user has access to survey",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"survey",
																		":surveyUuid"
																	],
																	"variable": [
																		{
																			"key": "surveyUuid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
														},
														{
															"name": "When the get survey details call fails internally",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"survey",
																		":surveyUuid"
																	],
																	"variable": [
																		{
																			"key": "surveyUuid"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "User is not logged in",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"survey",
																		":surveyUuid"
																	],
																	"variable": [
																		{
																			"key": "surveyUuid"
																		}
																	]
																}
															},
															"status": "Unauthorized",
															"code": 401,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												}
											]
										},
										{
											"name": "Edit an annoation details",
											"item": [
												{
													"name": "Edit an annotation details",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"pm.environment.set(\"editAnnotationName\",\"annotationName_\"+Math.floor((Math.random() * 10000000000) + 1));"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"if(pm.expect(pm.response.json().data.annotation.uuid).to.eql(pm.environment.get(\"annotationUuid\"))){\r",
																	"    pm.environment.set(\"annoationName\",pm.environment.get(\"editAnnotationName\"));\r",
																	"}\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Body matches string : 'success'\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"success\");\r",
																	"});\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"});\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"Response body has annotation uuid as expected.\", function () {\r",
																	"    pm.expect(pm.response.json().data.annotation.uuid).to.eql(pm.environment.get(\"annotationUuid\"));\r",
																	"});\r",
																	"pm.test(\"Response body has annotation name as : '\"+pm.environment.get(\"editAnnotationName\")+\"'\", function () {\r",
																	"    pm.expect(pm.response.json().data.annotation.name).to.eql(pm.environment.get(\"editAnnotationName\"));\r",
																	"});\r",
																	"pm.test(\"Response body has annoation geojson type as 'Point'.\", function () {\r",
																	"    pm.expect(pm.response.json().data.annotation.geojson.geometry.type).to.eql(\"Point\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"name\": \"{{editAnnotationName}}\",\r\n \"geojson\": {\r\n  \"type\": \"Feature\",\r\n  \"geometry\": {\r\n   \"type\": \"Point\",\r\n   \"coordinates\": [\r\n    68.850533903,\r\n    21.91059555\r\n   ]\r\n  },\r\n  \"properties\": {}\r\n }\r\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/annotations/:annotationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"organisations",
																":organisationUuid",
																"sites",
																":siteUuid",
																"surveys",
																":surveyUuid",
																"annotations",
																":annotationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid",
																	"value": "{{orgUuid}}",
																	"type": "string"
																},
																{
																	"key": "siteUuid",
																	"value": "{{siteUuid}}",
																	"type": "string"
																},
																{
																	"key": "surveyUuid",
																	"value": "{{surveyUuid}}",
																	"type": "string"
																},
																{
																	"key": "annotationUuid",
																	"value": "{{annotationUuid}}",
																	"type": "string"
																}
															]
														}
													},
													"response": [
														{
															"name": "Successful only when a user has access to survey edit perms",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"survey",
																		":surveyUuid"
																	],
																	"variable": [
																		{
																			"key": "surveyUuid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
														},
														{
															"name": "User is not logged in",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"survey",
																		":surveyUuid"
																	],
																	"variable": [
																		{
																			"key": "surveyUuid"
																		}
																	]
																}
															},
															"status": "Unauthorized",
															"code": 401,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "When the update survey call fails internally",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"survey",
																		":surveyUuid"
																	],
																	"variable": [
																		{
																			"key": "surveyUuid"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "Edit annotation - Duplicate request",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"if(pm.expect(pm.response.json().data.annotation.uuid).to.eql(pm.environment.get(\"annotationUuid\"))){\r",
																	"    pm.environment.set(\"annoationName\",pm.environment.get(\"editAnnotationName\"));\r",
																	"}\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Body matches string : 'success'\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"success\");\r",
																	"});\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"});\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"Response body has annotation uuid as expected.\", function () {\r",
																	"    pm.expect(pm.response.json().data.annotation.uuid).to.eql(pm.environment.get(\"annotationUuid\"));\r",
																	"});\r",
																	"pm.test(\"Response body has annotation name as : '\"+pm.environment.get(\"editAnnotationName\")+\"'\", function () {\r",
																	"    pm.expect(pm.response.json().data.annotation.name).to.eql(pm.environment.get(\"editAnnotationName\"));\r",
																	"});\r",
																	"pm.test(\"Response body has annoation geojson type as 'Point'.\", function () {\r",
																	"    pm.expect(pm.response.json().data.annotation.geojson.geometry.type).to.eql(\"Point\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"name\": \"{{editAnnotationName}}\",\r\n \"geojson\": {\r\n  \"type\": \"Feature\",\r\n  \"geometry\": {\r\n   \"type\": \"Point\",\r\n   \"coordinates\": [\r\n    64.850533903,\r\n    10.91059555\r\n   ]\r\n  },\r\n  \"properties\": {}\r\n }\r\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/annotations/:annotationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"organisations",
																":organisationUuid",
																"sites",
																":siteUuid",
																"surveys",
																":surveyUuid",
																"annotations",
																":annotationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid",
																	"value": "{{orgUuid}}",
																	"type": "string"
																},
																{
																	"key": "siteUuid",
																	"value": "{{siteUuid}}",
																	"type": "string"
																},
																{
																	"key": "surveyUuid",
																	"value": "{{surveyUuid}}",
																	"type": "string"
																},
																{
																	"key": "annotationUuid",
																	"value": "{{annotationUuid}}",
																	"type": "string"
																}
															]
														}
													},
													"response": [
														{
															"name": "When the update survey call fails internally",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"survey",
																		":surveyUuid"
																	],
																	"variable": [
																		{
																			"key": "surveyUuid"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "Successful only when a user has access to survey edit perms",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"survey",
																		":surveyUuid"
																	],
																	"variable": [
																		{
																			"key": "surveyUuid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
														},
														{
															"name": "User is not logged in",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"survey",
																		":surveyUuid"
																	],
																	"variable": [
																		{
																			"key": "surveyUuid"
																		}
																	]
																}
															},
															"status": "Unauthorized",
															"code": 401,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "Edit annotation - wrong orgUuid",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 404\", function () {\r",
																	"    pm.response.to.have.status(404);\r",
																	"});\r",
																	"pm.test(\"Response body has tatus as 'failure'\", function () {\r",
																	"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
																	"});\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"});\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"Not Found\");\r",
																	"});\r",
																	"var errorMessage = \"Resource Not Found\";\r",
																	"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
																	"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"name\": \"{{editAnnotationName}}\",\r\n \"geojson\": {\r\n  \"type\": \"Feature\",\r\n  \"geometry\": {\r\n   \"type\": \"Point\",\r\n   \"coordinates\": [\r\n    6426718.850533903,\r\n    21610080.91059555\r\n   ]\r\n  },\r\n  \"properties\": {}\r\n }\r\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/annotations/:annotationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"organisations",
																":organisationUuid",
																"sites",
																":siteUuid",
																"surveys",
																":surveyUuid",
																"annotations",
																":annotationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid",
																	"type": "string",
																	"value": "kshdkjsahkd"
																},
																{
																	"key": "siteUuid",
																	"type": "string",
																	"value": "{{siteUuid}}"
																},
																{
																	"key": "surveyUuid",
																	"type": "string",
																	"value": "{{surveyUuid}}"
																},
																{
																	"key": "annotationUuid",
																	"type": "string",
																	"value": "{{annotationUuid}}"
																}
															]
														}
													},
													"response": [
														{
															"name": "Successful only when a user has access to survey edit perms",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"survey",
																		":surveyUuid"
																	],
																	"variable": [
																		{
																			"key": "surveyUuid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
														},
														{
															"name": "When the update survey call fails internally",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"survey",
																		":surveyUuid"
																	],
																	"variable": [
																		{
																			"key": "surveyUuid"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "User is not logged in",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"survey",
																		":surveyUuid"
																	],
																	"variable": [
																		{
																			"key": "surveyUuid"
																		}
																	]
																}
															},
															"status": "Unauthorized",
															"code": 401,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "Edit annotation - wrong siteUuid",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 404\", function () {\r",
																	"    pm.response.to.have.status(404);\r",
																	"});\r",
																	"pm.test(\"Response body has tatus as 'failure'\", function () {\r",
																	"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
																	"});\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"});\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"Not Found\");\r",
																	"});\r",
																	"var errorMessage = \"Resource Not Found\";\r",
																	"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
																	"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"name\": \"{{editAnnotationName}}\",\r\n \"geojson\": {\r\n  \"type\": \"Feature\",\r\n  \"geometry\": {\r\n   \"type\": \"Point\",\r\n   \"coordinates\": [\r\n    6426718.850533903,\r\n    21610080.91059555\r\n   ]\r\n  },\r\n  \"properties\": {}\r\n }\r\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/annotations/:annotationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"organisations",
																":organisationUuid",
																"sites",
																":siteUuid",
																"surveys",
																":surveyUuid",
																"annotations",
																":annotationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid",
																	"type": "string",
																	"value": "{{orgUuid}}"
																},
																{
																	"key": "siteUuid",
																	"type": "string",
																	"value": "ajsdjkashdk"
																},
																{
																	"key": "surveyUuid",
																	"type": "string",
																	"value": "{{surveyUuid}}"
																},
																{
																	"key": "annotationUuid",
																	"type": "string",
																	"value": "{{annotationUuid}}"
																}
															]
														}
													},
													"response": [
														{
															"name": "User is not logged in",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"survey",
																		":surveyUuid"
																	],
																	"variable": [
																		{
																			"key": "surveyUuid"
																		}
																	]
																}
															},
															"status": "Unauthorized",
															"code": 401,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "Successful only when a user has access to survey edit perms",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"survey",
																		":surveyUuid"
																	],
																	"variable": [
																		{
																			"key": "surveyUuid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
														},
														{
															"name": "When the update survey call fails internally",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"survey",
																		":surveyUuid"
																	],
																	"variable": [
																		{
																			"key": "surveyUuid"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "Edit annotation - wrong surveyUuid",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 404\", function () {\r",
																	"    pm.response.to.have.status(404);\r",
																	"});\r",
																	"pm.test(\"Response body has tatus as 'failure'\", function () {\r",
																	"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
																	"});\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"});\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"Not Found\");\r",
																	"});\r",
																	"var errorMessage = \"Resource Not Found\";\r",
																	"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
																	"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"name\": \"{{editAnnotationName}}\",\r\n \"geojson\": {\r\n  \"type\": \"Feature\",\r\n  \"geometry\": {\r\n   \"type\": \"Point\",\r\n   \"coordinates\": [\r\n    6426718.850533903,\r\n    21610080.91059555\r\n   ]\r\n  },\r\n  \"properties\": {}\r\n }\r\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/annotations/:annotationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"organisations",
																":organisationUuid",
																"sites",
																":siteUuid",
																"surveys",
																":surveyUuid",
																"annotations",
																":annotationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid",
																	"type": "string",
																	"value": "{{orgUuid}}"
																},
																{
																	"key": "siteUuid",
																	"type": "string",
																	"value": "{{siteUuid}}"
																},
																{
																	"key": "surveyUuid",
																	"type": "string",
																	"value": "ashdksahj"
																},
																{
																	"key": "annotationUuid",
																	"type": "string",
																	"value": "{{annotationUuid}}"
																}
															]
														}
													},
													"response": [
														{
															"name": "Successful only when a user has access to survey edit perms",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"survey",
																		":surveyUuid"
																	],
																	"variable": [
																		{
																			"key": "surveyUuid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
														},
														{
															"name": "When the update survey call fails internally",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"survey",
																		":surveyUuid"
																	],
																	"variable": [
																		{
																			"key": "surveyUuid"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "User is not logged in",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"survey",
																		":surveyUuid"
																	],
																	"variable": [
																		{
																			"key": "surveyUuid"
																		}
																	]
																}
															},
															"status": "Unauthorized",
															"code": 401,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "Edit annotation - wrong annotationUuid",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 404\", function () {\r",
																	"    pm.response.to.have.status(404);\r",
																	"});\r",
																	"pm.test(\"Response body has tatus as 'failure'\", function () {\r",
																	"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
																	"});\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"});\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"Not Found\");\r",
																	"});\r",
																	"var errorMessage = \"Resource Not Found\";\r",
																	"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
																	"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"name\": \"{{editAnnotationName}}\",\r\n \"geojson\": {\r\n  \"type\": \"Feature\",\r\n  \"geometry\": {\r\n   \"type\": \"Point\",\r\n   \"coordinates\": [\r\n    68.850533903,\r\n    20.91059555\r\n   ]\r\n  },\r\n  \"properties\": {}\r\n }\r\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/annotations/:annotationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"organisations",
																":organisationUuid",
																"sites",
																":siteUuid",
																"surveys",
																":surveyUuid",
																"annotations",
																":annotationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid",
																	"type": "string",
																	"value": "{{orgUuid}}"
																},
																{
																	"key": "siteUuid",
																	"type": "string",
																	"value": "{{siteUuid}}"
																},
																{
																	"key": "surveyUuid",
																	"type": "string",
																	"value": "{{surveyUuid}}"
																},
																{
																	"key": "annotationUuid",
																	"type": "string",
																	"value": "sdadasdasadw"
																}
															]
														}
													},
													"response": [
														{
															"name": "When the update survey call fails internally",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"survey",
																		":surveyUuid"
																	],
																	"variable": [
																		{
																			"key": "surveyUuid"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "Successful only when a user has access to survey edit perms",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"survey",
																		":surveyUuid"
																	],
																	"variable": [
																		{
																			"key": "surveyUuid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
														},
														{
															"name": "User is not logged in",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"survey",
																		":surveyUuid"
																	],
																	"variable": [
																		{
																			"key": "surveyUuid"
																		}
																	]
																}
															},
															"status": "Unauthorized",
															"code": 401,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "Edit annotation - More than 50 char name",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"pm.test(\"Response body status is 'failure'\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.status).to.eql(\"failure\");\r",
																	"});\r",
																	"pm.test(\"Response body message is 'Validation Error'\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.message).to.eql(\"Validation Error\");\r",
																	"});\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\")  ;\r",
																	"});\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"var errMessage = \"Ensure this field has no more than 50 characters.\";\r",
																	"pm.test(\"Response body validation error message is '\"+errMessage+\"' \", function () {\r",
																	"    pm.expect(pm.response.json().validation_errors.name[0][0]).to.eql(errMessage);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"name\": \"{{editAnnotationName}}da64wdawdwadasdaiquhf4a564a6w4da64da6dw8aw6d4a684d6aw4da684d68a4da65d4a\",\n \"geojson\": {\n  \"type\": \"Feature\",\n  \"geometry\": {\n   \"type\": \"Point\",\n   \"coordinates\": [\n    6426718.850533903,\n    21610080.91059555\n   ]\n  },\n  \"properties\": {}\n }\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/annotations/:annotationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"organisations",
																":organisationUuid",
																"sites",
																":siteUuid",
																"surveys",
																":surveyUuid",
																"annotations",
																":annotationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid",
																	"value": "{{orgUuid}}",
																	"type": "string"
																},
																{
																	"key": "siteUuid",
																	"value": "{{siteUuid}}",
																	"type": "string"
																},
																{
																	"key": "surveyUuid",
																	"value": "{{surveyUuid}}",
																	"type": "string"
																},
																{
																	"key": "annotationUuid",
																	"value": "{{annotationUuid}}",
																	"type": "string"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Edit annotation - Without request body",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"pm.test(\"Response body status is 'failure'\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.status).to.eql(\"failure\");\r",
																	"});\r",
																	"pm.test(\"Response body message is 'Validation Error'\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.message).to.eql(\"Validation Error\");\r",
																	"});\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\")  ;\r",
																	"});\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"var errorMessage = \"field is required.\";\r",
																	"pm.test(\"Response body validation error message for annotation name as '\"+errorMessage+\"' \", function () {\r",
																	"    pm.expect(pm.response.json().validation_errors.name[0][0]).to.eql(errorMessage);\r",
																	"});\r",
																	"pm.test(\"Response body validation error message for annotation geojson as '\"+errorMessage+\"' \", function () {\r",
																	"    pm.expect(pm.response.json().validation_errors.geojson[0][0]).to.eql(errorMessage);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/annotations/:annotationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"organisations",
																":organisationUuid",
																"sites",
																":siteUuid",
																"surveys",
																":surveyUuid",
																"annotations",
																":annotationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid",
																	"value": "{{orgUuid}}",
																	"type": "string"
																},
																{
																	"key": "siteUuid",
																	"value": "{{siteUuid}}",
																	"type": "string"
																},
																{
																	"key": "surveyUuid",
																	"value": "{{surveyUuid}}",
																	"type": "string"
																},
																{
																	"key": "annotationUuid",
																	"value": "{{annotationUuid}}",
																	"type": "string"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Edit annotation - Invalid request body json",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"pm.test(\"Response body status is 'failure'\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.status).to.eql(\"failure\");\r",
																	"});\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\")  ;\r",
																	"});\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"var errorMessage = \"JSON parse error\";\r",
																	"pm.test(\"Response body validation error message is '\"+errorMessage+\"' \", function () {\r",
																	"    pm.expect(pm.response.json().message).to.contain(errorMessage);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n \"name\": \"{{annotationName}}\"\r\n \"geojson\": {\r\n  \"type\": \"Feature\",\r\n  \"geometry\": {\r\n   \"type\": \"Point\",\r\n   \"coordinates\": [\r\n    6426718.850533903,\r\n    21610080.91059555\r\n   ]\r\n  },\r\n  \"properties\": {}\r\n }\r\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/annotations/:annotationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"organisations",
																":organisationUuid",
																"sites",
																":siteUuid",
																"surveys",
																":surveyUuid",
																"annotations",
																":annotationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid",
																	"value": "{{orgUuid}}",
																	"type": "string"
																},
																{
																	"key": "siteUuid",
																	"value": "{{siteUuid}}",
																	"type": "string"
																},
																{
																	"key": "surveyUuid",
																	"value": "{{surveyUuid}}",
																	"type": "string"
																},
																{
																	"key": "annotationUuid",
																	"value": "{{annotationUuid}}",
																	"type": "string"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Edit annotation - Support alph numaric and special character",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Response body status is 'success'\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.status).to.eql(\"success\");\r",
																	"});\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\")  ;\r",
																	"});\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"The annoation has survey Uuid as expected\", function () {\r",
																	"    pm.expect( pm.response.json().data.annotation.refUuid.surveyUuid).to.eql(pm.environment.get(\"surveyUuid\"));\r",
																	"});\r",
																	"pm.test(\"The annoation has site Uuid as expected\", function () {\r",
																	"    pm.expect( pm.response.json().data.annotation.refUuid.siteUuid).to.eql(pm.environment.get(\"siteUuid\"));\r",
																	"});\r",
																	"\r",
																	"pm.test(\"The annoation has organisation Uuid as expected\", function () {\r",
																	"    pm.expect( pm.response.json().data.annotation.refUuid.organisationUuid).to.eql(pm.environment.get(\"orgUuid\"));\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n \"name\": \"EditAnnotation-!@#$%^&*()+{}|][\\\\':;?\",\n \"geojson\": {\n  \"type\": \"Feature\",\n  \"geometry\": {\n   \"type\": \"Point\",\n   \"coordinates\": [\n    68.850533903,\n    1.91059555\n   ]\n  },\n  \"properties\": {}\n }\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/annotations/:annotationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"organisations",
																":organisationUuid",
																"sites",
																":siteUuid",
																"surveys",
																":surveyUuid",
																"annotations",
																":annotationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid",
																	"value": "{{orgUuid}}",
																	"type": "string"
																},
																{
																	"key": "siteUuid",
																	"value": "{{siteUuid}}",
																	"type": "string"
																},
																{
																	"key": "surveyUuid",
																	"value": "{{surveyUuid}}",
																	"type": "string"
																},
																{
																	"key": "annotationUuid",
																	"value": "{{annotationUuid}}",
																	"type": "string"
																}
															]
														}
													},
													"response": [
														{
															"name": "When the create site call fails internally",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"organisation",
																		":organisationUuid",
																		"site"
																	],
																	"variable": [
																		{
																			"key": "organisationUuid"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "User is not logged in",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"organisation",
																		":organisationUuid",
																		"site"
																	],
																	"variable": [
																		{
																			"key": "organisationUuid"
																		}
																	]
																}
															},
															"status": "Unauthorized",
															"code": 401,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "Successful only when a user with sufficient permissions calls the API",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"organisation",
																		":organisationUuid",
																		"site"
																	],
																	"variable": [
																		{
																			"key": "organisationUuid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"site\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"organisationUuid\": \"<string>\",\n   \"location\": \"<string>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
														}
													]
												},
												{
													"name": "Edit annotation - Name and geojson property null",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"pm.test(\"Response body status is 'failure'\", function () {\r",
																	"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
																	"});\r",
																	"pm.test(\"Response body message is 'Validation Error'\", function () {\r",
																	"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");\r",
																	"});\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\")  ;\r",
																	"});\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"var errorMessage = \"field is required.\";\r",
																	"pm.test(\"Response body validation error message for name is '\"+errorMessage+\"' \", function () {\r",
																	"    pm.expect(pm.response.json().validation_errors.name[0][0]).to.eql(errorMessage);\r",
																	"});\r",
																	"pm.test(\"Response body validation error message for surveyTo is '\"+errorMessage+\"' \", function () {\r",
																	"    pm.expect(pm.response.json().validation_errors.geojson[0][0]).to.eql(errorMessage);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"name\": null,\r\n \"geojson\": null\r\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/annotations/:annotationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"organisations",
																":organisationUuid",
																"sites",
																":siteUuid",
																"surveys",
																":surveyUuid",
																"annotations",
																":annotationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid",
																	"value": "{{orgUuid}}",
																	"type": "string"
																},
																{
																	"key": "siteUuid",
																	"value": "{{siteUuid}}",
																	"type": "string"
																},
																{
																	"key": "surveyUuid",
																	"value": "{{surveyUuid}}",
																	"type": "string"
																},
																{
																	"key": "annotationUuid",
																	"value": "{{annotationUuid}}",
																	"type": "string"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Edit annotation - Geojson type and geometry property null",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"pm.test(\"Response body status is 'failure'\", function () {\r",
																	"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
																	"});\r",
																	"pm.test(\"Response body message is 'Validation Error'\", function () {\r",
																	"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");\r",
																	"});\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\")  ;\r",
																	"});\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"var errorTypeMessage = \"must not be blank (was: None)\";\r",
																	"pm.test(\"Response body validation error message for geojson type is '\"+errorTypeMessage+\"' \", function () {\r",
																	"    pm.expect(pm.response.json().validation_errors.geojson[0][0].type[0]).to.eql(errorTypeMessage);\r",
																	"});\r",
																	"var errorGeometryMessage = \"provided type is not supported\";\r",
																	"pm.test(\"Response body validation error message for geometry is '\"+errorGeometryMessage+\"' \", function () {\r",
																	"    pm.expect( pm.response.json().validation_errors.geojson[0][0].geometry[0]).to.eql(errorGeometryMessage);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"name\": \"{{editAnnotationName}}\",\r\n \"geojson\": {\r\n  \"type\": null,\r\n  \"geometry\": {\r\n   \"type\": null,\r\n   \"coordinates\": [\r\n    85.850533903,\r\n    24.910595551\r\n   ]\r\n  },\r\n  \"properties\": {}\r\n }\r\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/annotations/:annotationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"organisations",
																":organisationUuid",
																"sites",
																":siteUuid",
																"surveys",
																":surveyUuid",
																"annotations",
																":annotationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid",
																	"value": "{{orgUuid}}",
																	"type": "string"
																},
																{
																	"key": "siteUuid",
																	"value": "{{siteUuid}}",
																	"type": "string"
																},
																{
																	"key": "surveyUuid",
																	"value": "{{surveyUuid}}",
																	"type": "string"
																},
																{
																	"key": "annotationUuid",
																	"value": "{{annotationUuid}}",
																	"type": "string"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Edit annotation - Coordinates null",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"pm.test(\"Response body status is 'failure'\", function () {\r",
																	"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
																	"});\r",
																	"pm.test(\"Response body message is 'Validation Error'\", function () {\r",
																	"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");\r",
																	"});\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\")  ;\r",
																	"});\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"var errorGeometryMessage = \"Coordinates must be one of ('list', 'tuple'), not None\";\r",
																	"pm.test(\"Response body validation error message for geometry is '\"+errorGeometryMessage+\"' \", function () {\r",
																	"    pm.expect( pm.response.json().validation_errors.geojson[0][0].geometry[0]).to.eql(errorGeometryMessage);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"name\": \"{{editAnnotationName}}\",\r\n \"geojson\": {\r\n  \"type\": \"Feature\",\r\n  \"geometry\": {\r\n   \"type\": \"Point\",\r\n   \"coordinates\": null\r\n  },\r\n  \"properties\": {}\r\n }\r\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/annotations/:annotationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"organisations",
																":organisationUuid",
																"sites",
																":siteUuid",
																"surveys",
																":surveyUuid",
																"annotations",
																":annotationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid",
																	"value": "{{orgUuid}}",
																	"type": "string"
																},
																{
																	"key": "siteUuid",
																	"value": "{{siteUuid}}",
																	"type": "string"
																},
																{
																	"key": "surveyUuid",
																	"value": "{{surveyUuid}}",
																	"type": "string"
																},
																{
																	"key": "annotationUuid",
																	"value": "{{annotationUuid}}",
																	"type": "string"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Edit annotation - Coordinates value null",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"pm.test(\"Response body status is 'failure'\", function () {\r",
																	"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
																	"});\r",
																	"pm.test(\"Response body message is 'Validation Error'\", function () {\r",
																	"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");\r",
																	"});\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\")  ;\r",
																	"});\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"var errorGeometryMessage = \"coordinate value must be one of ('float', 'int'), not None\";\r",
																	"pm.test(\"Response body validation error message for geometry is '\"+errorGeometryMessage+\"' \", function () {\r",
																	"    pm.expect( pm.response.json().validation_errors.geojson[0][0].geometry[0]).to.eql(errorGeometryMessage);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"name\": \"{{editAnnotationName}}\",\r\n \"geojson\": {\r\n  \"type\": \"Feature\",\r\n  \"geometry\": {\r\n   \"type\": \"Point\",\r\n   \"coordinates\": [\r\n    null,\r\n    null\r\n   ]\r\n  },\r\n  \"properties\": {}\r\n }\r\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/annotations/:annotationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"organisations",
																":organisationUuid",
																"sites",
																":siteUuid",
																"surveys",
																":surveyUuid",
																"annotations",
																":annotationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid",
																	"value": "{{orgUuid}}",
																	"type": "string"
																},
																{
																	"key": "siteUuid",
																	"value": "{{siteUuid}}",
																	"type": "string"
																},
																{
																	"key": "surveyUuid",
																	"value": "{{surveyUuid}}",
																	"type": "string"
																},
																{
																	"key": "annotationUuid",
																	"value": "{{annotationUuid}}",
																	"type": "string"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Edit annotation - invalid content-type header",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 415\", function () {\r",
																	"    pm.response.to.have.status(415);\r",
																	"});\r",
																	"pm.test(\"Response Body has status as 'failure'\", function () {\r",
																	"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
																	"});\r",
																	"pm.test(\"Response Body has message as 'Unsupported media type'\", function () {\r",
																	"    pm.expect(pm.response.json().message).to.contain(\"Unsupported media type\");\r",
																	"});\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"});\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"Unsupported Media Type\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"accept": true,
															"content-type": true
														}
													},
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/vnd.api+json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"name\": \"{{editAnnotationName}}\",\n \"geojson\": {\n  \"type\": \"Feature\",\n  \"geometry\": {\n   \"type\": \"Point\",\n   \"coordinates\": [\n    6426718.850533903,\n    21610080.91059555\n   ]\n  },\n  \"properties\": {}\n }\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/annotations/:annotationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"organisations",
																":organisationUuid",
																"sites",
																":siteUuid",
																"surveys",
																":surveyUuid",
																"annotations",
																":annotationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid",
																	"value": "{{orgUuid}}",
																	"type": "string"
																},
																{
																	"key": "siteUuid",
																	"value": "{{siteUuid}}",
																	"type": "string"
																},
																{
																	"key": "surveyUuid",
																	"value": "{{surveyUuid}}",
																	"type": "string"
																},
																{
																	"key": "annotationUuid",
																	"value": "{{annotationUuid}}",
																	"type": "string"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Edit annotation - invalid accept header",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 406\", function () {\r",
																	"    pm.response.to.have.status(406);\r",
																	"});\r",
																	"var message = \"Could not satisfy the request Accept header.\";\r",
																	"pm.test(\"Response body message is '\"+message+\"'\", function () {\r",
																	"    pm.expect(pm.response.json().message).to.eql(message);\r",
																	"});\r",
																	"pm.test(\"Response body status is 'failure'\", function () {\r",
																	"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
																	"});\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"});\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"Not Acceptable\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"type": "text",
																"value": "application/atom+xml"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"name\": \"{{editSurveyName}}\",\n  \"description\": \"Changed survey description - {{editSurveyName}}\",\n  \"surveyFrom\": \"2020-02-01T00:00:00Z\",\n  \"surveyTo\": \"2020-02-01T00:00:00Z\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/annotations/:annotationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"organisations",
																":organisationUuid",
																"sites",
																":siteUuid",
																"surveys",
																":surveyUuid",
																"annotations",
																":annotationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid",
																	"value": "{{orgUuid}}",
																	"type": "string"
																},
																{
																	"key": "siteUuid",
																	"value": "{{siteUuid}}",
																	"type": "string"
																},
																{
																	"key": "surveyUuid",
																	"value": "{{surveyUuid}}",
																	"type": "string"
																},
																{
																	"key": "annotationUuid",
																	"value": "{{annotationUuid}}",
																	"type": "string"
																}
															]
														}
													},
													"response": [
														{
															"name": "When the update org call fails internally",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"organisation",
																		":organisationUuid"
																	],
																	"variable": [
																		{
																			"key": "organisationUuid"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "User is not logged in",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"organisation",
																		":organisationUuid"
																	],
																	"variable": [
																		{
																			"key": "organisationUuid"
																		}
																	]
																}
															},
															"status": "Unauthorized",
															"code": 401,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "Successful only when a user has access to org edit perms",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"organisation",
																		":organisationUuid"
																	],
																	"variable": [
																		{
																			"key": "organisationUuid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"organisation\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
														}
													]
												},
												{
													"name": "Edit annotation - Invalid auth token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 401\", function () {\r",
																	"    pm.response.to.have.status(401);\r",
																	"});\r",
																	"pm.test(\"Status code name has Unauthorized\", function () {\r",
																	"    pm.response.to.have.status(\"Unauthorized\");\r",
																	"});\r",
																	"pm.test(\"response body status value is 'forbidden'\", function () {\r",
																	"    pm.expect(pm.response.json().status).to.eql(\"forbidden\");\r",
																	"});\r",
																	"var errMessage = \"Log in to do this action\";\r",
																	"pm.test(\"response body message is '\"+errMessage+\"'\", function () {\r",
																	"    pm.expect(pm.response.json().message).to.eql(errMessage);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1qTkZRVUkyT1RRM01qTXpOa1l4TmpCQ04wSTVNa0kxUmpFNVFVSkVOelkzTnpnNFJqTXpRZyJ9.eyJodHRwczovL2V4YW1wbGUuY29tL3JvbGVzIjpbInVzZXIiXSwiaHR0cHM6Ly9kamFuZ28td2ViYXBwL3JvbGUiOiJ1c2VyIiwibmlja25hbWUiOiJwYW5rYWouZGV2cmFuaSIsIm5hbWUiOiJwYW5rYWouZGV2cmFuaUBhc3RlcmlhLmNvLmluIiwicGljdHVyZSI6Imh0dHBzOi8vcy5ncmF2YXRhci5jb20vYXZhdGFyLzRjN2YzYzM0OWNkYzkzZmMxODVmMTMzMThhZjIzMjcxP3M9NDgwJnI9cGcmZD1odHRwcyUzQSUyRiUyRmNkbi5hdXRoMC5jb20lMkZhdmF0YXJzJTJGcGEucG5nIiwidXBkYXRlZF9hdCI6IjIwMjAtMDYtMTJUMDc6Mzc6MzkuMDE0WiIsImlzcyI6Imh0dHBzOi8vaW5zaWdodDEuYXV0aDAuY29tLyIsInN1YiI6ImF1dGgwfDVlYzdiMTBjZTZmNGUwMGJmMjAzNzZjMyIsImF1ZCI6IlNzTENHTmdnMHlBN0I3c0g1ZU5WTUZtQ1A5SlZkZGUzIiwiaWF0IjoxNTkyMjAxNzc2LCJleHAiOjE1OTIyMzc3NzZ9.NfOcvlsmhi6na-fut67v3PCOhku1EFYM9SvUCaqhSrM4D5ItQS9d-4Z_H8n3x5nc6r4rvTG09Pn3Gk-sDdf1137QmSdgzC-HfYYVEmR5xbiLYHPmZZnxL9ItjKNBYYbY9VBWzSpT434Vzz7DnjiJkyos3mDrLMACjDLQQ-6jCVplDXkOh0NHzQBWy6traQhkKkLceeZ3sa9Bc4PjQt18jzS5a50VHjitaczIZje7ILPeKtG0T3sNIrISyl5HZUK_KXmyzTMKw_9I9zAExkT9GGMBwqxfC6XpQ57wIvBZJN-i4uVNSd3Qjtw1yrCpz-vPMvIk7sbODtEAATtPpLapww",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"name\": \"{{editSurveyName}}\",\n  \"description\": \"Changed survey description - {{editSurveyName}}\",\n  \"surveyFrom\": \"2020-02-01T00:00:00Z\",\n  \"surveyTo\": \"2020-02-01T00:00:00Z\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/annotations/:annotationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"organisations",
																":organisationUuid",
																"sites",
																":siteUuid",
																"surveys",
																":surveyUuid",
																"annotations",
																":annotationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid",
																	"value": "{{orgUuid}}",
																	"type": "string"
																},
																{
																	"key": "siteUuid",
																	"value": "{{siteUuid}}",
																	"type": "string"
																},
																{
																	"key": "surveyUuid",
																	"value": "{{surveyUuid}}",
																	"type": "string"
																},
																{
																	"key": "annotationUuid",
																	"value": "{{annotationUuid}}",
																	"type": "string"
																}
															]
														}
													},
													"response": [
														{
															"name": "User is not logged in",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"organisation",
																		":organisationUuid"
																	],
																	"variable": [
																		{
																			"key": "organisationUuid"
																		}
																	]
																}
															},
															"status": "Unauthorized",
															"code": 401,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "When the update org call fails internally",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"organisation",
																		":organisationUuid"
																	],
																	"variable": [
																		{
																			"key": "organisationUuid"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "Successful only when a user has access to org edit perms",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"organisation",
																		":organisationUuid"
																	],
																	"variable": [
																		{
																			"key": "organisationUuid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"organisation\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
														}
													]
												}
											]
										},
										{
											"name": "Remove an annotation (soft delete)",
											"item": [
												{
													"name": "Remove annotation - wrong orgUuid",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 404\", function () {\r",
																	"    pm.response.to.have.status(404);\r",
																	"});\r",
																	"pm.test(\"Response body status is : 'failure'\", function () {\r",
																	"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
																	"});\r",
																	"var errorMessage = \"Resource Not Found\";\r",
																	"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
																	"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
																	"});\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"});\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"Not Found\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/annotations/:annotationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"organisations",
																":organisationUuid",
																"sites",
																":siteUuid",
																"surveys",
																":surveyUuid",
																"annotations",
																":annotationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid",
																	"type": "string",
																	"value": "adasdklsa"
																},
																{
																	"key": "siteUuid",
																	"type": "string",
																	"value": "{{siteUuid}}"
																},
																{
																	"description": "(Required) ",
																	"key": "surveyUuid",
																	"type": "string",
																	"value": "{{surveyUuid}}"
																},
																{
																	"key": "annotationUuid",
																	"type": "string",
																	"value": "{{annotationUuid}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Remove annotation - wrong siteUuid",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 404\", function () {\r",
																	"    pm.response.to.have.status(404);\r",
																	"});\r",
																	"pm.test(\"Response body status is : 'failure'\", function () {\r",
																	"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
																	"});\r",
																	"var errorMessage = \"Resource Not Found\";\r",
																	"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
																	"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
																	"});\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"});\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"Not Found\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/annotations/:annotationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"organisations",
																":organisationUuid",
																"sites",
																":siteUuid",
																"surveys",
																":surveyUuid",
																"annotations",
																":annotationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid",
																	"type": "string",
																	"value": "{{orgUuid}}"
																},
																{
																	"key": "siteUuid",
																	"type": "string",
																	"value": "vnkjwdkds"
																},
																{
																	"description": "(Required) ",
																	"key": "surveyUuid",
																	"type": "string",
																	"value": "{{surveyUuid}}"
																},
																{
																	"key": "annotationUuid",
																	"type": "string",
																	"value": "{{annotationUuid}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Remove annotation - wrong surveyUuid",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 404\", function () {\r",
																	"    pm.response.to.have.status(404);\r",
																	"});\r",
																	"pm.test(\"Response body status is : 'failure'\", function () {\r",
																	"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
																	"});\r",
																	"var errorMessage = \"Resource Not Found\";\r",
																	"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
																	"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
																	"});\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"});\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"Not Found\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/annotations/:annotationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"organisations",
																":organisationUuid",
																"sites",
																":siteUuid",
																"surveys",
																":surveyUuid",
																"annotations",
																":annotationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid",
																	"type": "string",
																	"value": "{{orgUuid}}"
																},
																{
																	"key": "siteUuid",
																	"type": "string",
																	"value": "{{siteUuid}}"
																},
																{
																	"description": "(Required) ",
																	"key": "surveyUuid",
																	"type": "string",
																	"value": "mmvn,vkds"
																},
																{
																	"key": "annotationUuid",
																	"type": "string",
																	"value": "{{annotationUuid}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Remove annotation - wrong annotationUuid",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 404\", function () {\r",
																	"    pm.response.to.have.status(404);\r",
																	"});\r",
																	"pm.test(\"Response body status is : 'failure'\", function () {\r",
																	"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
																	"});\r",
																	"var errorMessage = \"Resource Not Found\";\r",
																	"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
																	"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
																	"});\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"});\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"Not Found\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/annotations/:annotationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"organisations",
																":organisationUuid",
																"sites",
																":siteUuid",
																"surveys",
																":surveyUuid",
																"annotations",
																":annotationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid",
																	"type": "string",
																	"value": "{{orgUuid}}"
																},
																{
																	"key": "siteUuid",
																	"type": "string",
																	"value": "{{siteUuid}}"
																},
																{
																	"description": "(Required) ",
																	"key": "surveyUuid",
																	"type": "string",
																	"value": "{{surveyUuid}}"
																},
																{
																	"key": "annotationUuid",
																	"type": "string",
																	"value": "nca,mnakjs"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Remove an annotation (soft delete)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Response body status is : 'success'\", function () {\r",
																	"    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
																	"});\r",
																	"pm.test(\"Response body has message : 'Deleted Annotation'\", function () {\r",
																	"    pm.expect(pm.response.json().message).to.eql(\"Deleted Annotation\");\r",
																	"});\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"});\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/annotations/:annotationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"organisations",
																":organisationUuid",
																"sites",
																":siteUuid",
																"surveys",
																":surveyUuid",
																"annotations",
																":annotationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid",
																	"value": "{{orgUuid}}",
																	"type": "string"
																},
																{
																	"key": "siteUuid",
																	"value": "{{siteUuid}}",
																	"type": "string"
																},
																{
																	"key": "surveyUuid",
																	"value": "{{surveyUuid}}",
																	"type": "string"
																},
																{
																	"key": "annotationUuid",
																	"value": "{{annotationUuid}}",
																	"type": "string"
																}
															]
														},
														"description": "This is an api reuqest to delete an annotation."
													},
													"response": []
												},
												{
													"name": "Remove annotation - Duplicate request",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 404\", function () {\r",
																	"    pm.response.to.have.status(404);\r",
																	"});\r",
																	"pm.test(\"Response body status is : 'failure'\", function () {\r",
																	"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
																	"});\r",
																	"var errorMessage = \"Resource Not Found\";\r",
																	"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
																	"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
																	"});\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"});\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"Not Found\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/annotations/:annotationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"organisations",
																":organisationUuid",
																"sites",
																":siteUuid",
																"surveys",
																":surveyUuid",
																"annotations",
																":annotationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid",
																	"value": "{{orgUuid}}",
																	"type": "string"
																},
																{
																	"key": "siteUuid",
																	"value": "{{siteUuid}}",
																	"type": "string"
																},
																{
																	"key": "surveyUuid",
																	"value": "{{surveyUuid}}",
																	"type": "string",
																	"description": "(Required) "
																},
																{
																	"key": "annotationUuid",
																	"value": "{{annotationUuid}}",
																	"type": "string"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Remove annotation - Invalid accept header",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 406\", function () {\r",
																	"    pm.response.to.have.status(406);\r",
																	"});\r",
																	"var message = \"Could not satisfy the request Accept header.\";\r",
																	"pm.test(\"Response body message is '\"+message+\"'\", function () {\r",
																	"    pm.expect(pm.response.json().message).to.eql(message);\r",
																	"});\r",
																	"pm.test(\"Response body status is 'failure'\", function () {\r",
																	"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
																	"});\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"});\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"Not Acceptable\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/rss+xml",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/annotations/:annotationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"organisations",
																":organisationUuid",
																"sites",
																":siteUuid",
																"surveys",
																":surveyUuid",
																"annotations",
																":annotationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid",
																	"value": "{{orgUuid}}",
																	"type": "string"
																},
																{
																	"key": "siteUuid",
																	"value": "{{siteUuid}}",
																	"type": "string"
																},
																{
																	"key": "surveyUuid",
																	"value": "{{surveyUuid}}",
																	"type": "string",
																	"description": "(Required) "
																},
																{
																	"key": "annotationUuid",
																	"value": "{{annotationUuid}}",
																	"type": "string"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Remove annotation - Invalid auth token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 401\", function () {\r",
																	"    pm.response.to.have.status(401);\r",
																	"});\r",
																	"pm.test(\"Status code name has Unauthorized\", function () {\r",
																	"    pm.response.to.have.status(\"Unauthorized\");\r",
																	"});\r",
																	"pm.test(\"response body status value is 'forbidden'\", function () {\r",
																	"    pm.expect(pm.response.json().status).to.eql(\"forbidden\");\r",
																	"});\r",
																	"var errMessage = \"Log in to do this action\";\r",
																	"pm.test(\"response body message is '\"+errMessage+\"'\", function () {\r",
																	"    pm.expect(pm.response.json().message).to.eql(errMessage);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1qTkZRVUkyT1RRM01qTXpOa1l4TmpCQ04wSTVNa0kxUmpFNVFVSkVOelkzTnpnNFJqTXpRZyJ9.eyJodHRwczovL2V4YW1wbGUuY29tL3JvbGVzIjpbInVzZXIiXSwiaHR0cHM6Ly9kamFuZ28td2ViYXBwL3JvbGUiOiJ1c2VyIiwibmlja25hbWUiOiJwYW5rYWouZGV2cmFuaSIsIm5hbWUiOiJwYW5rYWouZGV2cmFuaUBhc3RlcmlhLmNvLmluIiwicGljdHVyZSI6Imh0dHBzOi8vcy5ncmF2YXRhci5jb20vYXZhdGFyLzRjN2YzYzM0OWNkYzkzZmMxODVmMTMzMThhZjIzMjcxP3M9NDgwJnI9cGcmZD1odHRwcyUzQSUyRiUyRmNkbi5hdXRoMC5jb20lMkZhdmF0YXJzJTJGcGEucG5nIiwidXBkYXRlZF9hdCI6IjIwMjAtMDYtMTJUMDc6Mzc6MzkuMDE0WiIsImlzcyI6Imh0dHBzOi8vaW5zaWdodDEuYXV0aDAuY29tLyIsInN1YiI6ImF1dGgwfDVlYzdiMTBjZTZmNGUwMGJmMjAzNzZjMyIsImF1ZCI6IlNzTENHTmdnMHlBN0I3c0g1ZU5WTUZtQ1A5SlZkZGUzIiwiaWF0IjoxNTkyMjAxNzc2LCJleHAiOjE1OTIyMzc3NzZ9.NfOcvlsmhi6na-fut67v3PCOhku1EFYM9SvUCaqhSrM4D5ItQS9d-4Z_H8n3x5nc6r4rvTG09Pn3Gk-sDdf1137QmSdgzC-HfYYVEmR5xbiLYHPmZZnxL9ItjKNBYYbY9VBWzSpT434Vzz7DnjiJkyos3mDrLMACjDLQQ-6jCVplDXkOh0NHzQBWy6traQhkKkLceeZ3sa9Bc4PjQt18jzS5a50VHjitaczIZje7ILPeKtG0T3sNIrISyl5HZUK_KXmyzTMKw_9I9zAExkT9GGMBwqxfC6XpQ57wIvBZJN-i4uVNSd3Qjtw1yrCpz-vPMvIk7sbODtEAATtPwwapww",
																	"type": "string"
																}
															]
														},
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/annotations/:annotationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"organisations",
																":organisationUuid",
																"sites",
																":siteUuid",
																"surveys",
																":surveyUuid",
																"annotations",
																":annotationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid",
																	"value": "{{orgUuid}}",
																	"type": "string"
																},
																{
																	"key": "siteUuid",
																	"value": "{{siteUuid}}",
																	"type": "string"
																},
																{
																	"key": "surveyUuid",
																	"value": "{{surveyUuid}}",
																	"type": "string",
																	"description": "(Required) "
																},
																{
																	"key": "annotationUuid",
																	"value": "{{annotationUuid}}",
																	"type": "string"
																}
															]
														}
													},
													"response": []
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Raster",
					"item": [
						{
							"name": "A user's API to create a raster(with sufficient perms)",
							"item": [
								{
									"name": "A user's API to create a raster(with sufficient perms)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"rasterName\",\"rasterName\"+Math.floor((Math.random() * 10000000000) + 1));\r",
													"//types = data.rasterType;\r",
													"types = \"dtm\";\r",
													"pm.environment.set(\"rasterType\", types);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response body status is : 'success'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
													"});\r",
													"pm.test(\"Response Body message is 'Raster Created'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(\"Raster Created\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\")  ;\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response body raster name is equal to : '\"+pm.environment.get(\"rasterName\")+\"'\", function () {\r",
													"    pm.expect(pm.response.json().data.raster.name).to.eql(pm.environment.get(\"rasterName\"));\r",
													"});\r",
													"pm.test(\"Response body should have organisation uuid as expected.\", function () {\r",
													"    pm.expect(pm.response.json().data.raster.refUuid.organisationUuid).to.eql(pm.environment.get(\"orgUuid\"));\r",
													"});\r",
													"pm.test(\"Response body should have site uuid as expected.\", function () {\r",
													"    pm.expect(pm.response.json().data.raster.refUuid.siteUuid).to.eql(pm.environment.get(\"siteUuid\"));\r",
													"});\r",
													"pm.test(\"Response body should have survey uuid as expected.\", function () {\r",
													"    pm.expect(pm.response.json().data.raster.refUuid.surveyUuid).to.eql(pm.environment.get(\"surveyUuid\"));\r",
													"});\r",
													"pm.environment.set(\"rasterUuid\", pm.response.json().data.raster.uuid);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"name\": \"{{rasterName}}\",\n \"type\":\"{{rasterType}}\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/rasters",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"rasters"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												},
												{
													"key": "surveyUuid",
													"value": "{{surveyUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": [
										{
											"name": "Successful only when a user with sufficient permissions calls the API",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"rasterType\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid/raster",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"survey",
														":surveyUuid",
														"raster"
													],
													"variable": [
														{
															"key": "surveyUuid"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"raster\": {\n   \"name\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"rasterType\": \"<string>\",\n   \"geotiff\": {\n    \"uuid\": \"<string>\",\n    \"downloadURL\": \"<string>\",\n    \"cdnToken\": \"<string>\",\n    \"size\": \"<number>\",\n    \"bandsCount\": \"<number>\",\n    \"bandsInfo\": [\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     },\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     }\n    ],\n    \"bounds\": {\n     \"ne\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"nw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"se\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"sw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     }\n    },\n    \"outline\": {\n     \"type\": \"<string>\",\n     \"geometry\": {\n      \"type\": \"<string>\",\n      \"coordinates\": [\n       [\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ]\n       ]\n      ]\n     },\n     \"properties\": \"<object>\"\n    }\n   },\n   \"cogeotiff\": {\n    \"uuid\": \"<string>\",\n    \"downloadURL\": \"<string>\",\n    \"cdnToken\": \"<string>\",\n    \"size\": \"<number>\",\n    \"bandsCount\": \"<number>\",\n    \"bandsInfo\": [\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     },\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     }\n    ],\n    \"bounds\": {\n     \"ne\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"nw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"se\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"sw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     }\n    },\n    \"outline\": {\n     \"type\": \"<string>\",\n     \"geometry\": {\n      \"type\": \"<string>\",\n      \"coordinates\": [\n       [\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ]\n       ]\n      ]\n     },\n     \"properties\": \"<object>\"\n    },\n    \"minZoom\": \"<number>\",\n    \"maxZoom\": \"<number>\"\n   },\n   \"maptiles\": {\n    \"baseURL\": \"<string>\",\n    \"cdnToken\": \"<string>\",\n    \"bounds\": {\n     \"ne\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"nw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"se\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"sw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     }\n    },\n    \"minZoom\": \"<number>\",\n    \"maxZoom\": \"<number>\"\n   },\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   },\n   \"fileUploadCreds\": {\n    \"url\": \"<string>\",\n    \"method\": \"<string>\",\n    \"headers\": [\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     },\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     }\n    ],\n    \"bodyParams\": [\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     },\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     }\n    ]\n   }\n  }\n }\n}"
										},
										{
											"name": "User is not logged in",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"rasterType\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid/raster",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"survey",
														":surveyUuid",
														"raster"
													],
													"variable": [
														{
															"key": "surveyUuid"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "When the create raster call fails internally",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"rasterType\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid/raster",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"survey",
														":surveyUuid",
														"raster"
													],
													"variable": [
														{
															"key": "surveyUuid"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Create raster - Wrong raster types",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"wrongRasterName\",\"wrongRasterName\"+Math.floor((Math.random() * 10000000000) + 1));\r",
													"//types = data.wrongRasterType;\r",
													"types = \"DSM\";\r",
													"pm.environment.set(\"wrongRasterType\", types);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"pm.test(\"Response body status is : 'failure'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
													"});\r",
													"var message = \"Validation Error\";\r",
													"pm.test(\"Response Body message is '\"+message+\"'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(message);\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\")  ;\r",
													"});\r",
													"var errorMessage = \"'\"+pm.environment.get(\"wrongRasterType\")+\"' is not a choice. Choices are ['orthophoto', 'rgb', 'dsm', 'dtm', 'ndvi', 'osavi', 'multispectral', 'maptiles'].\";\r",
													"pm.test(\"Response body should have organisation uuid as expected.\", function () {\r",
													"    pm.expect(pm.response.json().validation_errors.type[0][0]).to.eql(errorMessage);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"name\": \"{{rasterName}}\",\n \"type\":\"{{wrongRasterType}}\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/rasters",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"rasters"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												},
												{
													"key": "surveyUuid",
													"value": "{{surveyUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": [
										{
											"name": "User is not logged in",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"rasterType\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid/raster",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"survey",
														":surveyUuid",
														"raster"
													],
													"variable": [
														{
															"key": "surveyUuid"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "When the create raster call fails internally",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"rasterType\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid/raster",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"survey",
														":surveyUuid",
														"raster"
													],
													"variable": [
														{
															"key": "surveyUuid"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Successful only when a user with sufficient permissions calls the API",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"rasterType\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid/raster",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"survey",
														":surveyUuid",
														"raster"
													],
													"variable": [
														{
															"key": "surveyUuid"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"raster\": {\n   \"name\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"rasterType\": \"<string>\",\n   \"geotiff\": {\n    \"uuid\": \"<string>\",\n    \"downloadURL\": \"<string>\",\n    \"cdnToken\": \"<string>\",\n    \"size\": \"<number>\",\n    \"bandsCount\": \"<number>\",\n    \"bandsInfo\": [\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     },\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     }\n    ],\n    \"bounds\": {\n     \"ne\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"nw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"se\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"sw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     }\n    },\n    \"outline\": {\n     \"type\": \"<string>\",\n     \"geometry\": {\n      \"type\": \"<string>\",\n      \"coordinates\": [\n       [\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ]\n       ]\n      ]\n     },\n     \"properties\": \"<object>\"\n    }\n   },\n   \"cogeotiff\": {\n    \"uuid\": \"<string>\",\n    \"downloadURL\": \"<string>\",\n    \"cdnToken\": \"<string>\",\n    \"size\": \"<number>\",\n    \"bandsCount\": \"<number>\",\n    \"bandsInfo\": [\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     },\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     }\n    ],\n    \"bounds\": {\n     \"ne\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"nw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"se\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"sw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     }\n    },\n    \"outline\": {\n     \"type\": \"<string>\",\n     \"geometry\": {\n      \"type\": \"<string>\",\n      \"coordinates\": [\n       [\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ]\n       ]\n      ]\n     },\n     \"properties\": \"<object>\"\n    },\n    \"minZoom\": \"<number>\",\n    \"maxZoom\": \"<number>\"\n   },\n   \"maptiles\": {\n    \"baseURL\": \"<string>\",\n    \"cdnToken\": \"<string>\",\n    \"bounds\": {\n     \"ne\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"nw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"se\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"sw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     }\n    },\n    \"minZoom\": \"<number>\",\n    \"maxZoom\": \"<number>\"\n   },\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   },\n   \"fileUploadCreds\": {\n    \"url\": \"<string>\",\n    \"method\": \"<string>\",\n    \"headers\": [\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     },\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     }\n    ],\n    \"bodyParams\": [\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     },\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     }\n    ]\n   }\n  }\n }\n}"
										}
									]
								},
								{
									"name": "Create raster - Create duplicate record",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response body status is : 'success'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
													"});\r",
													"pm.test(\"Response Body message is 'Raster Created'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(\"Raster Created\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\")  ;\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response body raster name is equal to : '\"+pm.environment.get(\"rasterName\")+\"'\", function () {\r",
													"    pm.expect(pm.response.json().data.raster.name).to.eql(pm.environment.get(\"rasterName\"));\r",
													"});\r",
													"pm.test(\"Response body should have organisation uuid as expected.\", function () {\r",
													"    pm.expect(pm.response.json().data.raster.refUuid.organisationUuid).to.eql(pm.environment.get(\"orgUuid\"));\r",
													"});\r",
													"pm.test(\"Response body should have site uuid as expected.\", function () {\r",
													"    pm.expect(pm.response.json().data.raster.refUuid.siteUuid).to.eql(pm.environment.get(\"siteUuid\"));\r",
													"});\r",
													"pm.test(\"Response body should have survey uuid as expected.\", function () {\r",
													"    pm.expect(pm.response.json().data.raster.refUuid.surveyUuid).to.eql(pm.environment.get(\"surveyUuid\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"name\": \"{{rasterName}}\",\n \"type\": \"maptiles\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/rasters",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"rasters"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												},
												{
													"key": "surveyUuid",
													"value": "{{surveyUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": [
										{
											"name": "Successful only when a user with sufficient permissions calls the API",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"rasterType\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid/raster",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"survey",
														":surveyUuid",
														"raster"
													],
													"variable": [
														{
															"key": "surveyUuid"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"raster\": {\n   \"name\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"rasterType\": \"<string>\",\n   \"geotiff\": {\n    \"uuid\": \"<string>\",\n    \"downloadURL\": \"<string>\",\n    \"cdnToken\": \"<string>\",\n    \"size\": \"<number>\",\n    \"bandsCount\": \"<number>\",\n    \"bandsInfo\": [\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     },\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     }\n    ],\n    \"bounds\": {\n     \"ne\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"nw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"se\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"sw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     }\n    },\n    \"outline\": {\n     \"type\": \"<string>\",\n     \"geometry\": {\n      \"type\": \"<string>\",\n      \"coordinates\": [\n       [\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ]\n       ]\n      ]\n     },\n     \"properties\": \"<object>\"\n    }\n   },\n   \"cogeotiff\": {\n    \"uuid\": \"<string>\",\n    \"downloadURL\": \"<string>\",\n    \"cdnToken\": \"<string>\",\n    \"size\": \"<number>\",\n    \"bandsCount\": \"<number>\",\n    \"bandsInfo\": [\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     },\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     }\n    ],\n    \"bounds\": {\n     \"ne\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"nw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"se\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"sw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     }\n    },\n    \"outline\": {\n     \"type\": \"<string>\",\n     \"geometry\": {\n      \"type\": \"<string>\",\n      \"coordinates\": [\n       [\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ]\n       ]\n      ]\n     },\n     \"properties\": \"<object>\"\n    },\n    \"minZoom\": \"<number>\",\n    \"maxZoom\": \"<number>\"\n   },\n   \"maptiles\": {\n    \"baseURL\": \"<string>\",\n    \"cdnToken\": \"<string>\",\n    \"bounds\": {\n     \"ne\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"nw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"se\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"sw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     }\n    },\n    \"minZoom\": \"<number>\",\n    \"maxZoom\": \"<number>\"\n   },\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   },\n   \"fileUploadCreds\": {\n    \"url\": \"<string>\",\n    \"method\": \"<string>\",\n    \"headers\": [\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     },\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     }\n    ],\n    \"bodyParams\": [\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     },\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     }\n    ]\n   }\n  }\n }\n}"
										},
										{
											"name": "When the create raster call fails internally",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"rasterType\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid/raster",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"survey",
														":surveyUuid",
														"raster"
													],
													"variable": [
														{
															"key": "surveyUuid"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "User is not logged in",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"rasterType\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid/raster",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"survey",
														":surveyUuid",
														"raster"
													],
													"variable": [
														{
															"key": "surveyUuid"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Create raster - Wrong orgUuid",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"pm.test(\"Response body has status as 'failure'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"var errorMessage = \"Resource Not Found\";\r",
													"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"name\": \"{{rasterName}}\",\n \"type\": \"maptiles\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/rasters",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"rasters"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "jahskdjhask",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												},
												{
													"key": "surveyUuid",
													"value": "{{surveyUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": [
										{
											"name": "When the create raster call fails internally",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"rasterType\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid/raster",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"survey",
														":surveyUuid",
														"raster"
													],
													"variable": [
														{
															"key": "surveyUuid"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "User is not logged in",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"rasterType\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid/raster",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"survey",
														":surveyUuid",
														"raster"
													],
													"variable": [
														{
															"key": "surveyUuid"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Successful only when a user with sufficient permissions calls the API",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"rasterType\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid/raster",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"survey",
														":surveyUuid",
														"raster"
													],
													"variable": [
														{
															"key": "surveyUuid"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"raster\": {\n   \"name\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"rasterType\": \"<string>\",\n   \"geotiff\": {\n    \"uuid\": \"<string>\",\n    \"downloadURL\": \"<string>\",\n    \"cdnToken\": \"<string>\",\n    \"size\": \"<number>\",\n    \"bandsCount\": \"<number>\",\n    \"bandsInfo\": [\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     },\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     }\n    ],\n    \"bounds\": {\n     \"ne\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"nw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"se\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"sw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     }\n    },\n    \"outline\": {\n     \"type\": \"<string>\",\n     \"geometry\": {\n      \"type\": \"<string>\",\n      \"coordinates\": [\n       [\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ]\n       ]\n      ]\n     },\n     \"properties\": \"<object>\"\n    }\n   },\n   \"cogeotiff\": {\n    \"uuid\": \"<string>\",\n    \"downloadURL\": \"<string>\",\n    \"cdnToken\": \"<string>\",\n    \"size\": \"<number>\",\n    \"bandsCount\": \"<number>\",\n    \"bandsInfo\": [\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     },\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     }\n    ],\n    \"bounds\": {\n     \"ne\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"nw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"se\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"sw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     }\n    },\n    \"outline\": {\n     \"type\": \"<string>\",\n     \"geometry\": {\n      \"type\": \"<string>\",\n      \"coordinates\": [\n       [\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ]\n       ]\n      ]\n     },\n     \"properties\": \"<object>\"\n    },\n    \"minZoom\": \"<number>\",\n    \"maxZoom\": \"<number>\"\n   },\n   \"maptiles\": {\n    \"baseURL\": \"<string>\",\n    \"cdnToken\": \"<string>\",\n    \"bounds\": {\n     \"ne\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"nw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"se\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"sw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     }\n    },\n    \"minZoom\": \"<number>\",\n    \"maxZoom\": \"<number>\"\n   },\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   },\n   \"fileUploadCreds\": {\n    \"url\": \"<string>\",\n    \"method\": \"<string>\",\n    \"headers\": [\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     },\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     }\n    ],\n    \"bodyParams\": [\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     },\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     }\n    ]\n   }\n  }\n }\n}"
										}
									]
								},
								{
									"name": "Create raster - Wrong siteUuid",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"pm.test(\"Response body has status as 'failure'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"var errorMessage = \"Resource Not Found\";\r",
													"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"name\": \"{{rasterName}}\",\n \"type\": \"maptiles\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/rasters",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"rasters"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"type": "string",
													"value": "{{orgUuid}}"
												},
												{
													"key": "siteUuid",
													"type": "string",
													"value": "sdklajdlak"
												},
												{
													"key": "surveyUuid",
													"type": "string",
													"value": "{{surveyUuid}}"
												}
											]
										}
									},
									"response": [
										{
											"name": "User is not logged in",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"rasterType\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid/raster",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"survey",
														":surveyUuid",
														"raster"
													],
													"variable": [
														{
															"key": "surveyUuid"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "When the create raster call fails internally",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"rasterType\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid/raster",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"survey",
														":surveyUuid",
														"raster"
													],
													"variable": [
														{
															"key": "surveyUuid"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Successful only when a user with sufficient permissions calls the API",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"rasterType\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid/raster",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"survey",
														":surveyUuid",
														"raster"
													],
													"variable": [
														{
															"key": "surveyUuid"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"raster\": {\n   \"name\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"rasterType\": \"<string>\",\n   \"geotiff\": {\n    \"uuid\": \"<string>\",\n    \"downloadURL\": \"<string>\",\n    \"cdnToken\": \"<string>\",\n    \"size\": \"<number>\",\n    \"bandsCount\": \"<number>\",\n    \"bandsInfo\": [\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     },\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     }\n    ],\n    \"bounds\": {\n     \"ne\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"nw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"se\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"sw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     }\n    },\n    \"outline\": {\n     \"type\": \"<string>\",\n     \"geometry\": {\n      \"type\": \"<string>\",\n      \"coordinates\": [\n       [\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ]\n       ]\n      ]\n     },\n     \"properties\": \"<object>\"\n    }\n   },\n   \"cogeotiff\": {\n    \"uuid\": \"<string>\",\n    \"downloadURL\": \"<string>\",\n    \"cdnToken\": \"<string>\",\n    \"size\": \"<number>\",\n    \"bandsCount\": \"<number>\",\n    \"bandsInfo\": [\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     },\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     }\n    ],\n    \"bounds\": {\n     \"ne\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"nw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"se\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"sw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     }\n    },\n    \"outline\": {\n     \"type\": \"<string>\",\n     \"geometry\": {\n      \"type\": \"<string>\",\n      \"coordinates\": [\n       [\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ]\n       ]\n      ]\n     },\n     \"properties\": \"<object>\"\n    },\n    \"minZoom\": \"<number>\",\n    \"maxZoom\": \"<number>\"\n   },\n   \"maptiles\": {\n    \"baseURL\": \"<string>\",\n    \"cdnToken\": \"<string>\",\n    \"bounds\": {\n     \"ne\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"nw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"se\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"sw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     }\n    },\n    \"minZoom\": \"<number>\",\n    \"maxZoom\": \"<number>\"\n   },\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   },\n   \"fileUploadCreds\": {\n    \"url\": \"<string>\",\n    \"method\": \"<string>\",\n    \"headers\": [\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     },\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     }\n    ],\n    \"bodyParams\": [\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     },\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     }\n    ]\n   }\n  }\n }\n}"
										}
									]
								},
								{
									"name": "Create raster - Wrong surveyUuid",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"pm.test(\"Response body has status as 'failure'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"var errorMessage = \"Resource Not Found\";\r",
													"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"name\": \"{{rasterName}}\",\n \"type\": \"maptiles\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/rasters",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"rasters"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"type": "string",
													"value": "{{orgUuid}}"
												},
												{
													"key": "siteUuid",
													"type": "string",
													"value": "{{siteUuid}}"
												},
												{
													"key": "surveyUuid",
													"type": "string",
													"value": "kjashdkjsand,mn"
												}
											]
										}
									},
									"response": [
										{
											"name": "When the create raster call fails internally",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"rasterType\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid/raster",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"survey",
														":surveyUuid",
														"raster"
													],
													"variable": [
														{
															"key": "surveyUuid"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "User is not logged in",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"rasterType\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid/raster",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"survey",
														":surveyUuid",
														"raster"
													],
													"variable": [
														{
															"key": "surveyUuid"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Successful only when a user with sufficient permissions calls the API",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"rasterType\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid/raster",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"survey",
														":surveyUuid",
														"raster"
													],
													"variable": [
														{
															"key": "surveyUuid"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"raster\": {\n   \"name\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"rasterType\": \"<string>\",\n   \"geotiff\": {\n    \"uuid\": \"<string>\",\n    \"downloadURL\": \"<string>\",\n    \"cdnToken\": \"<string>\",\n    \"size\": \"<number>\",\n    \"bandsCount\": \"<number>\",\n    \"bandsInfo\": [\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     },\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     }\n    ],\n    \"bounds\": {\n     \"ne\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"nw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"se\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"sw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     }\n    },\n    \"outline\": {\n     \"type\": \"<string>\",\n     \"geometry\": {\n      \"type\": \"<string>\",\n      \"coordinates\": [\n       [\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ]\n       ]\n      ]\n     },\n     \"properties\": \"<object>\"\n    }\n   },\n   \"cogeotiff\": {\n    \"uuid\": \"<string>\",\n    \"downloadURL\": \"<string>\",\n    \"cdnToken\": \"<string>\",\n    \"size\": \"<number>\",\n    \"bandsCount\": \"<number>\",\n    \"bandsInfo\": [\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     },\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     }\n    ],\n    \"bounds\": {\n     \"ne\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"nw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"se\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"sw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     }\n    },\n    \"outline\": {\n     \"type\": \"<string>\",\n     \"geometry\": {\n      \"type\": \"<string>\",\n      \"coordinates\": [\n       [\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ]\n       ]\n      ]\n     },\n     \"properties\": \"<object>\"\n    },\n    \"minZoom\": \"<number>\",\n    \"maxZoom\": \"<number>\"\n   },\n   \"maptiles\": {\n    \"baseURL\": \"<string>\",\n    \"cdnToken\": \"<string>\",\n    \"bounds\": {\n     \"ne\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"nw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"se\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"sw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     }\n    },\n    \"minZoom\": \"<number>\",\n    \"maxZoom\": \"<number>\"\n   },\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   },\n   \"fileUploadCreds\": {\n    \"url\": \"<string>\",\n    \"method\": \"<string>\",\n    \"headers\": [\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     },\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     }\n    ],\n    \"bodyParams\": [\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     },\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     }\n    ]\n   }\n  }\n }\n}"
										}
									]
								},
								{
									"name": "Create raster - without body",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Response body status is 'failure'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Response body message is 'Validation Error'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(\"Validation Error\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\")  ;\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"var errorMessage = \"field is required.\";\r",
													"pm.test(\"Response body validation error message is '\"+errorMessage+\"' \", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.validation_errors.type[0][0]).to.eql(errorMessage);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/rasters",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"rasters"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												},
												{
													"key": "surveyUuid",
													"value": "{{surveyUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": [
										{
											"name": "User is not logged in",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"rasterType\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid/raster",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"survey",
														":surveyUuid",
														"raster"
													],
													"variable": [
														{
															"key": "surveyUuid"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "When the create raster call fails internally",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"rasterType\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid/raster",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"survey",
														":surveyUuid",
														"raster"
													],
													"variable": [
														{
															"key": "surveyUuid"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Successful only when a user with sufficient permissions calls the API",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"rasterType\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid/raster",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"survey",
														":surveyUuid",
														"raster"
													],
													"variable": [
														{
															"key": "surveyUuid"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"raster\": {\n   \"name\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"rasterType\": \"<string>\",\n   \"geotiff\": {\n    \"uuid\": \"<string>\",\n    \"downloadURL\": \"<string>\",\n    \"cdnToken\": \"<string>\",\n    \"size\": \"<number>\",\n    \"bandsCount\": \"<number>\",\n    \"bandsInfo\": [\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     },\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     }\n    ],\n    \"bounds\": {\n     \"ne\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"nw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"se\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"sw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     }\n    },\n    \"outline\": {\n     \"type\": \"<string>\",\n     \"geometry\": {\n      \"type\": \"<string>\",\n      \"coordinates\": [\n       [\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ]\n       ]\n      ]\n     },\n     \"properties\": \"<object>\"\n    }\n   },\n   \"cogeotiff\": {\n    \"uuid\": \"<string>\",\n    \"downloadURL\": \"<string>\",\n    \"cdnToken\": \"<string>\",\n    \"size\": \"<number>\",\n    \"bandsCount\": \"<number>\",\n    \"bandsInfo\": [\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     },\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     }\n    ],\n    \"bounds\": {\n     \"ne\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"nw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"se\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"sw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     }\n    },\n    \"outline\": {\n     \"type\": \"<string>\",\n     \"geometry\": {\n      \"type\": \"<string>\",\n      \"coordinates\": [\n       [\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ]\n       ]\n      ]\n     },\n     \"properties\": \"<object>\"\n    },\n    \"minZoom\": \"<number>\",\n    \"maxZoom\": \"<number>\"\n   },\n   \"maptiles\": {\n    \"baseURL\": \"<string>\",\n    \"cdnToken\": \"<string>\",\n    \"bounds\": {\n     \"ne\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"nw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"se\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"sw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     }\n    },\n    \"minZoom\": \"<number>\",\n    \"maxZoom\": \"<number>\"\n   },\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   },\n   \"fileUploadCreds\": {\n    \"url\": \"<string>\",\n    \"method\": \"<string>\",\n    \"headers\": [\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     },\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     }\n    ],\n    \"bodyParams\": [\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     },\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     }\n    ]\n   }\n  }\n }\n}"
										}
									]
								},
								{
									"name": "Create raster - adding rasterType as property",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Response body status is 'failure'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Response body message is 'Validation Error'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(\"Validation Error\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\")  ;\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"var errorMessage = \"field is required.\";\r",
													"pm.test(\"Response body validation error message is '\"+errorMessage+\"' \", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.validation_errors.type[0][0]).to.eql(errorMessage);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"name\": \"{{rasterName}}+wrong propertyname\",\n \"rastertype\": \"maptiles\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/rasters",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"rasters"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"type": "string",
													"value": "{{orgUuid}}"
												},
												{
													"key": "siteUuid",
													"type": "string",
													"value": "{{siteUuid}}"
												},
												{
													"key": "surveyUuid",
													"type": "string",
													"value": "{{surveyUuid}}"
												}
											]
										}
									},
									"response": [
										{
											"name": "When the create raster call fails internally",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"rasterType\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid/raster",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"survey",
														":surveyUuid",
														"raster"
													],
													"variable": [
														{
															"key": "surveyUuid"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "User is not logged in",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"rasterType\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid/raster",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"survey",
														":surveyUuid",
														"raster"
													],
													"variable": [
														{
															"key": "surveyUuid"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Successful only when a user with sufficient permissions calls the API",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"rasterType\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid/raster",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"survey",
														":surveyUuid",
														"raster"
													],
													"variable": [
														{
															"key": "surveyUuid"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"raster\": {\n   \"name\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"rasterType\": \"<string>\",\n   \"geotiff\": {\n    \"uuid\": \"<string>\",\n    \"downloadURL\": \"<string>\",\n    \"cdnToken\": \"<string>\",\n    \"size\": \"<number>\",\n    \"bandsCount\": \"<number>\",\n    \"bandsInfo\": [\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     },\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     }\n    ],\n    \"bounds\": {\n     \"ne\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"nw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"se\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"sw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     }\n    },\n    \"outline\": {\n     \"type\": \"<string>\",\n     \"geometry\": {\n      \"type\": \"<string>\",\n      \"coordinates\": [\n       [\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ]\n       ]\n      ]\n     },\n     \"properties\": \"<object>\"\n    }\n   },\n   \"cogeotiff\": {\n    \"uuid\": \"<string>\",\n    \"downloadURL\": \"<string>\",\n    \"cdnToken\": \"<string>\",\n    \"size\": \"<number>\",\n    \"bandsCount\": \"<number>\",\n    \"bandsInfo\": [\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     },\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     }\n    ],\n    \"bounds\": {\n     \"ne\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"nw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"se\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"sw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     }\n    },\n    \"outline\": {\n     \"type\": \"<string>\",\n     \"geometry\": {\n      \"type\": \"<string>\",\n      \"coordinates\": [\n       [\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ]\n       ]\n      ]\n     },\n     \"properties\": \"<object>\"\n    },\n    \"minZoom\": \"<number>\",\n    \"maxZoom\": \"<number>\"\n   },\n   \"maptiles\": {\n    \"baseURL\": \"<string>\",\n    \"cdnToken\": \"<string>\",\n    \"bounds\": {\n     \"ne\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"nw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"se\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"sw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     }\n    },\n    \"minZoom\": \"<number>\",\n    \"maxZoom\": \"<number>\"\n   },\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   },\n   \"fileUploadCreds\": {\n    \"url\": \"<string>\",\n    \"method\": \"<string>\",\n    \"headers\": [\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     },\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     }\n    ],\n    \"bodyParams\": [\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     },\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     }\n    ]\n   }\n  }\n }\n}"
										}
									]
								},
								{
									"name": "Create raster - Create without raster name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response body status is : 'success'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
													"});\r",
													"pm.test(\"Response Body message is 'Raster Created'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(\"Raster Created\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\")  ;\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response body should have organisation uuid as expected.\", function () {\r",
													"    pm.expect(pm.response.json().data.raster.refUuid.organisationUuid).to.eql(pm.environment.get(\"orgUuid\"));\r",
													"});\r",
													"pm.test(\"Response body should have site uuid as expected.\", function () {\r",
													"    pm.expect(pm.response.json().data.raster.refUuid.siteUuid).to.eql(pm.environment.get(\"siteUuid\"));\r",
													"});\r",
													"pm.test(\"Response body should have survey uuid as expected.\", function () {\r",
													"    pm.expect(pm.response.json().data.raster.refUuid.surveyUuid).to.eql(pm.environment.get(\"surveyUuid\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"type\": \"maptiles\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/rasters",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"rasters"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												},
												{
													"key": "surveyUuid",
													"value": "{{surveyUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": [
										{
											"name": "User is not logged in",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"rasterType\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid/raster",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"survey",
														":surveyUuid",
														"raster"
													],
													"variable": [
														{
															"key": "surveyUuid"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Successful only when a user with sufficient permissions calls the API",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"rasterType\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid/raster",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"survey",
														":surveyUuid",
														"raster"
													],
													"variable": [
														{
															"key": "surveyUuid"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"raster\": {\n   \"name\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"rasterType\": \"<string>\",\n   \"geotiff\": {\n    \"uuid\": \"<string>\",\n    \"downloadURL\": \"<string>\",\n    \"cdnToken\": \"<string>\",\n    \"size\": \"<number>\",\n    \"bandsCount\": \"<number>\",\n    \"bandsInfo\": [\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     },\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     }\n    ],\n    \"bounds\": {\n     \"ne\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"nw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"se\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"sw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     }\n    },\n    \"outline\": {\n     \"type\": \"<string>\",\n     \"geometry\": {\n      \"type\": \"<string>\",\n      \"coordinates\": [\n       [\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ]\n       ]\n      ]\n     },\n     \"properties\": \"<object>\"\n    }\n   },\n   \"cogeotiff\": {\n    \"uuid\": \"<string>\",\n    \"downloadURL\": \"<string>\",\n    \"cdnToken\": \"<string>\",\n    \"size\": \"<number>\",\n    \"bandsCount\": \"<number>\",\n    \"bandsInfo\": [\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     },\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     }\n    ],\n    \"bounds\": {\n     \"ne\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"nw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"se\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"sw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     }\n    },\n    \"outline\": {\n     \"type\": \"<string>\",\n     \"geometry\": {\n      \"type\": \"<string>\",\n      \"coordinates\": [\n       [\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ]\n       ]\n      ]\n     },\n     \"properties\": \"<object>\"\n    },\n    \"minZoom\": \"<number>\",\n    \"maxZoom\": \"<number>\"\n   },\n   \"maptiles\": {\n    \"baseURL\": \"<string>\",\n    \"cdnToken\": \"<string>\",\n    \"bounds\": {\n     \"ne\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"nw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"se\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"sw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     }\n    },\n    \"minZoom\": \"<number>\",\n    \"maxZoom\": \"<number>\"\n   },\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   },\n   \"fileUploadCreds\": {\n    \"url\": \"<string>\",\n    \"method\": \"<string>\",\n    \"headers\": [\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     },\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     }\n    ],\n    \"bodyParams\": [\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     },\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     }\n    ]\n   }\n  }\n }\n}"
										},
										{
											"name": "When the create raster call fails internally",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"rasterType\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid/raster",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"survey",
														":surveyUuid",
														"raster"
													],
													"variable": [
														{
															"key": "surveyUuid"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Create raster - Invalid Type for raster RGB",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"invalidType\",\"RGB\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Response body status is : 'failure'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Response Body message is 'Validation Error'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\")  ;\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"var errorMessage = \"'\"+pm.environment.get(\"invalidType\")+\"' is not a choice. Choices are ['orthophoto', 'rgb', 'dsm', 'dtm', 'ndvi', 'osavi', 'multispectral', 'maptiles'].\";\r",
													"pm.test(\"Response body raster name is equal to : '\"+pm.environment.get(\"rasterName\")+\"'\", function () {\r",
													"    pm.expect(pm.response.json().validation_errors.type[0][0]).to.eql(errorMessage);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"name\": \"{{rasterName}}\",\n \"type\": \"{{invalidType}}\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/rasters",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"rasters"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												},
												{
													"key": "surveyUuid",
													"value": "{{surveyUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": [
										{
											"name": "Successful only when a user with sufficient permissions calls the API",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"rasterType\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid/raster",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"survey",
														":surveyUuid",
														"raster"
													],
													"variable": [
														{
															"key": "surveyUuid"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"raster\": {\n   \"name\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"rasterType\": \"<string>\",\n   \"geotiff\": {\n    \"uuid\": \"<string>\",\n    \"downloadURL\": \"<string>\",\n    \"cdnToken\": \"<string>\",\n    \"size\": \"<number>\",\n    \"bandsCount\": \"<number>\",\n    \"bandsInfo\": [\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     },\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     }\n    ],\n    \"bounds\": {\n     \"ne\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"nw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"se\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"sw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     }\n    },\n    \"outline\": {\n     \"type\": \"<string>\",\n     \"geometry\": {\n      \"type\": \"<string>\",\n      \"coordinates\": [\n       [\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ]\n       ]\n      ]\n     },\n     \"properties\": \"<object>\"\n    }\n   },\n   \"cogeotiff\": {\n    \"uuid\": \"<string>\",\n    \"downloadURL\": \"<string>\",\n    \"cdnToken\": \"<string>\",\n    \"size\": \"<number>\",\n    \"bandsCount\": \"<number>\",\n    \"bandsInfo\": [\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     },\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     }\n    ],\n    \"bounds\": {\n     \"ne\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"nw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"se\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"sw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     }\n    },\n    \"outline\": {\n     \"type\": \"<string>\",\n     \"geometry\": {\n      \"type\": \"<string>\",\n      \"coordinates\": [\n       [\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ]\n       ]\n      ]\n     },\n     \"properties\": \"<object>\"\n    },\n    \"minZoom\": \"<number>\",\n    \"maxZoom\": \"<number>\"\n   },\n   \"maptiles\": {\n    \"baseURL\": \"<string>\",\n    \"cdnToken\": \"<string>\",\n    \"bounds\": {\n     \"ne\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"nw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"se\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"sw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     }\n    },\n    \"minZoom\": \"<number>\",\n    \"maxZoom\": \"<number>\"\n   },\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   },\n   \"fileUploadCreds\": {\n    \"url\": \"<string>\",\n    \"method\": \"<string>\",\n    \"headers\": [\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     },\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     }\n    ],\n    \"bodyParams\": [\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     },\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     }\n    ]\n   }\n  }\n }\n}"
										},
										{
											"name": "User is not logged in",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"rasterType\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid/raster",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"survey",
														":surveyUuid",
														"raster"
													],
													"variable": [
														{
															"key": "surveyUuid"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "When the create raster call fails internally",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"rasterType\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid/raster",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"survey",
														":surveyUuid",
														"raster"
													],
													"variable": [
														{
															"key": "surveyUuid"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Create raster - More than 50 char name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Response body status is 'failure'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Response body message is 'Validation Error'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(\"Validation Error\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\")  ;\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"var errMessage = \"Ensure this field has no more than 50 characters.\";\r",
													"pm.test(\"Response body validation error message is '\"+errMessage+\"' \", function () {\r",
													"    pm.expect(pm.response.json().validation_errors.name[0][0]).to.eql(errMessage);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"name\": \"Delete It demoajwhkdgajskgdjasgbjU4Y6HJWBMUWgfyuwgsite\",\n \"type\": \"rgb\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/rasters",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"rasters"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												},
												{
													"key": "surveyUuid",
													"value": "{{surveyUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": [
										{
											"name": "User is not logged in",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid",
														"site"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Successful only when a user with sufficient permissions calls the API",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid",
														"site"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"site\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"organisationUuid\": \"<string>\",\n   \"location\": \"<string>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
										},
										{
											"name": "When the create site call fails internally",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid",
														"site"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Create raster - Without request body",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Response body status is 'failure'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Response body message is 'Validation Error'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(\"Validation Error\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\")  ;\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"var errorMessage = \"field is required.\";\r",
													"pm.test(\"Response body validation error message for survey_from field is '\"+errorMessage+\"' \", function () {\r",
													"    pm.expect(pm.response.json().validation_errors.type[0][0]).to.eql(errorMessage);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/rasters",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"rasters"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												},
												{
													"key": "surveyUuid",
													"value": "{{surveyUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create raster - Invalid request body json",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"pm.test(\"Response body status is 'failure'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status).to.eql(\"failure\");\r",
													"});\r",
													"var errorMessage = \"JSON parse error\";\r",
													"pm.test(\"Response body validation error message is '\"+errorMessage+\"' \", function () {\r",
													"    pm.expect(pm.response.json().message).to.contain(errorMessage);\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\")  ;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n \"name\": \"{{rasterName}}\",\r\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/rasters",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"rasters"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												},
												{
													"key": "surveyUuid",
													"value": "{{surveyUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create raster - Support alph numaric and special character",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response body status is 'success'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"});\r",
													"pm.test(\"Response body message is 'Raster Created'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(\"Raster Created\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\")  ;\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"name\": \"{{rasterName}} - It !@#$%^&*()_+{}|][\\\\':;?l\",\n  \"type\": \"rgb\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/rasters",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"rasters"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												},
												{
													"key": "surveyUuid",
													"value": "{{surveyUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": [
										{
											"name": "Successful only when a user with sufficient permissions calls the API",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid",
														"site"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"site\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"organisationUuid\": \"<string>\",\n   \"location\": \"<string>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
										},
										{
											"name": "User is not logged in",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid",
														"site"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "When the create site call fails internally",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid",
														"site"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Create raster -  Invalid accept header",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 406\", function () {\r",
													"    pm.response.to.have.status(406);\r",
													"});\r",
													"var message = \"Could not satisfy the request Accept header.\";\r",
													"pm.test(\"Response body message is '\"+message+\"'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(message);\r",
													"});\r",
													"pm.test(\"Response body status is 'failure'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Not Acceptable\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/font-woff"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"name\": \"{{annotationName}}\",\n \"geojson\": {\n  \"type\": \"Feature\",\n  \"geometry\": {\n   \"type\": \"Point\",\n   \"coordinates\": [\n    6426718.850533903,\n    21610080.91059555\n   ]\n  },\n  \"properties\": {}\n }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/rasters",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"rasters"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												},
												{
													"key": "surveyUuid",
													"value": "{{surveyUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create raster -  Invalid content-type header",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 415\", function () {\r",
													"    pm.response.to.have.status(415);\r",
													"});\r",
													"pm.test(\"Response Body has status as 'failure'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Response Body has message as 'Unsupported media type'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.contain(\"Unsupported media type\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Unsupported Media Type\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/pdf"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"name\": \"{{annotationName}}\",\n \"geojson\": {\n  \"type\": \"Feature\",\n  \"geometry\": {\n   \"type\": \"Point\",\n   \"coordinates\": [\n    6426718.850533903,\n    21610080.91059555\n   ]\n  },\n  \"properties\": {}\n }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/rasters",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"rasters"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												},
												{
													"key": "surveyUuid",
													"value": "{{surveyUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create raster - Invalid auth token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"pm.test(\"Status code name has Unauthorized\", function () {\r",
													"    pm.response.to.have.status(\"Unauthorized\");\r",
													"});\r",
													"pm.test(\"response body status value is 'forbidden'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"forbidden\");\r",
													"});\r",
													"var errMessage = \"Log in to do this action\";\r",
													"pm.test(\"response body message is '\"+errMessage+\"'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(errMessage);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJSUzIwwiIsInR5cCI6IkpXVCIsImtpZCI6Ik1qTkZRVUkyT1RRM01qTXpOa1l4TmpCQ04wSTVNa0kxUmpFNVFVSkVOelkzTnpnNFJqTXpRZyJ9.eyJodHRwczovL2V4YW1wbGUuY29tL3JvbGVzIjpbInVzZXIiXSwiaHR0cHM6Ly9kamFuZ28td2ViYXBwL3JvbGUiOiJ1c2VyIiwibmlja25hbWUiOiJwYW5rYWouZGV2cmFuaSIsIm5hbWUiOiJwYW5rYWouZGV2cmFuaUBhc3RlcmlhLmNvLmluIiwicGljdHVyZSI6Imh0dHBzOi8vcy5ncmF2YXRhci5jb20vYXZhdGFyLzRjN2YzYzM0OWNkYzkzZmMxODVmMTMzMThhZjIzMjcxP3M9NDgwJnI9cGcmZD1odHRwcyUzQSUyRiUyRmNkbi5hdXRoMC5jb20lMkZhdmF0YXJzJTJGcGEucG5nIiwidXBkYXRlZF9hdCI6IjIwMjAtMDYtMTJUMDc6Mzc6MzkuMDE0WiIsImlzcyI6Imh0dHBzOi8vaW5zaWdodDEuYXV0aDAuY29tLyIsInN1YiI6ImF1dGgwfDVlYzdiMTBjZTZmNGUwMGJmMjAzNzZjMyIsImF1ZCI6IlNzTENHTmdnMHlBN0I3c0g1ZU5WTUZtQ1A5SlZkZGUzIiwiaWF0IjoxNTkyMjAxNzc2LCJleHAiOjE1OTIyMzc3NzZ9.NfOcvlsmhi6na-fut67v3PCOhku1wwYM9SvUCaqhSrM4D5ItQS9d-4Z_H8n3x5nc6r4rvTG09Pn3Gk-sDdf1137QmSdgzC-HfYYVEmR5xbiLYHPmZZnxL9ItjKNBYYbY9VBWzSpT434Vzz7DnjiJkyos3mDrLMACjDLQQ-6jCVplDXkOh0NHzQBWy6traQhkKkLceeZ3sa9Bc4PjQt18jzS5a50VHjitaczIZje7ILPeKtG0T3sNIrISyl5HZUK_KXmyzTMKw_9I9zAExkT9GGMBwqxfC6XpQ57wIvBZJN-i4uVNSd3Qjtw1yrCpz-vPMvIk7sbODtEAATtPwwapww",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"name\": \"{{rasterName}}\",\n \"rasterType\": \"RGB\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/rasters",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"rasters"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												},
												{
													"key": "surveyUuid",
													"value": "{{surveyUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": [
										{
											"name": "When the create site call fails internally",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid",
														"site"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Successful only when a user with sufficient permissions calls the API",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid",
														"site"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"site\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"organisationUuid\": \"<string>\",\n   \"location\": \"<string>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
										},
										{
											"name": "User is not logged in",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid",
														"site"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Get all the rasters User has access to",
							"item": [
								{
									"name": "Get all the rasters User has access to",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Body matches string : 'success'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/rasters",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"rasters"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												},
												{
													"key": "surveyUuid",
													"value": "{{surveyUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all rasters - with request body",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Body matches string : 'success'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n \"name\": \"{{rasterName}}\",\r\n \"rasterType\": \"RGB\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/rasters",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"rasters"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												},
												{
													"key": "surveyUuid",
													"value": "{{surveyUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all rasters - wrong orgUuid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"pm.test(\"Response body has status as 'failure'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"var errorMessage = \"Resource Not Found\";\r",
													"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n \"name\": \"{{annotationName}}\",\r\n \"geojson\": {\r\n  \"type\": \"Feature\",\r\n  \"geometry\": {\r\n   \"type\": \"Point\",\r\n   \"coordinates\": [\r\n    6426718.850533903,\r\n    21610080.91059555\r\n   ]\r\n  },\r\n  \"properties\": {}\r\n }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/rasters",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"rasters"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "awijalnkskc",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												},
												{
													"key": "surveyUuid",
													"value": "{{surveyUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all rasters - wrong siteUuid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"pm.test(\"Response body has status as 'failure'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"var errorMessage = \"Resource Not Found\";\r",
													"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n \"name\": \"{{annotationName}}\",\r\n \"geojson\": {\r\n  \"type\": \"Feature\",\r\n  \"geometry\": {\r\n   \"type\": \"Point\",\r\n   \"coordinates\": [\r\n    6426718.850533903,\r\n    21610080.91059555\r\n   ]\r\n  },\r\n  \"properties\": {}\r\n }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/rasters",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"rasters"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "asdka[spd",
													"type": "string"
												},
												{
													"key": "surveyUuid",
													"value": "{{surveyUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all rasters - wrong surveyUuid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"pm.test(\"Response body has status as 'failure'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"var errorMessage = \"Resource Not Found\";\r",
													"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n \"name\": \"{{annotationName}}\",\r\n \"geojson\": {\r\n  \"type\": \"Feature\",\r\n  \"geometry\": {\r\n   \"type\": \"Point\",\r\n   \"coordinates\": [\r\n    6426718.850533903,\r\n    21610080.91059555\r\n   ]\r\n  },\r\n  \"properties\": {}\r\n }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/rasters",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"rasters"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												},
												{
													"key": "surveyUuid",
													"value": "ASDAWWASd",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all rasters - Invalid accept header",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 406\", function () {\r",
													"    pm.response.to.have.status(406);\r",
													"});\r",
													"var message = \"Could not satisfy the request Accept header.\";\r",
													"pm.test(\"Response body message is '\"+message+\"'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(message);\r",
													"});\r",
													"pm.test(\"Response body status is 'failure'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Not Acceptable\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/javascript"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/rasters",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"rasters"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												},
												{
													"key": "surveyUuid",
													"value": "{{surveyUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all rasters - Invalid auth token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"pm.test(\"Status code name has Unauthorized\", function () {\r",
													"    pm.response.to.have.status(\"Unauthorized\");\r",
													"});\r",
													"pm.test(\"response body status value is 'forbidden'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"forbidden\");\r",
													"});\r",
													"var errMessage = \"Log in to do this action\";\r",
													"pm.test(\"response body message is '\"+errMessage+\"'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(errMessage);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1qTkZRVUkyT1RRM01qTXpOa1l4TmpCQ04wSTVNa0kxUmpFNVFVSkVOelkzTnpnNFJqTXpRZyJ9.eyJodHRwczovL2V4YW1wbGUuY29tL3JvbGVzIjpbInVzZXIiXSwiaHR0cHM6Ly9kamFuZ28td2ViYXBwL3JvbGUiOiJ1c2VyIiwibmlja25hbWUiOiJwYW5rYWouZGV2cmFuaSIsIm5hbWUiOiJwYW5rYWouZGV2cmFuaUBhc3RlcmlhLmNvLmluIiwicGljdHVyZSI6Imh0dHBzOi8vcy5ncmF2YXRhci5jb20vYXZhdGFyLzRjN2YzYzM0OWNkYzkzZmMxODVmMTMzMThhZjIzMjcxP3M9NDgwJnI9cGcmZD1odHRwcyUzQSUyRiUyRmNkbi5hdXRoMC5jb20lMkZhdmF0YXJzJTJGcGEucG5nIiwidXBkYXRlZF9hdCI6IjIwMjAtMDYtMTBUMDc6Mzc6MjEuNDM4WiIsImlzcyI6Imh0dHBzOi8vaW5zaWdodDEuYXV0aDAuY29tLyIsInN1YiI6ImF1dGgwfDVlYzdiMTBjZTZmNGUwMGJmMjAzNzZjMyIsImF1ZCI6IlNzTENHTmdnMHlBN0I3c0g1ZU5WTUZtQ1A5SlZkZGUzIiwiaWF0IjoxNTkxODc4OTI1LCJleHAiOjE1OTE5MTQ5MjV9.b-FwIG8vG9rtPDVAhQjlf2tzV9nlq8RFqL1w264skuxsXR01b067gXzOAh5i0VXQ_J5WDMTV-DDkpeUZwE_m57Tl1jSJ_4n0dSWFd39_TI0jNiDQ23qt_OfmDTjEVf0b7GMj3hDk5Vwi0S7BumpE67jX2Pk1QayPXpfBGz2z3kC8qi1pXddWnCPB_E-LtZ6fwmbyOQ-HDSbkcdadBlqtRAPpNWx7APOf-6XbdDB6nF19s_BD1oKJNX2ieKqfV3Ggf2opGHtwrvusd2yFYnCbvdy9pnOTsB4SmrZUMDEArAmTTp5pXqx6UytJ1TQ2fqsBE6DEPCwYK_jLL7QLjFmsWR",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/rasters",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"rasters"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												},
												{
													"key": "surveyUuid",
													"value": "{{surveyUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": [
										{
											"name": "User is not logged in",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisations",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisations"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Fired on the main/landing page",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisations",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisations"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"organisations\": [\n   {\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"permalink\": \"<string>\",\n    \"uuid\": \"<string>\",\n    \"metaData\": {\n     \"userRole\": {}\n    }\n   },\n   {\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"permalink\": \"<string>\",\n    \"uuid\": \"<string>\",\n    \"metaData\": {\n     \"userRole\": {}\n    }\n   }\n  ]\n }\n}"
										}
									]
								}
							]
						},
						{
							"name": "raster/{raster Uuid}",
							"item": [
								{
									"name": "Get details of an raster User has access to",
									"item": [
										{
											"name": "Get details of a raster User has access to",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Response body has tatus as 'success'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response body raster name is equal to : '\"+pm.environment.get(\"rasterName\")+\"'\", function () {\r",
															"    pm.expect(pm.response.json().data.raster.name).to.eql(pm.environment.get(\"rasterName\"));\r",
															"});\r",
															"pm.test(\"Response body should have raster uuid as expected.\", function () {;\r",
															"    pm.expect(pm.response.json().data.raster.uuid).to.eql(pm.environment.get(\"rasterUuid\"));\r",
															"});\r",
															"pm.test(\"Response body should have survey uuid as expected.\", function () {;\r",
															"    pm.expect(pm.response.json().data.raster.refUuid.surveyUuid).to.eql(pm.environment.get(\"surveyUuid\"));\r",
															"});\r",
															"pm.test(\"Response body should have site uuid as expected.\", function () {;\r",
															"    pm.expect(pm.response.json().data.raster.refUuid.siteUuid).to.eql(pm.environment.get(\"siteUuid\"));\r",
															"});\r",
															"pm.test(\"Response body should have site uuid as expected.\", function () {;\r",
															"    pm.expect(pm.response.json().data.raster.refUuid.organisationUuid).to.eql(pm.environment.get(\"orgUuid\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/rasters/:rasterUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"rasters",
														":rasterUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string",
															"description": "(Required) "
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string",
															"description": "(Required) "
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string",
															"description": "(Required) "
														},
														{
															"key": "rasterUuid",
															"value": "{{rasterUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": [
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/core/v1/organisation/:organisationUuid/site/:siteUuid/survey/:surveyUuid/annotation/:annotationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"core",
																"v1",
																"organisation",
																":organisationUuid",
																"site",
																":siteUuid",
																"survey",
																":surveyUuid",
																"annotation",
																":annotationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																},
																{
																	"key": "siteUuid"
																},
																{
																	"key": "surveyUuid"
																},
																{
																	"key": "annotationUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user has access to annotation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/core/v1/organisation/:organisationUuid/site/:siteUuid/survey/:surveyUuid/annotation/:annotationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"core",
																"v1",
																"organisation",
																":organisationUuid",
																"site",
																":siteUuid",
																"survey",
																":surveyUuid",
																"annotation",
																":annotationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																},
																{
																	"key": "siteUuid"
																},
																{
																	"key": "surveyUuid"
																},
																{
																	"key": "annotationUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"queued\",\n \"message\": \"laboris sint\",\n \"data\": {\n  \"annotation\": {\n   \"name\": \"nostrud eu\",\n   \"refUuid\": {\n    \"organisationUuid\": \"velit in nostrud Excepteur\",\n    \"siteUuid\": \"Lorem fugiat mollit\",\n    \"surveyUuid\": \"irure elit ea\"\n   },\n   \"geojson\": {\n    \"type\": \"Feature\",\n    \"geometry\": {\n     \"type\": \"Point\",\n     \"coordinates\": [\n      -4283317.660607502,\n      -60014066.241007894\n     ]\n    },\n    \"properties\": \"<object>\"\n   },\n   \"permalink\": \"aliqua minim velit ut in\",\n   \"uuid\": \"incididunt sit\",\n   \"createdBy\": \"Ut Duis sit\",\n   \"createdAt\": -22587323.52630721,\n   \"updatedAt\": 89449165.98390305,\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												},
												{
													"name": "When the get annotation details call fails internally",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/core/v1/organisation/:organisationUuid/site/:siteUuid/survey/:surveyUuid/annotation/:annotationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"core",
																"v1",
																"organisation",
																":organisationUuid",
																"site",
																":siteUuid",
																"survey",
																":surveyUuid",
																"annotation",
																":annotationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																},
																{
																	"key": "siteUuid"
																},
																{
																	"key": "surveyUuid"
																},
																{
																	"key": "annotationUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Get raster  - with request body",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Response body has tatus as 'success'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response body raster name is equal to : '\"+pm.environment.get(\"rasterName\")+\"'\", function () {\r",
															"    pm.expect(pm.response.json().data.raster.name).to.eql(pm.environment.get(\"rasterName\"));\r",
															"});\r",
															"pm.test(\"Response body should have raster uuid as expected.\", function () {;\r",
															"    pm.expect(pm.response.json().data.raster.uuid).to.eql(pm.environment.get(\"rasterUuid\"));\r",
															"});\r",
															"pm.test(\"Response body should have survey uuid as expected.\", function () {;\r",
															"    pm.expect(pm.response.json().data.raster.refUuid.surveyUuid).to.eql(pm.environment.get(\"surveyUuid\"));\r",
															"});\r",
															"pm.test(\"Response body should have site uuid as expected.\", function () {;\r",
															"    pm.expect(pm.response.json().data.raster.refUuid.siteUuid).to.eql(pm.environment.get(\"siteUuid\"));\r",
															"});\r",
															"pm.test(\"Response body should have site uuid as expected.\", function () {;\r",
															"    pm.expect(pm.response.json().data.raster.refUuid.organisationUuid).to.eql(pm.environment.get(\"orgUuid\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n \"name\": \"{{annotationName}}\",\r\n \"geojson\": {\r\n  \"type\": \"Feature\",\r\n  \"geometry\": {\r\n   \"type\": \"Point\",\r\n   \"coordinates\": [\r\n    6426718.850533903,\r\n    21610080.91059555\r\n   ]\r\n  },\r\n  \"properties\": {}\r\n }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/rasters/:rasterUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"rasters",
														":rasterUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string",
															"description": "(Required) "
														},
														{
															"key": "rasterUuid",
															"value": "{{rasterUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": [
												{
													"name": "Successful only when a user has access to survey",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												},
												{
													"name": "When the get survey details call fails internally",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Get raster  - wrong orgUuid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"pm.test(\"Response body has status as 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"var errorMessage = \"Resource Not Found\";\r",
															"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/rasters/:rasterUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"rasters",
														":rasterUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "awdadw",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string",
															"description": "(Required) "
														},
														{
															"key": "rasterUuid",
															"value": "{{rasterUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": [
												{
													"name": "Successful only when a user has access to survey",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												},
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "When the get survey details call fails internally",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Get raster  - wrong siteUuid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"pm.test(\"Response body has status as 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"var errorMessage = \"Resource Not Found\";\r",
															"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/rasters/:rasterUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"rasters",
														":rasterUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "MALJSKLSLKF",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string",
															"description": "(Required) "
														},
														{
															"key": "rasterUuid",
															"value": "{{rasterUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": [
												{
													"name": "Successful only when a user has access to survey",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												},
												{
													"name": "When the get survey details call fails internally",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Get raster  - wrong surveyUuid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"pm.test(\"Response body has status as 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"var errorMessage = \"Resource Not Found\";\r",
															"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/rasters/:rasterUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"rasters",
														":rasterUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "awewafascz",
															"type": "string",
															"description": "(Required) "
														},
														{
															"key": "rasterUuid",
															"value": "{{rasterUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": [
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "When the get survey details call fails internally",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user has access to survey",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												}
											]
										},
										{
											"name": "Get raster  - wrong rasterUuid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"pm.test(\"Response body has status as 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"var errorMessage = \"Resource Not Found\";\r",
															"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/rasters/:rasterUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"rasters",
														":rasterUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string",
															"description": "(Required) "
														},
														{
															"key": "rasterUuid",
															"value": "lkjaksbcjkasb",
															"type": "string"
														}
													]
												}
											},
											"response": [
												{
													"name": "When the get survey details call fails internally",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user has access to survey",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												},
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Get raster - Invalid accept header",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 406\", function () {\r",
															"    pm.response.to.have.status(406);\r",
															"});\r",
															"var message = \"Could not satisfy the request Accept header.\";\r",
															"pm.test(\"Response body message is '\"+message+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(message);\r",
															"});\r",
															"pm.test(\"Response body status is 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Acceptable\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/octet-stream"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/rasters/:rasterUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"rasters",
														":rasterUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string",
															"description": "(Required) "
														},
														{
															"key": "rasterUuid",
															"value": "{{rasterUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": [
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "When the get survey details call fails internally",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user has access to survey",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												}
											]
										},
										{
											"name": "Get raster - Invalid auth token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 401\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"pm.test(\"Status code name has Unauthorized\", function () {\r",
															"    pm.response.to.have.status(\"Unauthorized\");\r",
															"});\r",
															"pm.test(\"response body status value is 'forbidden'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"forbidden\");\r",
															"});\r",
															"var errMessage = \"Log in to do this action\";\r",
															"pm.test(\"response body message is '\"+errMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errMessage);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1qTkZRVUkyT1RRM01qTXpOa1l4TmpCQ04wSTVNa0kxUmpFNVFVSkVOelkzTnpnNFJqTXpRZyJ9.eyJodHRwczovL2V4YW1wbGUuY29tL3JvbGVzIjpbInVzZXIiXSwiaHR0cHM6Ly9kamFuZ28td2ViYXBwL3JvbGUiOiJ1c2VyIiwibmlja25hbWUiOiJwYW5rYWouZGV2cmFuaSIsIm5hbWUiOiJwYW5rYWouZGV2cmFuaUBhc3RlcmlhLmNvLmluIiwicGljdHVyZSI6Imh0dHBzOi8vcy5ncmF2YXRhci5jb20vYXZhdGFyLzRjN2YzYzM0OWNkYzkzZmMxODVmMTMzMThhZjIzMjcxP3M9NDgwJnI9cGcmZD1odHRwcyUzQSUyRiUyRmNkbi5hdXRoMC5jb20lMkZhdmF0YXJzJTJGcGEucG5nIiwidXBkYXRlZF9hdCI6IjIwMjAtMDYtMTFUMTI6MzU6MjQuMTk4WiIsImlzcyI6Imh0dHBzOi8vaW5zaWdodDEuYXV0aDAuY29tLyIsInN1YiI6ImF1dGgwfDVlYzdiMTBjZTZmNGUwMGJmMjAzNzZjMyIsImF1ZCI6IlNzTENHTmdnMHlBN0I3c0g1ZU5WTUZtQ1A5SlZkZGUzIiwiaWF0IjoxNTkxOTQ3NDYwLCJleHAiOjE1OTE5ODM0NjB9.kYNMikKc84EQXRC32dwkOXW0gkJKfqQTOLVmOkKs5QmvVKcVQNZVbo4fQFuYf07Qu1OpvYKmqBHf3Z5H8nsy-Mfeyufgr86X_p5vdThkpCGMzg3uX06LqKoVDcRRzDndQpmvve5Ripla3ucN5IME363U1EfwqmDPs4jBoAxuB80qurcVq3NBn8dOJzJNCRgGW-aHPP6LJAvezGgWpiDnKRcKLIbU2ig7h5t-8LhWOKDi48TBHGyOQYdxqUE7fC2NCi6ghTX7SnLxXA6S1SMwpqQgAApEnjklY8ImuP6in3Rd5JnvJJedDZTcYWK43iKBMoe5exhYd547XNtpQWttWE",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/rasters/:rasterUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"rasters",
														":rasterUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string",
															"description": "(Required) "
														},
														{
															"key": "rasterUuid",
															"value": "{{rasterUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": [
												{
													"name": "When the get survey details call fails internally",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user has access to survey",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												},
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Get details of a raster User has access to Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Response body has tatus as 'success'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response body raster name is equal to : '\"+pm.environment.get(\"rasterName\")+\"'\", function () {\r",
															"    pm.expect(pm.response.json().data.raster.name).to.eql(pm.environment.get(\"rasterName\"));\r",
															"});\r",
															"pm.test(\"Response body should have raster uuid as expected.\", function () {;\r",
															"    pm.expect(pm.response.json().data.raster.uuid).to.eql(pm.environment.get(\"rasterUuid\"));\r",
															"});\r",
															"pm.test(\"Response body should have survey uuid as expected.\", function () {;\r",
															"    pm.expect(pm.response.json().data.raster.refUuid.surveyUuid).to.eql(pm.environment.get(\"surveyUuid\"));\r",
															"});\r",
															"pm.test(\"Response body should have site uuid as expected.\", function () {;\r",
															"    pm.expect(pm.response.json().data.raster.refUuid.siteUuid).to.eql(pm.environment.get(\"siteUuid\"));\r",
															"});\r",
															"pm.test(\"Response body should have site uuid as expected.\", function () {;\r",
															"    pm.expect(pm.response.json().data.raster.refUuid.organisationUuid).to.eql(pm.environment.get(\"orgUuid\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/rasters/:rasterUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"rasters",
														":rasterUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string",
															"description": "(Required) "
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string",
															"description": "(Required) "
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string",
															"description": "(Required) "
														},
														{
															"key": "rasterUuid",
															"value": "{{rasterUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": [
												{
													"name": "Successful only when a user has access to annotation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/core/v1/organisation/:organisationUuid/site/:siteUuid/survey/:surveyUuid/annotation/:annotationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"core",
																"v1",
																"organisation",
																":organisationUuid",
																"site",
																":siteUuid",
																"survey",
																":surveyUuid",
																"annotation",
																":annotationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																},
																{
																	"key": "siteUuid"
																},
																{
																	"key": "surveyUuid"
																},
																{
																	"key": "annotationUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"queued\",\n \"message\": \"laboris sint\",\n \"data\": {\n  \"annotation\": {\n   \"name\": \"nostrud eu\",\n   \"refUuid\": {\n    \"organisationUuid\": \"velit in nostrud Excepteur\",\n    \"siteUuid\": \"Lorem fugiat mollit\",\n    \"surveyUuid\": \"irure elit ea\"\n   },\n   \"geojson\": {\n    \"type\": \"Feature\",\n    \"geometry\": {\n     \"type\": \"Point\",\n     \"coordinates\": [\n      -4283317.660607502,\n      -60014066.241007894\n     ]\n    },\n    \"properties\": \"<object>\"\n   },\n   \"permalink\": \"aliqua minim velit ut in\",\n   \"uuid\": \"incididunt sit\",\n   \"createdBy\": \"Ut Duis sit\",\n   \"createdAt\": -22587323.52630721,\n   \"updatedAt\": 89449165.98390305,\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												},
												{
													"name": "When the get annotation details call fails internally",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/core/v1/organisation/:organisationUuid/site/:siteUuid/survey/:surveyUuid/annotation/:annotationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"core",
																"v1",
																"organisation",
																":organisationUuid",
																"site",
																":siteUuid",
																"survey",
																":surveyUuid",
																"annotation",
																":annotationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																},
																{
																	"key": "siteUuid"
																},
																{
																	"key": "surveyUuid"
																},
																{
																	"key": "annotationUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/core/v1/organisation/:organisationUuid/site/:siteUuid/survey/:surveyUuid/annotation/:annotationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"core",
																"v1",
																"organisation",
																":organisationUuid",
																"site",
																":siteUuid",
																"survey",
																":surveyUuid",
																"annotation",
																":annotationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																},
																{
																	"key": "siteUuid"
																},
																{
																	"key": "surveyUuid"
																},
																{
																	"key": "annotationUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Edit a raster's details",
									"item": [
										{
											"name": "Edit a raster's details",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"editRasterName\",\"rasterName_\"+Math.floor((Math.random() * 10000000000) + 1));\r",
															"//types = data.rasterType;\r",
															"types = \"dtm\";\r",
															"pm.environment.set(\"editRasterType\", types);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.expect(pm.response.json().status).to.eql(\"success\")){\r",
															"    pm.environment.set(\"rasterName\",pm.environment.get(\"editRasterName\"));\r",
															"}\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Body matches string : 'success'\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response body has raster name as : '\"+pm.environment.get(\"editrasterName\")+\"'\", function () {\r",
															"    pm.expect(pm.response.json().data.raster.name).to.eql(pm.environment.get(\"editRasterName\"));\r",
															"});\r",
															"pm.test(\"Response body has raster type as : '\"+pm.environment.get(\"editRasterType\")+\"'\", function () {\r",
															"    pm.expect(pm.response.json().data.raster.type).to.eql(pm.environment.get(\"editRasterType\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n \"name\": \"{{editRasterName}}\",\r\n \"type\":\"{{editRasterType}}\"\r\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/rasters/:rasterUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"rasters",
														":rasterUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string"
														},
														{
															"key": "rasterUuid",
															"value": "{{rasterUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": [
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user has access to survey edit perms",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												},
												{
													"name": "When the update survey call fails internally",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Edit raster - Duplicate request",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Body matches string : 'success'\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response body has raster name as : '\"+pm.environment.get(\"editrasterName\")+\"'\", function () {\r",
															"    pm.expect(pm.response.json().data.raster.name).to.eql(pm.environment.get(\"editRasterName\"));\r",
															"});\r",
															"pm.test(\"Response body has raster type as : '\"+pm.environment.get(\"editRasterType\")+\"'\", function () {\r",
															"    pm.expect(pm.response.json().data.raster.type).to.eql(pm.environment.get(\"editRasterType\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n \"name\": \"{{editRasterName}}\",\r\n \"type\":\"{{editRasterType}}\"\r\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/rasters/:rasterUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"rasters",
														":rasterUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string"
														},
														{
															"key": "rasterUuid",
															"value": "{{rasterUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": [
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user has access to survey edit perms",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												},
												{
													"name": "When the update survey call fails internally",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Edit raster - wrong orgUuid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"pm.test(\"Response body has tatus as 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"var errorMessage = \"Resource Not Found\";\r",
															"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n \"name\": \"{{editRasterName}}\",\r\n \"type\":\"{{editRasterType}}\"\r\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/rasters/:rasterUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"rasters",
														":rasterUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "kasjdlksajk",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string"
														},
														{
															"key": "rasterUuid",
															"value": "{{rasterUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": [
												{
													"name": "When the update survey call fails internally",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user has access to survey edit perms",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												}
											]
										},
										{
											"name": "Edit raster - wrong siteUuid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"pm.test(\"Response body has tatus as 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"var errorMessage = \"Resource Not Found\";\r",
															"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n \"name\": \"{{editRasterName}}\",\r\n \"type\":\"{{editRasterType}}\"\r\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/rasters/:rasterUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"rasters",
														":rasterUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"type": "string",
															"value": "{{orgUuid}}"
														},
														{
															"key": "siteUuid",
															"type": "string",
															"value": "ajsdhashk"
														},
														{
															"key": "surveyUuid",
															"type": "string",
															"value": "{{surveyUuid}}"
														},
														{
															"key": "rasterUuid",
															"type": "string",
															"value": "{{rasterUuid}}"
														}
													]
												}
											},
											"response": [
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user has access to survey edit perms",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												},
												{
													"name": "When the update survey call fails internally",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Edit raster - wrong surveyUuid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"pm.test(\"Response body has tatus as 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"var errorMessage = \"Resource Not Found\";\r",
															"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n \"name\": \"{{editRasterName}}\",\r\n \"type\":\"{{editRasterType}}\"\r\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/rasters/:rasterUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"rasters",
														":rasterUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "kjdasljdak",
															"type": "string"
														},
														{
															"key": "rasterUuid",
															"value": "{{rasterUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": [
												{
													"name": "When the update survey call fails internally",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user has access to survey edit perms",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												}
											]
										},
										{
											"name": "Edit raster - wrong rasterUuid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"pm.test(\"Response body has tatus as 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"var errorMessage = \"Resource Not Found\";\r",
															"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n \"name\": \"{{editRasterName}}\",\r\n \"type\":\"{{editRasterType}}\"\r\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/rasters/:rasterUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"rasters",
														":rasterUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"type": "string",
															"value": "{{orgUuid}}"
														},
														{
															"key": "siteUuid",
															"type": "string",
															"value": "{{siteUuid}}"
														},
														{
															"key": "surveyUuid",
															"type": "string",
															"value": "{{surveyUuid}}"
														},
														{
															"key": "rasterUuid",
															"type": "string",
															"value": "kjsdkasn,"
														}
													]
												}
											},
											"response": [
												{
													"name": "Successful only when a user has access to survey edit perms",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												},
												{
													"name": "When the update survey call fails internally",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Edit raster - Invalid type for raster",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//types = data.rasterType;\r",
															"types = \"DTM\";\r",
															"pm.environment.set(\"invalidType\", types);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Response body status is : 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Response Body message is 'Validation Error'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\")  ;\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"var errorMessage = \"'\"+pm.environment.get(\"invalidType\")+\"' is not a choice. Choices are ['orthophoto', 'rgb', 'dsm', 'dtm', 'ndvi', 'osavi', 'multispectral', 'maptiles'].\";\r",
															"pm.test(\"Response body raster name is equal to : '\"+pm.environment.get(\"rasterName\")+\"'\", function () {\r",
															"    pm.expect(pm.response.json().validation_errors.type[0][0]).to.eql(errorMessage);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n \"name\": \"{{editRasterName}}\",\r\n \"type\":\"{{invalidType}}\"\r\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/rasters/:rasterUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"rasters",
														":rasterUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string"
														},
														{
															"key": "rasterUuid",
															"value": "{{rasterUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": [
												{
													"name": "When the update survey call fails internally",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user has access to survey edit perms",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												}
											]
										},
										{
											"name": "Edit raster - More than 50 char name",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Response body status is 'failure'\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Response body message is 'Validation Error'\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.message).to.eql(\"Validation Error\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\")  ;\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"var errMessage = \"Ensure this field has no more than 50 characters.\";\r",
															"pm.test(\"Response body validation error message is '\"+errMessage+\"' \", function () {\r",
															"    pm.expect(pm.response.json().validation_errors.name[0][0]).to.eql(errMessage);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n \"name\": \"{{editRasterName}} - Deleasdasdadadadhauygfawdaawdasdsadsadsa\",\n \"type\":\"rgb\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/rasters/:rasterUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"rasters",
														":rasterUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string"
														},
														{
															"key": "rasterUuid",
															"value": "{{rasterUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Edit raster  - Without request body",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Response body status is 'failure'\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Response body message is 'Validation Error'\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.message).to.eql(\"Validation Error\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\")  ;\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"var errorMessage = \"field is required.\";\r",
															"pm.test(\"Response body validation error message for survey_from field is '\"+errorMessage+\"' \", function () {\r",
															"    pm.expect(pm.response.json().validation_errors.type[0][0]).to.eql(errorMessage);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/rasters/:rasterUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"rasters",
														":rasterUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string"
														},
														{
															"key": "rasterUuid",
															"value": "{{rasterUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Edit raster - Invalid request body json",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"pm.test(\"Response body status is 'failure'\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.status).to.eql(\"failure\");\r",
															"});\r",
															"var errorMessage = \"JSON parse error\";\r",
															"pm.test(\"Response body validation error message is '\"+errorMessage+\"' \", function () {\r",
															"    pm.expect(pm.response.json().message).to.contain(errorMessage);\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\")  ;\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": ,\r\n    \"type\": \r\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/rasters/:rasterUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"rasters",
														":rasterUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string"
														},
														{
															"key": "rasterUuid",
															"value": "{{rasterUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Edit raster - All properties null",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Response body status is 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Response body message is 'Validation Error'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\")  ;\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"var errorMessage = \"field is required.\";\r",
															"pm.test(\"Response body validation error message for surveyFrom is '\"+errorMessage+\"' \", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.validation_errors.type[0][0]).to.eql(errorMessage);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"name\": null,\r\n  \"type\": null\r\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/rasters/:rasterUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"rasters",
														":rasterUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string"
														},
														{
															"key": "rasterUuid",
															"value": "{{rasterUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Edit raster - invalid content-type header",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 415\", function () {\r",
															"    pm.response.to.have.status(415);\r",
															"});\r",
															"pm.test(\"Response Body has status as 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Response Body has message as 'Unsupported media type'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.contain(\"Unsupported media type\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Unsupported Media Type\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/vnd.api+json"
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"{{editSurveyName}}\",\n  \"description\": \"Changed survey description - {{editSurveyName}}\",\n  \"surveyFrom\": \"2020-02-01T00:00:00Z\",\n  \"surveyTo\": \"2020-02-01T00:00:00Z\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/rasters/:rasterUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"rasters",
														":rasterUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string"
														},
														{
															"key": "rasterUuid",
															"value": "{{rasterUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Edit raster - invalid accept header",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 406\", function () {\r",
															"    pm.response.to.have.status(406);\r",
															"});\r",
															"var message = \"Could not satisfy the request Accept header.\";\r",
															"pm.test(\"Response body message is '\"+message+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(message);\r",
															"});\r",
															"pm.test(\"Response body status is 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Acceptable\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"type": "text",
														"value": "application/atom+xml"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"{{editSurveyName}}\",\n  \"description\": \"Changed survey description - {{editSurveyName}}\",\n  \"surveyFrom\": \"2020-02-01T00:00:00Z\",\n  \"surveyTo\": \"2020-02-01T00:00:00Z\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/rasters/:rasterUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"rasters",
														":rasterUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string"
														},
														{
															"key": "rasterUuid",
															"value": "{{rasterUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": [
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "When the update org call fails internally",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user has access to org edit perms",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"organisation\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												}
											]
										},
										{
											"name": "Edit raster - Invalid auth token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 401\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"pm.test(\"Status code name has Unauthorized\", function () {\r",
															"    pm.response.to.have.status(\"Unauthorized\");\r",
															"});\r",
															"pm.test(\"response body status value is 'forbidden'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"forbidden\");\r",
															"});\r",
															"var errMessage = \"Log in to do this action\";\r",
															"pm.test(\"response body message is '\"+errMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errMessage);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1qTkZRVUkyT1RRM01qTXpOa1l4TmpCQ04wSTVNa0kxUmpFNVFVSkVOelkzTnpnNFJqTXpRZyJ9.eyJodHRwczovL2V4YW1wbGUuY29tL3JvbGVzIjpbInVzZXIiXSwiaHR0cHM6Ly9kamFuZ28td2ViYXBwL3JvbGUiOiJ1c2VyIiwibmlja25hbWUiOiJwYW5rYWouZGV2cmFuaSIsIm5hbWUiOiJwYW5rYWouZGV2cmFuaUBhc3RlcmlhLmNvLmluIiwicGljdHVyZSI6Imh0dHBzOi8vcy5ncmF2YXRhci5jb20vYXZhdGFyLzRjN2YzYzM0OWNkYzkzZmMxODVmMTMzMThhZjIzMjcxP3M9NDgwJnI9cGcmZD1odHRwcyUzQSUyRiUyRmNkbi5hdXRoMC5jb20lMkZhdmF0YXJzJTJGcGEucG5nIiwidXBkYXRlZF9hdCI6IjIwMjAtMDYtMTJUMDc6Mzc6MzkuMDE0WiIsImlzcyI6Imh0dHBzOi8vaW5zaWdodDEuYXV0aDAuY29tLyIsInN1YiI6ImF1dGgwfDVlYzdiMTBjZTZmNGUwMGJmMjAzNzZjMyIsImF1ZCI6IlNzTENHTmdnMHlBN0I3c0g1ZU5WTUZtQ1A5SlZkZGUzIiwiaWF0IjoxNTkyMjAxNzc2LCJleHAiOjE1OTIyMzc3NzZ9.NfOcvlsmhi6na-fut67v3PCOhku1EFYM9SvUCaqhSrM4D5ItQS9d-4Z_H8n3x5nc6r4rvTG09Pn3Gk-sDdf1137QmSdgzC-HfYYVEmR5xbiLYHPmZZnxL9ItjKNBYYbY9VBWzSpT434Vzz7DnjiJkyos3mDrLMACjDLQQ-6jCVplDXkOh0NHzQBWy6traQhkKkLceeZ3sa9Bc4PjQt18jzS5a50VHjitaczIZje7ILPeKtG0T3sNIrISyl5HZUK_KXmyzTMKw_9I9zAExkT9GGMBwqxfC6XpQ57wIvBZJN-i4uVNSd3Qjtw1yrCpz-vPMvIk7sbODtEAATtPpLapww",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"{{editSurveyName}}\",\n  \"description\": \"Changed survey description - {{editSurveyName}}\",\n  \"surveyFrom\": \"2020-02-01T00:00:00Z\",\n  \"surveyTo\": \"2020-02-01T00:00:00Z\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/rasters/:rasterUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"rasters",
														":rasterUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string"
														},
														{
															"key": "rasterUuid",
															"value": "{{rasterUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": [
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "When the update org call fails internally",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user has access to org edit perms",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"organisation\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												}
											]
										}
									]
								},
								{
									"name": "Partial edit an raster's details",
									"item": [
										{
											"name": "Edit a raster's details(Patch)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"editRasterName\",\"rasterName_\"+Math.floor((Math.random() * 10000000000) + 1));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.expect(pm.response.json().status).to.eql(\"success\")){\r",
															"    pm.environment.set(\"rasterName\",pm.environment.get(\"editRasterName\"));\r",
															"}\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Body matches string : 'success'\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response body has raster name as : '\"+pm.environment.get(\"editrasterName\")+\"'\", function () {\r",
															"    pm.expect(pm.response.json().data.raster.name).to.eql(pm.environment.get(\"editRasterName\"));\r",
															"});\r",
															"pm.test(\"Response body has raster type as : '\"+pm.environment.get(\"editRasterType\")+\"'\", function () {\r",
															"    pm.expect(pm.response.json().data.raster.type).to.eql(pm.environment.get(\"editRasterType\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n \"name\": \"{{editRasterName}}\"\r\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/rasters/:rasterUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"rasters",
														":rasterUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string"
														},
														{
															"key": "rasterUuid",
															"value": "{{rasterUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": [
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user has access to survey edit perms",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												},
												{
													"name": "When the update survey call fails internally",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Patch raster - Edit type only",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"\r",
															"//types = data.rasterType;\r",
															"types = \"orthophoto\";\r",
															"pm.environment.set(\"editRasterType\", types);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Body matches string : 'success'\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response body has raster name as : '\"+pm.environment.get(\"editrasterName\")+\"'\", function () {\r",
															"    pm.expect(pm.response.json().data.raster.name).to.eql(pm.environment.get(\"editRasterName\"));\r",
															"});\r",
															"pm.test(\"Response body has raster type as : '\"+pm.environment.get(\"editRasterType\")+\"'\", function () {\r",
															"    pm.expect(pm.response.json().data.raster.type).to.eql(pm.environment.get(\"editRasterType\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n \"type\":\"{{editRasterType}}\"\r\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/rasters/:rasterUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"rasters",
														":rasterUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string"
														},
														{
															"key": "rasterUuid",
															"value": "{{rasterUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": [
												{
													"name": "Successful only when a user has access to survey edit perms",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												},
												{
													"name": "When the update survey call fails internally",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Patch raster - Duplicate request",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//types = data.rasterType;\r",
															"types = \"dtm\";\r",
															"pm.environment.set(\"editRasterType\", types);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Body matches string : 'success'\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response body has raster name as : '\"+pm.environment.get(\"editrasterName\")+\"'\", function () {\r",
															"    pm.expect(pm.response.json().data.raster.name).to.eql(pm.environment.get(\"editRasterName\"));\r",
															"});\r",
															"pm.test(\"Response body has raster type as : '\"+pm.environment.get(\"rasterType\")+\"'\", function () {\r",
															"    pm.expect(pm.response.json().data.raster.type).to.eql(pm.environment.get(\"editRasterType\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n \"name\": \"{{editRasterName}}\",\r\n \"type\":\"{{editRasterType}}\"\r\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/rasters/:rasterUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"rasters",
														":rasterUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string"
														},
														{
															"key": "rasterUuid",
															"value": "{{rasterUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": [
												{
													"name": "When the update survey call fails internally",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user has access to survey edit perms",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												},
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Edit raster - Invalid type for raster",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//types = data.rasterType;\r",
															"types = \"NDVI\";\r",
															"pm.environment.set(\"invalidType\", types);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Response body status is : 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Response Body message is 'Validation Error'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\")  ;\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"var errorMessage = \"'\"+pm.environment.get(\"invalidType\")+\"' is not a choice. Choices are ['orthophoto', 'rgb', 'dsm', 'dtm', 'ndvi', 'osavi', 'multispectral', 'maptiles'].\";\r",
															"pm.test(\"Response body raster name is equal to : '\"+pm.environment.get(\"rasterName\")+\"'\", function () {\r",
															"    pm.expect(pm.response.json().validation_errors.type[0][0]).to.eql(errorMessage);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n \"name\": \"{{editRasterName}}\",\r\n \"type\":\"{{invalidType}}\"\r\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/rasters/:rasterUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"rasters",
														":rasterUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string"
														},
														{
															"key": "rasterUuid",
															"value": "{{rasterUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": [
												{
													"name": "When the update survey call fails internally",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user has access to survey edit perms",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												}
											]
										},
										{
											"name": "Patch raster - More than 50 char name",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Response body status is 'failure'\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Response body message is 'Validation Error'\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.message).to.eql(\"Validation Error\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\")  ;\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"var errMessage = \"Ensure this field has no more than 50 characters.\";\r",
															"pm.test(\"Response body validation error message is '\"+errMessage+\"' \", function () {\r",
															"    pm.expect(pm.response.json().validation_errors.name[0][0]).to.eql(errMessage);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n \"name\": \"{{editRasterName}} - Deleasdasdadadadhauygfawdawdawdwadasdaiquhf4a564a6w4da64da6dw8aw6d4a684d6aw4da684d68a4da65d4aw65d4aw68d!@#&(*@!&$*!&^$*&@!^$*!^$*te2\",\n \"type\":\"rgb\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/rasters/:rasterUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"rasters",
														":rasterUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string"
														},
														{
															"key": "rasterUuid",
															"value": "{{rasterUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Patch raster  - Without request body",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.expect(pm.response.json().status).to.eql(\"success\")){\r",
															"    pm.environment.set(\"rasterName\",pm.environment.get(\"editRasterName\"));\r",
															"}\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Body matches string : 'success'\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response body has raster name as : '\"+pm.environment.get(\"editrasterName\")+\"'\", function () {\r",
															"    pm.expect(pm.response.json().data.raster.name).to.eql(pm.environment.get(\"editRasterName\"));\r",
															"});\r",
															"pm.test(\"Response body has raster type as : '\"+pm.environment.get(\"editRasterType\")+\"'\", function () {\r",
															"    pm.expect(pm.response.json().data.raster.type).to.eql(pm.environment.get(\"editRasterType\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/rasters/:rasterUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"rasters",
														":rasterUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string"
														},
														{
															"key": "rasterUuid",
															"value": "{{rasterUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Patch raster - Invalid request body json",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"pm.test(\"Response body status is 'failure'\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.status).to.eql(\"failure\");\r",
															"});\r",
															"var errorMessage = \"JSON parse error\";\r",
															"pm.test(\"Response body validation error message is '\"+errorMessage+\"' \", function () {\r",
															"    pm.expect(pm.response.json().message).to.contain(errorMessage);\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\")  ;\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": ,\r\n    \"type\": \r\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/rasters/:rasterUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"rasters",
														":rasterUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string"
														},
														{
															"key": "rasterUuid",
															"value": "{{rasterUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Patch  raster - All properties null",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Response body status is 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Response body message is 'Validation Error'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\")  ;\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"var errorMessage = \"must not be blank (was: None)\";\r",
															"pm.test(\"Response body validation error message for surveyFrom is '\"+errorMessage+\"' \", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.validation_errors.type[0][0]).to.eql(errorMessage);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"name\": null,\r\n  \"type\": null\r\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/rasters/:rasterUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"rasters",
														":rasterUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string"
														},
														{
															"key": "rasterUuid",
															"value": "{{rasterUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Patch  raster - invalid content-type header",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 415\", function () {\r",
															"    pm.response.to.have.status(415);\r",
															"});\r",
															"pm.test(\"Response Body has status as 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Response Body has message as 'Unsupported media type'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.contain(\"Unsupported media type\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Unsupported Media Type\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/vnd.api+json"
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"{{editSurveyName}}\",\n  \"description\": \"Changed survey description - {{editSurveyName}}\",\n  \"surveyFrom\": \"2020-02-01T00:00:00Z\",\n  \"surveyTo\": \"2020-02-01T00:00:00Z\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/rasters/:rasterUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"rasters",
														":rasterUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string"
														},
														{
															"key": "rasterUuid",
															"value": "{{rasterUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Patch raster - invalid accept header",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 406\", function () {\r",
															"    pm.response.to.have.status(406);\r",
															"});\r",
															"var message = \"Could not satisfy the request Accept header.\";\r",
															"pm.test(\"Response body message is '\"+message+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(message);\r",
															"});\r",
															"pm.test(\"Response body status is 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Acceptable\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"type": "text",
														"value": "application/atom+xml"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"{{editSurveyName}}\",\n  \"description\": \"Changed survey description - {{editSurveyName}}\",\n  \"surveyFrom\": \"2020-02-01T00:00:00Z\",\n  \"surveyTo\": \"2020-02-01T00:00:00Z\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/rasters/:rasterUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"rasters",
														":rasterUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string"
														},
														{
															"key": "rasterUuid",
															"value": "{{rasterUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": [
												{
													"name": "Successful only when a user has access to org edit perms",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"organisation\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												},
												{
													"name": "When the update org call fails internally",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Patch raster - Invalid auth token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 401\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"pm.test(\"Status code name has Unauthorized\", function () {\r",
															"    pm.response.to.have.status(\"Unauthorized\");\r",
															"});\r",
															"pm.test(\"response body status value is 'forbidden'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"forbidden\");\r",
															"});\r",
															"var errMessage = \"Log in to do this action\";\r",
															"pm.test(\"response body message is '\"+errMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errMessage);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1qTkZRVUkyT1RRM01qTXpOa1l4TmpCQ04wSTVNa0kxUmpFNVFVSkVOelkzTnpnNFJqTXpRZyJ9.eyJodHRwczovL2V4YW1wbGUuY29tL3JvbGVzIjpbInVzZXIiXSwiaHR0cHM6Ly9kamFuZ28td2ViYXBwL3JvbGUiOiJ1c2VyIiwibmlja25hbWUiOiJwYW5rYWouZGV2cmFuaSIsIm5hbWUiOiJwYW5rYWouZGV2cmFuaUBhc3RlcmlhLmNvLmluIiwicGljdHVyZSI6Imh0dHBzOi8vcy5ncmF2YXRhci5jb20vYXZhdGFyLzRjN2YzYzM0OWNkYzkzZmMxODVmMTMzMThhZjIzMjcxP3M9NDgwJnI9cGcmZD1odHRwcyUzQSUyRiUyRmNkbi5hdXRoMC5jb20lMkZhdmF0YXJzJTJGcGEucG5nIiwidXBkYXRlZF9hdCI6IjIwMjAtMDYtMTJUMDc6Mzc6MzkuMDE0WiIsImlzcyI6Imh0dHBzOi8vaW5zaWdodDEuYXV0aDAuY29tLyIsInN1YiI6ImF1dGgwfDVlYzdiMTBjZTZmNGUwMGJmMjAzNzZjMyIsImF1ZCI6IlNzTENHTmdnMHlBN0I3c0g1ZU5WTUZtQ1A5SlZkZGUzIiwiaWF0IjoxNTkyMjAxNzc2LCJleHAiOjE1OTIyMzc3NzZ9.NfOcvlsmhi6na-fut67v3PCOhku1EFYM9SvUCaqhSrM4D5ItQS9d-4Z_H8n3x5nc6r4rvTG09Pn3Gk-sDdf1137QmSdgzC-HfYYVEmR5xbiLYHPmZZnxL9ItjKNBYYbY9VBWzSpT434Vzz7DnjiJkyos3mDrLMACjDLQQ-6jCVplDXkOh0NHzQBWy6traQhkKkLceeZ3sa9Bc4PjQt18jzS5a50VHjitaczIZje7ILPeKtG0T3sNIrISyl5HZUK_KXmyzTMKw_9I9zAExkT9GGMBwqxfC6XpQ57wIvBZJN-i4uVNSd3Qjtw1yrCpz-vPMvIk7sbODtEAATtPpLapww",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"{{editSurveyName}}\",\n  \"description\": \"Changed survey description - {{editSurveyName}}\",\n  \"surveyFrom\": \"2020-02-01T00:00:00Z\",\n  \"surveyTo\": \"2020-02-01T00:00:00Z\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/rasters/:rasterUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"rasters",
														":rasterUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string"
														},
														{
															"key": "rasterUuid",
															"value": "{{rasterUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": [
												{
													"name": "Successful only when a user has access to org edit perms",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"organisation\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												},
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "When the update org call fails internally",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Remove a raster (soft delete)",
									"item": [
										{
											"name": "Remove raster - wrong orgUuid",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"pm.test(\"Response body status is : 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"var errorMessage = \"Resource Not Found\";\r",
															"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/rasters/:rasterUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"rasters",
														":rasterUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"type": "string",
															"value": "))"
														},
														{
															"key": "siteUuid",
															"type": "string",
															"value": "{{siteUuid}}"
														},
														{
															"description": "(Required) ",
															"key": "surveyUuid",
															"type": "string",
															"value": "{{surveyUuid}}"
														},
														{
															"key": "rasterUuid",
															"type": "string",
															"value": "{{rasterUuid}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Remove raster - wrong siteUuid",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"pm.test(\"Response body status is : 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"var errorMessage = \"Resource Not Found\";\r",
															"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/rasters/:rasterUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"rasters",
														":rasterUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"type": "string",
															"value": "{{orgUuid}}"
														},
														{
															"key": "siteUuid",
															"type": "string",
															"value": "cmanbskjcsan"
														},
														{
															"description": "(Required) ",
															"key": "surveyUuid",
															"type": "string",
															"value": "{{surveyUuid}}"
														},
														{
															"key": "rasterUuid",
															"type": "string",
															"value": "{{rasterUuid}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Remove raster - wrong surveyUuid",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"pm.test(\"Response body status is : 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"var errorMessage = \"Resource Not Found\";\r",
															"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/rasters/:rasterUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"rasters",
														":rasterUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"type": "string",
															"value": "{{orgUuid}}"
														},
														{
															"key": "siteUuid",
															"type": "string",
															"value": "{{siteUuid}}"
														},
														{
															"description": "(Required) ",
															"key": "surveyUuid",
															"type": "string",
															"value": "=="
														},
														{
															"key": "rasterUuid",
															"type": "string",
															"value": "{{rasterUuid}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Remove raster - wrong rasterUuid",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"pm.test(\"Response body status is : 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"var errorMessage = \"Resource Not Found\";\r",
															"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/rasters/:rasterUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"rasters",
														":rasterUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"type": "string",
															"value": "{{orgUuid}}"
														},
														{
															"key": "siteUuid",
															"type": "string",
															"value": "{{siteUuid}}"
														},
														{
															"description": "(Required) ",
															"key": "surveyUuid",
															"type": "string",
															"value": "{{surveyUuid}}"
														},
														{
															"key": "rasterUuid",
															"type": "string",
															"value": "_"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Remove a raster (soft delete)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Response body status is : 'success'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
															"});\r",
															"pm.test(\"Response body has message : 'Deleted Raster'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(\"Deleted Raster\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/rasters/:rasterUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"rasters",
														":rasterUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string"
														},
														{
															"key": "rasterUuid",
															"value": "{{rasterUuid}}",
															"type": "string"
														}
													]
												},
												"description": "This is an api reuqest to delete an annotation."
											},
											"response": []
										},
										{
											"name": "Remove raster - Duplicate request",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"pm.test(\"Response body status is : 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"var errorMessage = \"Resource Not Found\";\r",
															"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/rasters/:rasterUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"rasters",
														":rasterUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string",
															"description": "(Required) "
														},
														{
															"key": "rasterUuid",
															"value": "{{rasterUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Remove raster - Invalid accept header",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 406\", function () {\r",
															"    pm.response.to.have.status(406);\r",
															"});\r",
															"var message = \"Could not satisfy the request Accept header.\";\r",
															"pm.test(\"Response body message is '\"+message+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(message);\r",
															"});\r",
															"pm.test(\"Response body status is 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Acceptable\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/rss+xml",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/rasters/:rasterUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"rasters",
														":rasterUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string",
															"description": "(Required) "
														},
														{
															"key": "rasterUuid",
															"value": "{{rasterUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Remove raster - Invalid auth token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 401\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"pm.test(\"Status code name has Unauthorized\", function () {\r",
															"    pm.response.to.have.status(\"Unauthorized\");\r",
															"});\r",
															"pm.test(\"response body status value is 'forbidden'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"forbidden\");\r",
															"});\r",
															"var errMessage = \"Log in to do this action\";\r",
															"pm.test(\"response body message is '\"+errMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errMessage);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1qTkZRVUkyT1RRM01qTXpOa1l4TmpCQ04wSTVNa0kxUmpFNVFVSkVOelkzTnpnNFJqTXpRZyJ9.eyJodHRwczovL2V4YW1wbGUuY29tL3JvbGVzIjpbInVzZXIiXSwiaHR0cHM6Ly9kamFuZ28td2ViYXBwL3JvbGUiOiJ1c2VyIiwibmlja25hbWUiOiJwYW5rYWouZGV2cmFuaSIsIm5hbWUiOiJwYW5rYWouZGV2cmFuaUBhc3RlcmlhLmNvLmluIiwicGljdHVyZSI6Imh0dHBzOi8vcy5ncmF2YXRhci5jb20vYXZhdGFyLzRjN2YzYzM0OWNkYzkzZmMxODVmMTMzMThhZjIzMjcxP3M9NDgwJnI9cGcmZD1odHRwcyUzQSUyRiUyRmNkbi5hdXRoMC5jb20lMkZhdmF0YXJzJTJGcGEucG5nIiwidXBkYXRlZF9hdCI6IjIwMjAtMDYtMTJUMDc6Mzc6MzkuMDE0WiIsImlzcyI6Imh0dHBzOi8vaW5zaWdodDEuYXV0aDAuY29tLyIsInN1YiI6ImF1dGgwfDVlYzdiMTBjZTZmNGUwMGJmMjAzNzZjMyIsImF1ZCI6IlNzTENHTmdnMHlBN0I3c0g1ZU5WTUZtQ1A5SlZkZGUzIiwiaWF0IjoxNTkyMjAxNzc2LCJleHAiOjE1OTIyMzc3NzZ9.NfOcvlsmhi6na-fut67v3PCOhku1EFYM9SvUCaqhSrM4D5ItQS9d-4Z_H8n3x5nc6r4rvTG09Pn3Gk-sDdf1137QmSdgzC-HfYYVEmR5xbiLYHPmZZnxL9ItjKNBYYbY9VBWzSpT434Vzz7DnjiJkyos3mDrLMACjDLQQ-6jCVplDXkOh0NHzQBWy6traQhkKkLceeZ3sa9Bc4PjQt18jzS5a50VHjitaczIZje7ILPeKtG0T3sNIrISyl5HZUK_KXmyzTMKw_9I9zAExkT9GGMBwqxfC6XpQ57wIvBZJN-i4uVNSd3Qjtw1yrCpz-vPMvIk7sbODtEAATtPwwapww",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/rasters/:rasterUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"rasters",
														":rasterUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string",
															"description": "(Required) "
														},
														{
															"key": "rasterUuid",
															"value": "{{rasterUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Vector",
					"item": [
						{
							"name": "A user's API to create a vector(with sufficient perms)",
							"item": [
								{
									"name": "A user's API to create a vector(with sufficient perms)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"vectorName\",\"vectorName\"+Math.floor((Math.random() * 10000000000) + 1));\r",
													"//types = data.vectorType;\r",
													"types = \"geojson\";\r",
													"pm.environment.set(\"vectorType\", types);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response body status is : 'success'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
													"});\r",
													"pm.test(\"Response Body message is 'Vector Created'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(\"Vector Created\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\")  ;\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response body vector name is equal to : '\"+pm.environment.get(\"vectorName\")+\"'\", function () {\r",
													"    pm.expect(pm.response.json().data.vector.name).to.eql(pm.environment.get(\"vectorName\"));\r",
													"});\r",
													"pm.test(\"Response body should have organisation uuid as expected.\", function () {\r",
													"    pm.expect(pm.response.json().data.vector.refUuid.organisationUuid).to.eql(pm.environment.get(\"orgUuid\"));\r",
													"});\r",
													"pm.test(\"Response body should have site uuid as expected.\", function () {\r",
													"    pm.expect(pm.response.json().data.vector.refUuid.siteUuid).to.eql(pm.environment.get(\"siteUuid\"));\r",
													"});\r",
													"pm.test(\"Response body should have survey uuid as expected.\", function () {\r",
													"    pm.expect(pm.response.json().data.vector.refUuid.surveyUuid).to.eql(pm.environment.get(\"surveyUuid\"));\r",
													"});\r",
													"if(pm.expect(pm.response.json().status).to.eql(\"success\")){\r",
													"pm.environment.set(\"vectorUuid\", pm.response.json().data.vector.uuid);\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"name\": \"{{vectorName}}\",\n \"type\": \"{{vectorType}}\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/vectors",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"vectors"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												},
												{
													"key": "surveyUuid",
													"value": "{{surveyUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": [
										{
											"name": "User is not logged in",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"rasterType\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid/raster",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"survey",
														":surveyUuid",
														"raster"
													],
													"variable": [
														{
															"key": "surveyUuid"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "When the create raster call fails internally",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"rasterType\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid/raster",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"survey",
														":surveyUuid",
														"raster"
													],
													"variable": [
														{
															"key": "surveyUuid"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Successful only when a user with sufficient permissions calls the API",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"rasterType\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid/raster",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"survey",
														":surveyUuid",
														"raster"
													],
													"variable": [
														{
															"key": "surveyUuid"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"raster\": {\n   \"name\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"rasterType\": \"<string>\",\n   \"geotiff\": {\n    \"uuid\": \"<string>\",\n    \"downloadURL\": \"<string>\",\n    \"cdnToken\": \"<string>\",\n    \"size\": \"<number>\",\n    \"bandsCount\": \"<number>\",\n    \"bandsInfo\": [\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     },\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     }\n    ],\n    \"bounds\": {\n     \"ne\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"nw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"se\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"sw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     }\n    },\n    \"outline\": {\n     \"type\": \"<string>\",\n     \"geometry\": {\n      \"type\": \"<string>\",\n      \"coordinates\": [\n       [\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ]\n       ]\n      ]\n     },\n     \"properties\": \"<object>\"\n    }\n   },\n   \"cogeotiff\": {\n    \"uuid\": \"<string>\",\n    \"downloadURL\": \"<string>\",\n    \"cdnToken\": \"<string>\",\n    \"size\": \"<number>\",\n    \"bandsCount\": \"<number>\",\n    \"bandsInfo\": [\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     },\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     }\n    ],\n    \"bounds\": {\n     \"ne\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"nw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"se\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"sw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     }\n    },\n    \"outline\": {\n     \"type\": \"<string>\",\n     \"geometry\": {\n      \"type\": \"<string>\",\n      \"coordinates\": [\n       [\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ]\n       ]\n      ]\n     },\n     \"properties\": \"<object>\"\n    },\n    \"minZoom\": \"<number>\",\n    \"maxZoom\": \"<number>\"\n   },\n   \"maptiles\": {\n    \"baseURL\": \"<string>\",\n    \"cdnToken\": \"<string>\",\n    \"bounds\": {\n     \"ne\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"nw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"se\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"sw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     }\n    },\n    \"minZoom\": \"<number>\",\n    \"maxZoom\": \"<number>\"\n   },\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   },\n   \"fileUploadCreds\": {\n    \"url\": \"<string>\",\n    \"method\": \"<string>\",\n    \"headers\": [\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     },\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     }\n    ],\n    \"bodyParams\": [\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     },\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     }\n    ]\n   }\n  }\n }\n}"
										}
									]
								},
								{
									"name": "Create vector - Wrong vector types",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"wrongVectorName\",\"wrongVectorName\"+Math.floor((Math.random() * 10000000000) + 1));\r",
													"//types = data.wrongVectorType;\r",
													"types = \"GEOJSON\";\r",
													"pm.environment.set(\"wrongVectorType\", types);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"pm.test(\"Response body status is : 'failure'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
													"});\r",
													"var message = \"Validation Error\";\r",
													"pm.test(\"Response Body message is '\"+message+\"'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(message);\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\")  ;\r",
													"});\r",
													"var errorMessage = \"'\"+pm.environment.get(\"wrongVectorType\")+\"' is not a choice. Choices are ['geojson', 'shapefile'].\";\r",
													"pm.test(\"Response body should have organisation uuid as expected.\", function () {\r",
													"    pm.expect(pm.response.json().validation_errors.type[0][0]).to.eql(errorMessage);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"name\": \"{{wrongVectorName}}\",\n \"type\":\"{{wrongVectorType}}\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/vectors",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"vectors"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												},
												{
													"key": "surveyUuid",
													"value": "{{surveyUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": [
										{
											"name": "When the create raster call fails internally",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"rasterType\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid/raster",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"survey",
														":surveyUuid",
														"raster"
													],
													"variable": [
														{
															"key": "surveyUuid"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "User is not logged in",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"rasterType\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid/raster",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"survey",
														":surveyUuid",
														"raster"
													],
													"variable": [
														{
															"key": "surveyUuid"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Successful only when a user with sufficient permissions calls the API",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"rasterType\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid/raster",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"survey",
														":surveyUuid",
														"raster"
													],
													"variable": [
														{
															"key": "surveyUuid"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"raster\": {\n   \"name\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"rasterType\": \"<string>\",\n   \"geotiff\": {\n    \"uuid\": \"<string>\",\n    \"downloadURL\": \"<string>\",\n    \"cdnToken\": \"<string>\",\n    \"size\": \"<number>\",\n    \"bandsCount\": \"<number>\",\n    \"bandsInfo\": [\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     },\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     }\n    ],\n    \"bounds\": {\n     \"ne\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"nw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"se\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"sw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     }\n    },\n    \"outline\": {\n     \"type\": \"<string>\",\n     \"geometry\": {\n      \"type\": \"<string>\",\n      \"coordinates\": [\n       [\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ]\n       ]\n      ]\n     },\n     \"properties\": \"<object>\"\n    }\n   },\n   \"cogeotiff\": {\n    \"uuid\": \"<string>\",\n    \"downloadURL\": \"<string>\",\n    \"cdnToken\": \"<string>\",\n    \"size\": \"<number>\",\n    \"bandsCount\": \"<number>\",\n    \"bandsInfo\": [\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     },\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     }\n    ],\n    \"bounds\": {\n     \"ne\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"nw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"se\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"sw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     }\n    },\n    \"outline\": {\n     \"type\": \"<string>\",\n     \"geometry\": {\n      \"type\": \"<string>\",\n      \"coordinates\": [\n       [\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ]\n       ]\n      ]\n     },\n     \"properties\": \"<object>\"\n    },\n    \"minZoom\": \"<number>\",\n    \"maxZoom\": \"<number>\"\n   },\n   \"maptiles\": {\n    \"baseURL\": \"<string>\",\n    \"cdnToken\": \"<string>\",\n    \"bounds\": {\n     \"ne\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"nw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"se\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"sw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     }\n    },\n    \"minZoom\": \"<number>\",\n    \"maxZoom\": \"<number>\"\n   },\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   },\n   \"fileUploadCreds\": {\n    \"url\": \"<string>\",\n    \"method\": \"<string>\",\n    \"headers\": [\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     },\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     }\n    ],\n    \"bodyParams\": [\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     },\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     }\n    ]\n   }\n  }\n }\n}"
										}
									]
								},
								{
									"name": "Create vector - Create duplicate record",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response body status is : 'success'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
													"});\r",
													"pm.test(\"Response Body message is 'Vector Created'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(\"Vector Created\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\")  ;\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response body vector name is equal to : '\"+pm.environment.get(\"vectorName\")+\"'\", function () {\r",
													"    pm.expect(pm.response.json().data.vector.name).to.eql(pm.environment.get(\"vectorName\"));\r",
													"});\r",
													"pm.test(\"Response body should have organisation uuid as expected.\", function () {\r",
													"    pm.expect(pm.response.json().data.vector.refUuid.organisationUuid).to.eql(pm.environment.get(\"orgUuid\"));\r",
													"});\r",
													"pm.test(\"Response body should have site uuid as expected.\", function () {\r",
													"    pm.expect(pm.response.json().data.vector.refUuid.siteUuid).to.eql(pm.environment.get(\"siteUuid\"));\r",
													"});\r",
													"pm.test(\"Response body should have survey uuid as expected.\", function () {\r",
													"    pm.expect(pm.response.json().data.vector.refUuid.surveyUuid).to.eql(pm.environment.get(\"surveyUuid\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"name\": \"{{vectorName}}\",\n \"type\": \"{{vectorType}}\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/vectors",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"vectors"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												},
												{
													"key": "surveyUuid",
													"value": "{{surveyUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": [
										{
											"name": "Successful only when a user with sufficient permissions calls the API",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"rasterType\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid/raster",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"survey",
														":surveyUuid",
														"raster"
													],
													"variable": [
														{
															"key": "surveyUuid"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"raster\": {\n   \"name\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"rasterType\": \"<string>\",\n   \"geotiff\": {\n    \"uuid\": \"<string>\",\n    \"downloadURL\": \"<string>\",\n    \"cdnToken\": \"<string>\",\n    \"size\": \"<number>\",\n    \"bandsCount\": \"<number>\",\n    \"bandsInfo\": [\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     },\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     }\n    ],\n    \"bounds\": {\n     \"ne\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"nw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"se\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"sw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     }\n    },\n    \"outline\": {\n     \"type\": \"<string>\",\n     \"geometry\": {\n      \"type\": \"<string>\",\n      \"coordinates\": [\n       [\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ]\n       ]\n      ]\n     },\n     \"properties\": \"<object>\"\n    }\n   },\n   \"cogeotiff\": {\n    \"uuid\": \"<string>\",\n    \"downloadURL\": \"<string>\",\n    \"cdnToken\": \"<string>\",\n    \"size\": \"<number>\",\n    \"bandsCount\": \"<number>\",\n    \"bandsInfo\": [\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     },\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     }\n    ],\n    \"bounds\": {\n     \"ne\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"nw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"se\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"sw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     }\n    },\n    \"outline\": {\n     \"type\": \"<string>\",\n     \"geometry\": {\n      \"type\": \"<string>\",\n      \"coordinates\": [\n       [\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ]\n       ]\n      ]\n     },\n     \"properties\": \"<object>\"\n    },\n    \"minZoom\": \"<number>\",\n    \"maxZoom\": \"<number>\"\n   },\n   \"maptiles\": {\n    \"baseURL\": \"<string>\",\n    \"cdnToken\": \"<string>\",\n    \"bounds\": {\n     \"ne\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"nw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"se\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"sw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     }\n    },\n    \"minZoom\": \"<number>\",\n    \"maxZoom\": \"<number>\"\n   },\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   },\n   \"fileUploadCreds\": {\n    \"url\": \"<string>\",\n    \"method\": \"<string>\",\n    \"headers\": [\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     },\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     }\n    ],\n    \"bodyParams\": [\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     },\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     }\n    ]\n   }\n  }\n }\n}"
										},
										{
											"name": "User is not logged in",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"rasterType\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid/raster",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"survey",
														":surveyUuid",
														"raster"
													],
													"variable": [
														{
															"key": "surveyUuid"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "When the create raster call fails internally",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"rasterType\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid/raster",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"survey",
														":surveyUuid",
														"raster"
													],
													"variable": [
														{
															"key": "surveyUuid"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Create vector - Wrong orgUuid",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"pm.test(\"Response body has status as 'failure'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"var errorMessage = \"Resource Not Found\";\r",
													"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"name\": \"{{vectorName}}\",\n \"type\": \"{{vectorType}}\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/vectors",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"vectors"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"type": "string",
													"value": "a"
												},
												{
													"key": "siteUuid",
													"type": "string",
													"value": "{{siteUuid}}"
												},
												{
													"key": "surveyUuid",
													"type": "string",
													"value": "{{surveyUuid}}"
												}
											]
										}
									},
									"response": [
										{
											"name": "Successful only when a user with sufficient permissions calls the API",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"rasterType\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid/raster",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"survey",
														":surveyUuid",
														"raster"
													],
													"variable": [
														{
															"key": "surveyUuid"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"raster\": {\n   \"name\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"rasterType\": \"<string>\",\n   \"geotiff\": {\n    \"uuid\": \"<string>\",\n    \"downloadURL\": \"<string>\",\n    \"cdnToken\": \"<string>\",\n    \"size\": \"<number>\",\n    \"bandsCount\": \"<number>\",\n    \"bandsInfo\": [\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     },\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     }\n    ],\n    \"bounds\": {\n     \"ne\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"nw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"se\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"sw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     }\n    },\n    \"outline\": {\n     \"type\": \"<string>\",\n     \"geometry\": {\n      \"type\": \"<string>\",\n      \"coordinates\": [\n       [\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ]\n       ]\n      ]\n     },\n     \"properties\": \"<object>\"\n    }\n   },\n   \"cogeotiff\": {\n    \"uuid\": \"<string>\",\n    \"downloadURL\": \"<string>\",\n    \"cdnToken\": \"<string>\",\n    \"size\": \"<number>\",\n    \"bandsCount\": \"<number>\",\n    \"bandsInfo\": [\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     },\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     }\n    ],\n    \"bounds\": {\n     \"ne\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"nw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"se\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"sw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     }\n    },\n    \"outline\": {\n     \"type\": \"<string>\",\n     \"geometry\": {\n      \"type\": \"<string>\",\n      \"coordinates\": [\n       [\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ]\n       ]\n      ]\n     },\n     \"properties\": \"<object>\"\n    },\n    \"minZoom\": \"<number>\",\n    \"maxZoom\": \"<number>\"\n   },\n   \"maptiles\": {\n    \"baseURL\": \"<string>\",\n    \"cdnToken\": \"<string>\",\n    \"bounds\": {\n     \"ne\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"nw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"se\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"sw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     }\n    },\n    \"minZoom\": \"<number>\",\n    \"maxZoom\": \"<number>\"\n   },\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   },\n   \"fileUploadCreds\": {\n    \"url\": \"<string>\",\n    \"method\": \"<string>\",\n    \"headers\": [\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     },\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     }\n    ],\n    \"bodyParams\": [\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     },\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     }\n    ]\n   }\n  }\n }\n}"
										},
										{
											"name": "When the create raster call fails internally",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"rasterType\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid/raster",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"survey",
														":surveyUuid",
														"raster"
													],
													"variable": [
														{
															"key": "surveyUuid"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "User is not logged in",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"rasterType\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid/raster",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"survey",
														":surveyUuid",
														"raster"
													],
													"variable": [
														{
															"key": "surveyUuid"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Create vector - Wrong siteUuid",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"pm.test(\"Response body has status as 'failure'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"var errorMessage = \"Resource Not Found\";\r",
													"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"name\": \"{{vectorName}}\",\n \"type\": \"{{vectorType}}\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/vectors",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"vectors"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"type": "string",
													"value": "{{orgUuid}}"
												},
												{
													"key": "siteUuid",
													"type": "string",
													"value": "a"
												},
												{
													"key": "surveyUuid",
													"type": "string",
													"value": "{{surveyUuid}}"
												}
											]
										}
									},
									"response": [
										{
											"name": "User is not logged in",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"rasterType\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid/raster",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"survey",
														":surveyUuid",
														"raster"
													],
													"variable": [
														{
															"key": "surveyUuid"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "When the create raster call fails internally",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"rasterType\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid/raster",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"survey",
														":surveyUuid",
														"raster"
													],
													"variable": [
														{
															"key": "surveyUuid"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Successful only when a user with sufficient permissions calls the API",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"rasterType\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid/raster",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"survey",
														":surveyUuid",
														"raster"
													],
													"variable": [
														{
															"key": "surveyUuid"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"raster\": {\n   \"name\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"rasterType\": \"<string>\",\n   \"geotiff\": {\n    \"uuid\": \"<string>\",\n    \"downloadURL\": \"<string>\",\n    \"cdnToken\": \"<string>\",\n    \"size\": \"<number>\",\n    \"bandsCount\": \"<number>\",\n    \"bandsInfo\": [\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     },\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     }\n    ],\n    \"bounds\": {\n     \"ne\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"nw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"se\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"sw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     }\n    },\n    \"outline\": {\n     \"type\": \"<string>\",\n     \"geometry\": {\n      \"type\": \"<string>\",\n      \"coordinates\": [\n       [\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ]\n       ]\n      ]\n     },\n     \"properties\": \"<object>\"\n    }\n   },\n   \"cogeotiff\": {\n    \"uuid\": \"<string>\",\n    \"downloadURL\": \"<string>\",\n    \"cdnToken\": \"<string>\",\n    \"size\": \"<number>\",\n    \"bandsCount\": \"<number>\",\n    \"bandsInfo\": [\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     },\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     }\n    ],\n    \"bounds\": {\n     \"ne\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"nw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"se\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"sw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     }\n    },\n    \"outline\": {\n     \"type\": \"<string>\",\n     \"geometry\": {\n      \"type\": \"<string>\",\n      \"coordinates\": [\n       [\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ]\n       ]\n      ]\n     },\n     \"properties\": \"<object>\"\n    },\n    \"minZoom\": \"<number>\",\n    \"maxZoom\": \"<number>\"\n   },\n   \"maptiles\": {\n    \"baseURL\": \"<string>\",\n    \"cdnToken\": \"<string>\",\n    \"bounds\": {\n     \"ne\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"nw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"se\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"sw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     }\n    },\n    \"minZoom\": \"<number>\",\n    \"maxZoom\": \"<number>\"\n   },\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   },\n   \"fileUploadCreds\": {\n    \"url\": \"<string>\",\n    \"method\": \"<string>\",\n    \"headers\": [\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     },\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     }\n    ],\n    \"bodyParams\": [\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     },\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     }\n    ]\n   }\n  }\n }\n}"
										}
									]
								},
								{
									"name": "Create vector - Wrong surveyUuid",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"pm.test(\"Response body has status as 'failure'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"var errorMessage = \"Resource Not Found\";\r",
													"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"name\": \"{{vectorName}}\",\n \"type\": \"{{vectorType}}\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/vectors",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"vectors"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"type": "string",
													"value": "{{orgUuid}}"
												},
												{
													"key": "siteUuid",
													"type": "string",
													"value": "{{siteUuid}}"
												},
												{
													"key": "surveyUuid",
													"type": "string",
													"value": "a"
												}
											]
										}
									},
									"response": [
										{
											"name": "Successful only when a user with sufficient permissions calls the API",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"rasterType\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid/raster",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"survey",
														":surveyUuid",
														"raster"
													],
													"variable": [
														{
															"key": "surveyUuid"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"raster\": {\n   \"name\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"rasterType\": \"<string>\",\n   \"geotiff\": {\n    \"uuid\": \"<string>\",\n    \"downloadURL\": \"<string>\",\n    \"cdnToken\": \"<string>\",\n    \"size\": \"<number>\",\n    \"bandsCount\": \"<number>\",\n    \"bandsInfo\": [\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     },\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     }\n    ],\n    \"bounds\": {\n     \"ne\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"nw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"se\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"sw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     }\n    },\n    \"outline\": {\n     \"type\": \"<string>\",\n     \"geometry\": {\n      \"type\": \"<string>\",\n      \"coordinates\": [\n       [\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ]\n       ]\n      ]\n     },\n     \"properties\": \"<object>\"\n    }\n   },\n   \"cogeotiff\": {\n    \"uuid\": \"<string>\",\n    \"downloadURL\": \"<string>\",\n    \"cdnToken\": \"<string>\",\n    \"size\": \"<number>\",\n    \"bandsCount\": \"<number>\",\n    \"bandsInfo\": [\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     },\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     }\n    ],\n    \"bounds\": {\n     \"ne\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"nw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"se\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"sw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     }\n    },\n    \"outline\": {\n     \"type\": \"<string>\",\n     \"geometry\": {\n      \"type\": \"<string>\",\n      \"coordinates\": [\n       [\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ]\n       ]\n      ]\n     },\n     \"properties\": \"<object>\"\n    },\n    \"minZoom\": \"<number>\",\n    \"maxZoom\": \"<number>\"\n   },\n   \"maptiles\": {\n    \"baseURL\": \"<string>\",\n    \"cdnToken\": \"<string>\",\n    \"bounds\": {\n     \"ne\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"nw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"se\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"sw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     }\n    },\n    \"minZoom\": \"<number>\",\n    \"maxZoom\": \"<number>\"\n   },\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   },\n   \"fileUploadCreds\": {\n    \"url\": \"<string>\",\n    \"method\": \"<string>\",\n    \"headers\": [\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     },\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     }\n    ],\n    \"bodyParams\": [\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     },\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     }\n    ]\n   }\n  }\n }\n}"
										},
										{
											"name": "When the create raster call fails internally",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"rasterType\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid/raster",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"survey",
														":surveyUuid",
														"raster"
													],
													"variable": [
														{
															"key": "surveyUuid"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "User is not logged in",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"rasterType\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid/raster",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"survey",
														":surveyUuid",
														"raster"
													],
													"variable": [
														{
															"key": "surveyUuid"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Create vector - adding vectortype as property",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Response body status is 'failure'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Response body message is 'Validation Error'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(\"Validation Error\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\")  ;\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"var errorMessage = \"field is required.\";\r",
													"pm.test(\"Response body validation error message is '\"+errorMessage+\"' \", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.validation_errors.type[0][0]).to.eql(errorMessage);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"name\": \"{{vectorName}}\",\n \"vectortype\": \"{{vectorType}}\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/vectors",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"vectors"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												},
												{
													"key": "surveyUuid",
													"value": "{{surveyUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": [
										{
											"name": "Successful only when a user with sufficient permissions calls the API",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"rasterType\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid/raster",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"survey",
														":surveyUuid",
														"raster"
													],
													"variable": [
														{
															"key": "surveyUuid"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"raster\": {\n   \"name\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"rasterType\": \"<string>\",\n   \"geotiff\": {\n    \"uuid\": \"<string>\",\n    \"downloadURL\": \"<string>\",\n    \"cdnToken\": \"<string>\",\n    \"size\": \"<number>\",\n    \"bandsCount\": \"<number>\",\n    \"bandsInfo\": [\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     },\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     }\n    ],\n    \"bounds\": {\n     \"ne\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"nw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"se\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"sw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     }\n    },\n    \"outline\": {\n     \"type\": \"<string>\",\n     \"geometry\": {\n      \"type\": \"<string>\",\n      \"coordinates\": [\n       [\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ]\n       ]\n      ]\n     },\n     \"properties\": \"<object>\"\n    }\n   },\n   \"cogeotiff\": {\n    \"uuid\": \"<string>\",\n    \"downloadURL\": \"<string>\",\n    \"cdnToken\": \"<string>\",\n    \"size\": \"<number>\",\n    \"bandsCount\": \"<number>\",\n    \"bandsInfo\": [\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     },\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     }\n    ],\n    \"bounds\": {\n     \"ne\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"nw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"se\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"sw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     }\n    },\n    \"outline\": {\n     \"type\": \"<string>\",\n     \"geometry\": {\n      \"type\": \"<string>\",\n      \"coordinates\": [\n       [\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ]\n       ]\n      ]\n     },\n     \"properties\": \"<object>\"\n    },\n    \"minZoom\": \"<number>\",\n    \"maxZoom\": \"<number>\"\n   },\n   \"maptiles\": {\n    \"baseURL\": \"<string>\",\n    \"cdnToken\": \"<string>\",\n    \"bounds\": {\n     \"ne\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"nw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"se\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"sw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     }\n    },\n    \"minZoom\": \"<number>\",\n    \"maxZoom\": \"<number>\"\n   },\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   },\n   \"fileUploadCreds\": {\n    \"url\": \"<string>\",\n    \"method\": \"<string>\",\n    \"headers\": [\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     },\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     }\n    ],\n    \"bodyParams\": [\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     },\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     }\n    ]\n   }\n  }\n }\n}"
										},
										{
											"name": "User is not logged in",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"rasterType\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid/raster",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"survey",
														":surveyUuid",
														"raster"
													],
													"variable": [
														{
															"key": "surveyUuid"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "When the create raster call fails internally",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"rasterType\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid/raster",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"survey",
														":surveyUuid",
														"raster"
													],
													"variable": [
														{
															"key": "surveyUuid"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Create vector - Create without vector name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response body status is : 'success'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
													"});\r",
													"pm.test(\"Response Body message is 'Vector Created'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(\"Vector Created\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\")  ;\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response body should have organisation uuid as expected.\", function () {\r",
													"    pm.expect(pm.response.json().data.vector.refUuid.organisationUuid).to.eql(pm.environment.get(\"orgUuid\"));\r",
													"});\r",
													"pm.test(\"Response body should have site uuid as expected.\", function () {\r",
													"    pm.expect(pm.response.json().data.vector.refUuid.siteUuid).to.eql(pm.environment.get(\"siteUuid\"));\r",
													"});\r",
													"pm.test(\"Response body should have survey uuid as expected.\", function () {\r",
													"    pm.expect(pm.response.json().data.vector.refUuid.surveyUuid).to.eql(pm.environment.get(\"surveyUuid\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"type\": \"{{vectorType}}\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/vectors",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"vectors"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												},
												{
													"key": "surveyUuid",
													"value": "{{surveyUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": [
										{
											"name": "User is not logged in",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"rasterType\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid/raster",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"survey",
														":surveyUuid",
														"raster"
													],
													"variable": [
														{
															"key": "surveyUuid"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Successful only when a user with sufficient permissions calls the API",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"rasterType\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid/raster",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"survey",
														":surveyUuid",
														"raster"
													],
													"variable": [
														{
															"key": "surveyUuid"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"raster\": {\n   \"name\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"rasterType\": \"<string>\",\n   \"geotiff\": {\n    \"uuid\": \"<string>\",\n    \"downloadURL\": \"<string>\",\n    \"cdnToken\": \"<string>\",\n    \"size\": \"<number>\",\n    \"bandsCount\": \"<number>\",\n    \"bandsInfo\": [\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     },\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     }\n    ],\n    \"bounds\": {\n     \"ne\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"nw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"se\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"sw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     }\n    },\n    \"outline\": {\n     \"type\": \"<string>\",\n     \"geometry\": {\n      \"type\": \"<string>\",\n      \"coordinates\": [\n       [\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ]\n       ]\n      ]\n     },\n     \"properties\": \"<object>\"\n    }\n   },\n   \"cogeotiff\": {\n    \"uuid\": \"<string>\",\n    \"downloadURL\": \"<string>\",\n    \"cdnToken\": \"<string>\",\n    \"size\": \"<number>\",\n    \"bandsCount\": \"<number>\",\n    \"bandsInfo\": [\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     },\n     {\n      \"bandNumber\": \"<number>\",\n      \"bandName\": \"<string>\",\n      \"minValue\": \"<string>\",\n      \"maxValue\": \"<string>\"\n     }\n    ],\n    \"bounds\": {\n     \"ne\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"nw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"se\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"sw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     }\n    },\n    \"outline\": {\n     \"type\": \"<string>\",\n     \"geometry\": {\n      \"type\": \"<string>\",\n      \"coordinates\": [\n       [\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ]\n       ]\n      ]\n     },\n     \"properties\": \"<object>\"\n    },\n    \"minZoom\": \"<number>\",\n    \"maxZoom\": \"<number>\"\n   },\n   \"maptiles\": {\n    \"baseURL\": \"<string>\",\n    \"cdnToken\": \"<string>\",\n    \"bounds\": {\n     \"ne\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"nw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"se\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     },\n     \"sw\": {\n      \"lat\": \"<number>\",\n      \"lng\": \"<number>\"\n     }\n    },\n    \"minZoom\": \"<number>\",\n    \"maxZoom\": \"<number>\"\n   },\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   },\n   \"fileUploadCreds\": {\n    \"url\": \"<string>\",\n    \"method\": \"<string>\",\n    \"headers\": [\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     },\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     }\n    ],\n    \"bodyParams\": [\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     },\n     {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n     }\n    ]\n   }\n  }\n }\n}"
										},
										{
											"name": "When the create raster call fails internally",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"rasterType\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid/raster",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"survey",
														":surveyUuid",
														"raster"
													],
													"variable": [
														{
															"key": "surveyUuid"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Create vector - More than 50 char name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Response body status is 'failure'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Response body message is 'Validation Error'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(\"Validation Error\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\")  ;\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"var errMessage = \"Ensure this field has no more than 50 characters.\";\r",
													"pm.test(\"Response body validation error message is '\"+errMessage+\"' \", function () {\r",
													"    pm.expect(pm.response.json().validation_errors.name[0][0]).to.eql(errMessage);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"name\": \"Delete It demoajwhkdgajskgdjasgbjasbdjasbdagdiuoawlhbdkjbaksjbajhdaskjbkjasbfkabsfhaskjfhajksbfkjahvioushilkfkbsfm,bmdbvdzmbvmddnbavkjsabvlabkvjbskvhskalvh,smbvkjhiUHIUWHFKH28957438276I3U4Y68376829TYGIUWHEIUHG3Y8976IHKASKLJFHKWVJKBSAJVKHBWYGVUKWGHJWBMHBSJBKYUWgfyuwgsite\",\n \"type\": \"geojson\"\n}\n"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/vectors",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"vectors"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												},
												{
													"key": "surveyUuid",
													"value": "{{surveyUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": [
										{
											"name": "Successful only when a user with sufficient permissions calls the API",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid",
														"site"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"site\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"organisationUuid\": \"<string>\",\n   \"location\": \"<string>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
										},
										{
											"name": "User is not logged in",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid",
														"site"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "When the create site call fails internally",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid",
														"site"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Create vector - Without request body",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Response body status is 'failure'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Response body message is 'Validation Error'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(\"Validation Error\");\r",
													"});\r",
													"var errorMessage = \"field is required.\";\r",
													"pm.test(\"Response body validation error message is '\"+errorMessage+\"'\", function () {\r",
													"    pm.expect(pm.response.json().validation_errors.type[0][0]).to.eql(errorMessage);\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\")  ;\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/vectors",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"vectors"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												},
												{
													"key": "surveyUuid",
													"value": "{{surveyUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create vector - Invalid request body json",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"pm.test(\"Response body status is 'failure'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status).to.eql(\"failure\");\r",
													"});\r",
													"var errorMessage = \"JSON parse error\";\r",
													"pm.test(\"Response body validation error message is '\"+errorMessage+\"' \", function () {\r",
													"    pm.expect(pm.response.json().message).to.contain(errorMessage);\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\")  ;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n \"name\": \"{{vectorName}}\",\r\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/vectors",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"vectors"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												},
												{
													"key": "surveyUuid",
													"value": "{{surveyUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create vector - Support alph numaric and special character",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response body status is 'success'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"});\r",
													"pm.test(\"Response body message is 'Vector Created'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.eql(\"Vector Created\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\")  ;\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"name\": \"Delete It !@#$%^&*()_+{}|][\\\\':;?\",\n  \"type\": \"geojson\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/vectors",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"vectors"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												},
												{
													"key": "surveyUuid",
													"value": "{{surveyUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": [
										{
											"name": "Successful only when a user with sufficient permissions calls the API",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid",
														"site"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"site\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"organisationUuid\": \"<string>\",\n   \"location\": \"<string>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
										},
										{
											"name": "User is not logged in",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid",
														"site"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "When the create site call fails internally",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid",
														"site"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Create vector -  Invalid accept header",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 406\", function () {\r",
													"    pm.response.to.have.status(406);\r",
													"});\r",
													"var message = \"Could not satisfy the request Accept header.\";\r",
													"pm.test(\"Response body message is '\"+message+\"'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(message);\r",
													"});\r",
													"pm.test(\"Response body status is 'failure'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Not Acceptable\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/font-woff"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"name\": \"{{vectorName}}\",\n \"vectorType\": \"GEOJSON\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/vectors",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"vectors"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												},
												{
													"key": "surveyUuid",
													"value": "{{surveyUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create vector -  Invalid content-type header",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 415\", function () {\r",
													"    pm.response.to.have.status(415);\r",
													"});\r",
													"pm.test(\"Response Body has status as 'failure'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Response Body has message as 'Unsupported media type'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.contain(\"Unsupported media type\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Unsupported Media Type\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/pdf"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"name\": \"{{vectorName}}\",\n \"vectorType\": \"GEOJSON\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/vectors",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"vectors"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												},
												{
													"key": "surveyUuid",
													"value": "{{surveyUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create vector - Invalid auth token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"pm.test(\"Status code name has Unauthorized\", function () {\r",
													"    pm.response.to.have.status(\"Unauthorized\");\r",
													"});\r",
													"pm.test(\"response body status value is 'forbidden'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"forbidden\");\r",
													"});\r",
													"var errMessage = \"Log in to do this action\";\r",
													"pm.test(\"response body message is '\"+errMessage+\"'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(errMessage);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJSUzIwwiIsInR5cCI6IkpXVCIsImtpZCI6Ik1qTkZRVUkyT1RRM01qTXpOa1l4TmpCQ04wSTVNa0kxUmpFNVFVSkVOelkzTnpnNFJqTXpRZyJ9.eyJodHRwczovL2V4YW1wbGUuY29tL3JvbGVzIjpbInVzZXIiXSwiaHR0cHM6Ly9kamFuZ28td2ViYXBwL3JvbGUiOiJ1c2VyIiwibmlja25hbWUiOiJwYW5rYWouZGV2cmFuaSIsIm5hbWUiOiJwYW5rYWouZGV2cmFuaUBhc3RlcmlhLmNvLmluIiwicGljdHVyZSI6Imh0dHBzOi8vcy5ncmF2YXRhci5jb20vYXZhdGFyLzRjN2YzYzM0OWNkYzkzZmMxODVmMTMzMThhZjIzMjcxP3M9NDgwJnI9cGcmZD1odHRwcyUzQSUyRiUyRmNkbi5hdXRoMC5jb20lMkZhdmF0YXJzJTJGcGEucG5nIiwidXBkYXRlZF9hdCI6IjIwMjAtMDYtMTJUMDc6Mzc6MzkuMDE0WiIsImlzcyI6Imh0dHBzOi8vaW5zaWdodDEuYXV0aDAuY29tLyIsInN1YiI6ImF1dGgwfDVlYzdiMTBjZTZmNGUwMGJmMjAzNzZjMyIsImF1ZCI6IlNzTENHTmdnMHlBN0I3c0g1ZU5WTUZtQ1A5SlZkZGUzIiwiaWF0IjoxNTkyMjAxNzc2LCJleHAiOjE1OTIyMzc3NzZ9.NfOcvlsmhi6na-fut67v3PCOhku1wwYM9SvUCaqhSrM4D5ItQS9d-4Z_H8n3x5nc6r4rvTG09Pn3Gk-sDdf1137QmSdgzC-HfYYVEmR5xbiLYHPmZZnxL9ItjKNBYYbY9VBWzSpT434Vzz7DnjiJkyos3mDrLMACjDLQQ-6jCVplDXkOh0NHzQBWy6traQhkKkLceeZ3sa9Bc4PjQt18jzS5a50VHjitaczIZje7ILPeKtG0T3sNIrISyl5HZUK_KXmyzTMKw_9I9zAExkT9GGMBwqxfC6XpQ57wIvBZJN-i4uVNSd3Qjtw1yrCpz-vPMvIk7sbODtEAATtPwwapww",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"name\": \"{{vectorName}}\",\n \"vectorType\": \"GEOJSON\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/vectors",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"vectors"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												},
												{
													"key": "surveyUuid",
													"value": "{{surveyUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": [
										{
											"name": "When the create site call fails internally",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid",
														"site"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Successful only when a user with sufficient permissions calls the API",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid",
														"site"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"site\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"organisationUuid\": \"<string>\",\n   \"location\": \"<string>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
										},
										{
											"name": "User is not logged in",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"location\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid/site",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisation",
														":organisationUuid",
														"site"
													],
													"variable": [
														{
															"key": "organisationUuid"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Get all the vectors User has access to",
							"item": [
								{
									"name": "Get all the vectors User has access to",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Body matches string : 'success'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/vectors",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"vectors"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												},
												{
													"key": "surveyUuid",
													"value": "{{surveyUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all vectors - with request body",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Body matches string : 'success'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n \"name\": \"{{rasterName}}\",\r\n \"rasterType\": \"RGB\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/vectors",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"vectors"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												},
												{
													"key": "surveyUuid",
													"value": "{{surveyUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all vectors - wrong orgUuid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"pm.test(\"Response body has status as 'failure'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"var errorMessage = \"Resource Not Found\";\r",
													"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n \"name\": \"{{annotationName}}\",\r\n \"geojson\": {\r\n  \"type\": \"Feature\",\r\n  \"geometry\": {\r\n   \"type\": \"Point\",\r\n   \"coordinates\": [\r\n    6426718.850533903,\r\n    21610080.91059555\r\n   ]\r\n  },\r\n  \"properties\": {}\r\n }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/vectors",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"vectors"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "awijalnkskc",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												},
												{
													"key": "surveyUuid",
													"value": "{{surveyUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all vectors - wrong siteUuid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"pm.test(\"Response body has status as 'failure'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"var errorMessage = \"Resource Not Found\";\r",
													"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n \"name\": \"{{annotationName}}\",\r\n \"geojson\": {\r\n  \"type\": \"Feature\",\r\n  \"geometry\": {\r\n   \"type\": \"Point\",\r\n   \"coordinates\": [\r\n    6426718.850533903,\r\n    21610080.91059555\r\n   ]\r\n  },\r\n  \"properties\": {}\r\n }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/vectors",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"vectors"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "asdka[spd",
													"type": "string"
												},
												{
													"key": "surveyUuid",
													"value": "{{surveyUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all vectors - wrong surveyUuid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"pm.test(\"Response body has status as 'failure'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"var errorMessage = \"Resource Not Found\";\r",
													"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n \"name\": \"{{annotationName}}\",\r\n \"geojson\": {\r\n  \"type\": \"Feature\",\r\n  \"geometry\": {\r\n   \"type\": \"Point\",\r\n   \"coordinates\": [\r\n    6426718.850533903,\r\n    21610080.91059555\r\n   ]\r\n  },\r\n  \"properties\": {}\r\n }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/vectors",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"vectors"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												},
												{
													"key": "surveyUuid",
													"value": "adsaev;llk",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all vectors - Invalid accept header",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 406\", function () {\r",
													"    pm.response.to.have.status(406);\r",
													"});\r",
													"var message = \"Could not satisfy the request Accept header.\";\r",
													"pm.test(\"Response body message is '\"+message+\"'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(message);\r",
													"});\r",
													"pm.test(\"Response body status is 'failure'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Not Acceptable\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/javascript"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/vectors",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"vectors"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												},
												{
													"key": "surveyUuid",
													"value": "{{surveyUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all vectors - Invalid auth token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"pm.test(\"Status code name has Unauthorized\", function () {\r",
													"    pm.response.to.have.status(\"Unauthorized\");\r",
													"});\r",
													"pm.test(\"response body status value is 'forbidden'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"forbidden\");\r",
													"});\r",
													"var errMessage = \"Log in to do this action\";\r",
													"pm.test(\"response body message is '\"+errMessage+\"'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(errMessage);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1qTkZRVUkyT1RRM01qTXpOa1l4TmpCQ04wSTVNa0kxUmpFNVFVSkVOelkzTnpnNFJqTXpRZyJ9.eyJodHRwczovL2V4YW1wbGUuY29tL3JvbGVzIjpbInVzZXIiXSwiaHR0cHM6Ly9kamFuZ28td2ViYXBwL3JvbGUiOiJ1c2VyIiwibmlja25hbWUiOiJwYW5rYWouZGV2cmFuaSIsIm5hbWUiOiJwYW5rYWouZGV2cmFuaUBhc3RlcmlhLmNvLmluIiwicGljdHVyZSI6Imh0dHBzOi8vcy5ncmF2YXRhci5jb20vYXZhdGFyLzRjN2YzYzM0OWNkYzkzZmMxODVmMTMzMThhZjIzMjcxP3M9NDgwJnI9cGcmZD1odHRwcyUzQSUyRiUyRmNkbi5hdXRoMC5jb20lMkZhdmF0YXJzJTJGcGEucG5nIiwidXBkYXRlZF9hdCI6IjIwMjAtMDYtMTBUMDc6Mzc6MjEuNDM4WiIsImlzcyI6Imh0dHBzOi8vaW5zaWdodDEuYXV0aDAuY29tLyIsInN1YiI6ImF1dGgwfDVlYzdiMTBjZTZmNGUwMGJmMjAzNzZjMyIsImF1ZCI6IlNzTENHTmdnMHlBN0I3c0g1ZU5WTUZtQ1A5SlZkZGUzIiwiaWF0IjoxNTkxODc4OTI1LCJleHAiOjE1OTE5MTQ5MjV9.b-FwIG8vG9rtPDVAhQjlf2tzV9nlq8RFqL1w264skuxsXR01b067gXzOAh5i0VXQ_J5WDMTV-DDkpeUZwE_m57Tl1jSJ_4n0dSWFd39_TI0jNiDQ23qt_OfmDTjEVf0b7GMj3hDk5Vwi0S7BumpE67jX2Pk1QayPXpfBGz2z3kC8qi1pXddWnCPB_E-LtZ6fwmbyOQ-HDSbkcdadBlqtRAPpNWx7APOf-6XbdDB6nF19s_BD1oKJNX2ieKqfV3Ggf2opGHtwrvusd2yFYnCbvdy9pnOTsB4SmrZUMDEArAmTTp5pXqx6UytJ1TQ2fqsBE6DEPCwYK_jLL7QLjFmsWR",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/vectors",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"vectors"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												},
												{
													"key": "surveyUuid",
													"value": "{{surveyUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": [
										{
											"name": "User is not logged in",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisations",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisations"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Fired on the main/landing page",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisations",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisations"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"organisations\": [\n   {\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"permalink\": \"<string>\",\n    \"uuid\": \"<string>\",\n    \"metaData\": {\n     \"userRole\": {}\n    }\n   },\n   {\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"permalink\": \"<string>\",\n    \"uuid\": \"<string>\",\n    \"metaData\": {\n     \"userRole\": {}\n    }\n   }\n  ]\n }\n}"
										}
									]
								}
							]
						},
						{
							"name": "vector/{vector Uuid}",
							"item": [
								{
									"name": "Get details of an vector User has access to",
									"item": [
										{
											"name": "Get details of a vector User has access to",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Response body has status as 'success'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response body vector name is equal to : '\"+pm.environment.get(\"vectorName\")+\"'\", function () {\r",
															"    pm.expect(pm.response.json().data.vector.name).to.eql(pm.environment.get(\"vectorName\"));\r",
															"});\r",
															"pm.test(\"Response body should have vector uuid as expected.\", function () {;\r",
															"    pm.expect(pm.response.json().data.vector.uuid).to.eql(pm.environment.get(\"vectorUuid\"));\r",
															"});\r",
															"pm.test(\"Response body should have survey uuid as expected.\", function () {;\r",
															"    pm.expect(pm.response.json().data.vector.refUuid.surveyUuid).to.eql(pm.environment.get(\"surveyUuid\"));\r",
															"});\r",
															"pm.test(\"Response body should have site uuid as expected.\", function () {;\r",
															"    pm.expect(pm.response.json().data.vector.refUuid.siteUuid).to.eql(pm.environment.get(\"siteUuid\"));\r",
															"});\r",
															"pm.test(\"Response body should have site uuid as expected.\", function () {;\r",
															"    pm.expect(pm.response.json().data.vector.refUuid.organisationUuid).to.eql(pm.environment.get(\"orgUuid\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/vectors/:vectorUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"vectors",
														":vectorUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string",
															"description": "(Required) "
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string",
															"description": "(Required) "
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string",
															"description": "(Required) "
														},
														{
															"key": "vectorUuid",
															"value": "{{vectorUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": [
												{
													"name": "Successful only when a user has access to annotation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/core/v1/organisation/:organisationUuid/site/:siteUuid/survey/:surveyUuid/annotation/:annotationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"core",
																"v1",
																"organisation",
																":organisationUuid",
																"site",
																":siteUuid",
																"survey",
																":surveyUuid",
																"annotation",
																":annotationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																},
																{
																	"key": "siteUuid"
																},
																{
																	"key": "surveyUuid"
																},
																{
																	"key": "annotationUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"queued\",\n \"message\": \"laboris sint\",\n \"data\": {\n  \"annotation\": {\n   \"name\": \"nostrud eu\",\n   \"refUuid\": {\n    \"organisationUuid\": \"velit in nostrud Excepteur\",\n    \"siteUuid\": \"Lorem fugiat mollit\",\n    \"surveyUuid\": \"irure elit ea\"\n   },\n   \"geojson\": {\n    \"type\": \"Feature\",\n    \"geometry\": {\n     \"type\": \"Point\",\n     \"coordinates\": [\n      -4283317.660607502,\n      -60014066.241007894\n     ]\n    },\n    \"properties\": \"<object>\"\n   },\n   \"permalink\": \"aliqua minim velit ut in\",\n   \"uuid\": \"incididunt sit\",\n   \"createdBy\": \"Ut Duis sit\",\n   \"createdAt\": -22587323.52630721,\n   \"updatedAt\": 89449165.98390305,\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												},
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/core/v1/organisation/:organisationUuid/site/:siteUuid/survey/:surveyUuid/annotation/:annotationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"core",
																"v1",
																"organisation",
																":organisationUuid",
																"site",
																":siteUuid",
																"survey",
																":surveyUuid",
																"annotation",
																":annotationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																},
																{
																	"key": "siteUuid"
																},
																{
																	"key": "surveyUuid"
																},
																{
																	"key": "annotationUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "When the get annotation details call fails internally",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/core/v1/organisation/:organisationUuid/site/:siteUuid/survey/:surveyUuid/annotation/:annotationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"core",
																"v1",
																"organisation",
																":organisationUuid",
																"site",
																":siteUuid",
																"survey",
																":surveyUuid",
																"annotation",
																":annotationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																},
																{
																	"key": "siteUuid"
																},
																{
																	"key": "surveyUuid"
																},
																{
																	"key": "annotationUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Get vector - with request body",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Response body has status as 'success'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response body vector name is equal to : '\"+pm.environment.get(\"vectorName\")+\"'\", function () {\r",
															"    pm.expect(pm.response.json().data.vector.name).to.eql(pm.environment.get(\"vectorName\"));\r",
															"});\r",
															"pm.test(\"Response body should have vector uuid as expected.\", function () {;\r",
															"    pm.expect(pm.response.json().data.vector.uuid).to.eql(pm.environment.get(\"vectorUuid\"));\r",
															"});\r",
															"pm.test(\"Response body should have survey uuid as expected.\", function () {;\r",
															"    pm.expect(pm.response.json().data.vector.refUuid.surveyUuid).to.eql(pm.environment.get(\"surveyUuid\"));\r",
															"});\r",
															"pm.test(\"Response body should have site uuid as expected.\", function () {;\r",
															"    pm.expect(pm.response.json().data.vector.refUuid.siteUuid).to.eql(pm.environment.get(\"siteUuid\"));\r",
															"});\r",
															"pm.test(\"Response body should have site uuid as expected.\", function () {;\r",
															"    pm.expect(pm.response.json().data.vector.refUuid.organisationUuid).to.eql(pm.environment.get(\"orgUuid\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n \"name\": \"{{annotationName}}\",\r\n \"geojson\": {\r\n  \"type\": \"Feature\",\r\n  \"geometry\": {\r\n   \"type\": \"Point\",\r\n   \"coordinates\": [\r\n    6426718.850533903,\r\n    21610080.91059555\r\n   ]\r\n  },\r\n  \"properties\": {}\r\n }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/vectors/:vectorUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"vectors",
														":vectorUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string",
															"description": "(Required) "
														},
														{
															"key": "vectorUuid",
															"value": "{{vectorUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": [
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "When the get survey details call fails internally",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user has access to survey",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												}
											]
										},
										{
											"name": "Get vector - wrong orgUuid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"pm.test(\"Response body has status as 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"var errorMessage = \"Resource Not Found\";\r",
															"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/vectors/:vectorUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"vectors",
														":vectorUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "awdadw",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string",
															"description": "(Required) "
														},
														{
															"key": "vectorUuid",
															"value": "{{vectorUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": [
												{
													"name": "When the get survey details call fails internally",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user has access to survey",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												}
											]
										},
										{
											"name": "Get vector - wrong siteUuid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"pm.test(\"Response body has status as 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"var errorMessage = \"Resource Not Found\";\r",
															"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/vectors/:vectorUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"vectors",
														":vectorUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "MALJSKLSLKF",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string",
															"description": "(Required) "
														},
														{
															"key": "vectorUuid",
															"value": "{{vectorUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": [
												{
													"name": "Successful only when a user has access to survey",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												},
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "When the get survey details call fails internally",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Get vector - wrong surveyUuid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"pm.test(\"Response body has status as 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"var errorMessage = \"Resource Not Found\";\r",
															"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/vectors/:vectorUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"vectors",
														":vectorUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "awewafasczaaaww",
															"type": "string",
															"description": "(Required) "
														},
														{
															"key": "vectorUuid",
															"value": "{{vectorUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": [
												{
													"name": "Successful only when a user has access to survey",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												},
												{
													"name": "When the get survey details call fails internally",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Get vector - wrong vectorUuid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"pm.test(\"Response body has status as 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"var errorMessage = \"Resource Not Found\";\r",
															"var errorMessage = \"Resource Not Found\";\r",
															"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/vectors/:vectorUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"vectors",
														":vectorUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string",
															"description": "(Required) "
														},
														{
															"key": "vectorUuid",
															"value": "OIUOJLMLK",
															"type": "string"
														}
													]
												}
											},
											"response": [
												{
													"name": "Successful only when a user has access to survey",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												},
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "When the get survey details call fails internally",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Get vector - Invalid accept header",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 406\", function () {\r",
															"    pm.response.to.have.status(406);\r",
															"});\r",
															"var message = \"Could not satisfy the request Accept header.\";\r",
															"pm.test(\"Response body message is '\"+message+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(message);\r",
															"});\r",
															"pm.test(\"Response body status is 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Acceptable\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/octet-stream"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/vectors/:vectorUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"vectors",
														":vectorUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string",
															"description": "(Required) "
														},
														{
															"key": "vectorUuid",
															"value": "{{vectorUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": [
												{
													"name": "When the get survey details call fails internally",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user has access to survey",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												}
											]
										},
										{
											"name": "Get vector - Invalid auth token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 401\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"pm.test(\"Status code name has Unauthorized\", function () {\r",
															"    pm.response.to.have.status(\"Unauthorized\");\r",
															"});\r",
															"pm.test(\"response body status value is 'forbidden'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"forbidden\");\r",
															"});\r",
															"var errMessage = \"Log in to do this action\";\r",
															"pm.test(\"response body message is '\"+errMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errMessage);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1qTkZRVUkyT1RRM01qTXpOa1l4TmpCQ04wSTVNa0kxUmpFNVFVSkVOelkzTnpnNFJqTXpRZyJ9.eyJodHRwczovL2V4YW1wbGUuY29tL3JvbGVzIjpbInVzZXIiXSwiaHR0cHM6Ly9kamFuZ28td2ViYXBwL3JvbGUiOiJ1c2VyIiwibmlja25hbWUiOiJwYW5rYWouZGV2cmFuaSIsIm5hbWUiOiJwYW5rYWouZGV2cmFuaUBhc3RlcmlhLmNvLmluIiwicGljdHVyZSI6Imh0dHBzOi8vcy5ncmF2YXRhci5jb20vYXZhdGFyLzRjN2YzYzM0OWNkYzkzZmMxODVmMTMzMThhZjIzMjcxP3M9NDgwJnI9cGcmZD1odHRwcyUzQSUyRiUyRmNkbi5hdXRoMC5jb20lMkZhdmF0YXJzJTJGcGEucG5nIiwidXBkYXRlZF9hdCI6IjIwMjAtMDYtMTFUMTI6MzU6MjQuMTk4WiIsImlzcyI6Imh0dHBzOi8vaW5zaWdodDEuYXV0aDAuY29tLyIsInN1YiI6ImF1dGgwfDVlYzdiMTBjZTZmNGUwMGJmMjAzNzZjMyIsImF1ZCI6IlNzTENHTmdnMHlBN0I3c0g1ZU5WTUZtQ1A5SlZkZGUzIiwiaWF0IjoxNTkxOTQ3NDYwLCJleHAiOjE1OTE5ODM0NjB9.kYNMikKc84EQXRC32dwkOXW0gkJKfqQTOLVmOkKs5QmvVKcVQNZVbo4fQFuYf07Qu1OpvYKmqBHf3Z5H8nsy-Mfeyufgr86X_p5vdThkpCGMzg3uX06LqKoVDcRRzDndQpmvve5Ripla3ucN5IME363U1EfwqmDPs4jBoAxuB80qurcVq3NBn8dOJzJNCRgGW-aHPP6LJAvezGgWpiDnKRcKLIbU2ig7h5t-8LhWOKDi48TBHGyOQYdxqUE7fC2NCi6ghTX7SnLxXA6S1SMwpqQgAApEnjklY8ImuP6in3Rd5JnvJJedDZTcYWK43iKBMoe5exhYd547XNtpQWttWE",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/vectors/:vectorUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"vectors",
														":vectorUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string",
															"description": "(Required) "
														},
														{
															"key": "vectorUuid",
															"value": "{{vectorUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": [
												{
													"name": "Successful only when a user has access to survey",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												},
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "When the get survey details call fails internally",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Edit a vector's details",
									"item": [
										{
											"name": "Edit a vector's details",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"editVectorName\",\"vectorName_\"+Math.floor((Math.random() * 10000000000) + 1));\r",
															"//types = data.vectorType;\r",
															"types = \"geojson\";\r",
															"pm.environment.set(\"editVectorType\", types);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.expect(pm.response.json().status).to.eql(\"success\")){\r",
															"    pm.environment.set(\"vectorName\",pm.environment.get(\"editVectorName\"));\r",
															"}\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Body matches string : 'success'\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response body has vector name as : '\"+pm.environment.get(\"editVectorName\")+\"'\", function () {\r",
															"    pm.expect(pm.response.json().data.vector.name).to.eql(pm.environment.get(\"editVectorName\"));\r",
															"});\r",
															"pm.test(\"Response body has vector type as : '\"+pm.environment.get(\"editVectorType\")+\"'\", function () {\r",
															"    pm.expect(pm.response.json().data.vector.type).to.eql(pm.environment.get(\"editVectorType\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n \"name\": \"{{editVectorName}}\",\r\n \"type\": \"{{editVectorType}}\"\r\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/vectors/:vectorUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"vectors",
														":vectorUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string"
														},
														{
															"key": "vectorUuid",
															"value": "{{vectorUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": [
												{
													"name": "Successful only when a user has access to survey edit perms",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												},
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "When the update survey call fails internally",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Edit vector - Duplicate request",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Body matches string : 'success'\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response body has raster name as : '\"+pm.environment.get(\"editVectorName\")+\"'\", function () {\r",
															"    pm.expect(pm.response.json().data.vector.name).to.eql(pm.environment.get(\"editVectorName\"));\r",
															"});\r",
															"pm.test(\"Response body has vector type as : '\"+pm.environment.get(\"editVectorType\")+\"'\", function () {\r",
															"    pm.expect(pm.response.json().data.vector.type).to.eql(pm.environment.get(\"editVectorType\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n \"name\": \"{{editVectorName}}\",\r\n \"type\":\"{{editVectorType}}\"\r\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/vectors/:vectorUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"vectors",
														":vectorUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string"
														},
														{
															"key": "vectorUuid",
															"value": "{{vectorUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": [
												{
													"name": "Successful only when a user has access to survey edit perms",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												},
												{
													"name": "When the update survey call fails internally",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Edit vector - wrong orgUuid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"pm.test(\"Response body has tatus as 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"var errorMessage = \"Resource Not Found\";\r",
															"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n \"name\": \"{{editVectorName}}\",\r\n \"type\":\"{{editVectorType}}\"\r\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/vectors/:vectorUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"vectors",
														":vectorUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "poipk;lkl",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string"
														},
														{
															"key": "vectorUuid",
															"value": "{{vectorUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": [
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "When the update survey call fails internally",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user has access to survey edit perms",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												}
											]
										},
										{
											"name": "Edit vector - wrong siteUuid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"pm.test(\"Response body has tatus as 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"var errorMessage = \"Resource Not Found\";\r",
															"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n \"name\": \"{{editVectorName}}\",\r\n \"type\":\"{{editVectorType}}\"\r\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/vectors/:vectorUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"vectors",
														":vectorUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"type": "string",
															"value": "{{orgUuid}}"
														},
														{
															"key": "siteUuid",
															"type": "string",
															"value": "kncklasnk"
														},
														{
															"key": "surveyUuid",
															"type": "string",
															"value": "{{surveyUuid}}"
														},
														{
															"key": "vectorUuid",
															"type": "string",
															"value": "{{vectorUuid}}"
														}
													]
												}
											},
											"response": [
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user has access to survey edit perms",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												},
												{
													"name": "When the update survey call fails internally",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Edit vector - wrong surveyUuid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"pm.test(\"Response body has tatus as 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"var errorMessage = \"Resource Not Found\";\r",
															"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n \"name\": \"{{editVectorName}}\",\r\n \"type\":\"{{editVectorType}}\"\r\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/vectors/:vectorUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"vectors",
														":vectorUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"type": "string",
															"value": "{{orgUuid}}"
														},
														{
															"key": "siteUuid",
															"type": "string",
															"value": "{{siteUuid}}"
														},
														{
															"key": "surveyUuid",
															"type": "string",
															"value": "ajaklsjdlaksj"
														},
														{
															"key": "vectorUuid",
															"type": "string",
															"value": "{{vectorUuid}}"
														}
													]
												}
											},
											"response": [
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "When the update survey call fails internally",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user has access to survey edit perms",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												}
											]
										},
										{
											"name": "Edit vector - wrong vectorUuid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"pm.test(\"Response body has tatus as 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"var errorMessage = \"Resource Not Found\";\r",
															"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n \"name\": \"{{editVectorName}}\",\r\n \"type\":\"{{editVectorType}}\"\r\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/vectors/:vectorUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"vectors",
														":vectorUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"type": "string",
															"value": "{{orgUuid}}"
														},
														{
															"key": "siteUuid",
															"type": "string",
															"value": "{{siteUuid}}"
														},
														{
															"key": "surveyUuid",
															"type": "string",
															"value": "{{surveyUuid}}"
														},
														{
															"key": "vectorUuid",
															"type": "string",
															"value": "sdlajsdoiuwjdlka"
														}
													]
												}
											},
											"response": [
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "When the update survey call fails internally",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user has access to survey edit perms",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												}
											]
										},
										{
											"name": "Edit vector - Invalid type for raster",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//types = data.rasterType;\r",
															"types = \"SHAPEFILE\";\r",
															"pm.environment.set(\"invalidVectorType\", types);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Response body status is : 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Response Body message is 'Validation Error'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\")  ;\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"var errorMessage = \"'\"+pm.environment.get(\"invalidVectorType\")+\"' is not a choice. Choices are ['geojson', 'shapefile'].\";\r",
															"pm.test(\"Response body raster name is equal to : '\"+pm.environment.get(\"rasterName\")+\"'\", function () {\r",
															"    pm.expect(pm.response.json().validation_errors.type[0][0]).to.eql(errorMessage);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n \"name\": \"{{editVectorName}}\",\r\n \"type\":\"{{invalidVectorType}}\"\r\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/vectors/:vectorUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"vectors",
														":vectorUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string"
														},
														{
															"key": "vectorUuid",
															"value": "{{vectorUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": [
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user has access to survey edit perms",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												},
												{
													"name": "When the update survey call fails internally",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Edit vector - More than 50 char name",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Response body status is 'failure'\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Response body message is 'Validation Error'\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.message).to.eql(\"Validation Error\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\")  ;\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"var errMessage = \"Ensure this field has no more than 50 characters.\";\r",
															"pm.test(\"Response body validation error message is '\"+errMessage+\"' \", function () {\r",
															"    pm.expect(pm.response.json().validation_errors.name[0][0]).to.eql(errMessage);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n \"name\": \"{{editVectorName}}-Delete It smbvkjhiUHIUWHFKH2895743 8276I3U4Y68376829TYGIUWHEIUHG3Y8976IHK ASKLJFHKWVJKBSA\",\n \"type\": \"geojson\"\n}\n"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/vectors/:vectorUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"vectors",
														":vectorUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string"
														},
														{
															"key": "vectorUuid",
															"value": "{{vectorUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Edit vector - Without request body",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Response body status is 'failure'\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Response body message is 'Validation Error'\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.message).to.eql(\"Validation Error\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\")  ;\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"var errorMessage = \"field is required.\";\r",
															"pm.test(\"Response body validation error message for survey_from field is '\"+errorMessage+\"' \", function () {\r",
															"    pm.expect(pm.response.json().validation_errors.type[0][0]).to.eql(errorMessage);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/vectors/:vectorUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"vectors",
														":vectorUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string"
														},
														{
															"key": "vectorUuid",
															"value": "{{vectorUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Edit vector - Invalid request body json",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"pm.test(\"Response body status is 'failure'\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.status).to.eql(\"failure\");\r",
															"});\r",
															"var errorMessage = \"JSON parse error\";\r",
															"pm.test(\"Response body validation error message is '\"+errorMessage+\"' \", function () {\r",
															"    pm.expect(pm.response.json().message).to.contain(errorMessage);\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\")  ;\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": ,\r\n    \"type\": \r\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/vectors/:vectorUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"vectors",
														":vectorUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string"
														},
														{
															"key": "vectorUuid",
															"value": "{{vectorUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Edit vector - All properties null",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Response body status is 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Response body message is 'Validation Error'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\")  ;\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"var errorMessage = \"field is required.\";\r",
															"pm.test(\"Response body validation error message for surveyFrom is '\"+errorMessage+\"' \", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.validation_errors.type[0][0]).to.eql(errorMessage);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"name\": null,\r\n  \"type\": null\r\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/vectors/:vectorUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"vectors",
														":vectorUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string"
														},
														{
															"key": "vectorUuid",
															"value": "{{vectorUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Edit vector - invalid content-type header",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 415\", function () {\r",
															"    pm.response.to.have.status(415);\r",
															"});\r",
															"pm.test(\"Response Body has status as 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Response Body has message as 'Unsupported media type'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.contain(\"Unsupported media type\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Unsupported Media Type\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/vnd.api+json"
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"{{editSurveyName}}\",\n  \"description\": \"Changed survey description - {{editSurveyName}}\",\n  \"surveyFrom\": \"2020-02-01T00:00:00Z\",\n  \"surveyTo\": \"2020-02-01T00:00:00Z\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/rasters/:rasterUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"rasters",
														":rasterUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string"
														},
														{
															"key": "rasterUuid",
															"value": "{{rasterUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Edit vector - invalid accept header",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 406\", function () {\r",
															"    pm.response.to.have.status(406);\r",
															"});\r",
															"var message = \"Could not satisfy the request Accept header.\";\r",
															"pm.test(\"Response body message is '\"+message+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(message);\r",
															"});\r",
															"pm.test(\"Response body status is 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Acceptable\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"type": "text",
														"value": "application/atom+xml"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"{{editSurveyName}}\",\n  \"description\": \"Changed survey description - {{editSurveyName}}\",\n  \"surveyFrom\": \"2020-02-01T00:00:00Z\",\n  \"surveyTo\": \"2020-02-01T00:00:00Z\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/rasters/:rasterUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"rasters",
														":rasterUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string"
														},
														{
															"key": "rasterUuid",
															"value": "{{rasterUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": [
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user has access to org edit perms",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"organisation\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												},
												{
													"name": "When the update org call fails internally",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Edit vector - Invalid auth token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 401\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"pm.test(\"Status code name has Unauthorized\", function () {\r",
															"    pm.response.to.have.status(\"Unauthorized\");\r",
															"});\r",
															"pm.test(\"response body status value is 'forbidden'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"forbidden\");\r",
															"});\r",
															"var errMessage = \"Log in to do this action\";\r",
															"pm.test(\"response body message is '\"+errMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errMessage);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1qTkZRVUkyT1RRM01qTXpOa1l4TmpCQ04wSTVNa0kxUmpFNVFVSkVOelkzTnpnNFJqTXpRZyJ9.eyJodHRwczovL2V4YW1wbGUuY29tL3JvbGVzIjpbInVzZXIiXSwiaHR0cHM6Ly9kamFuZ28td2ViYXBwL3JvbGUiOiJ1c2VyIiwibmlja25hbWUiOiJwYW5rYWouZGV2cmFuaSIsIm5hbWUiOiJwYW5rYWouZGV2cmFuaUBhc3RlcmlhLmNvLmluIiwicGljdHVyZSI6Imh0dHBzOi8vcy5ncmF2YXRhci5jb20vYXZhdGFyLzRjN2YzYzM0OWNkYzkzZmMxODVmMTMzMThhZjIzMjcxP3M9NDgwJnI9cGcmZD1odHRwcyUzQSUyRiUyRmNkbi5hdXRoMC5jb20lMkZhdmF0YXJzJTJGcGEucG5nIiwidXBkYXRlZF9hdCI6IjIwMjAtMDYtMTJUMDc6Mzc6MzkuMDE0WiIsImlzcyI6Imh0dHBzOi8vaW5zaWdodDEuYXV0aDAuY29tLyIsInN1YiI6ImF1dGgwfDVlYzdiMTBjZTZmNGUwMGJmMjAzNzZjMyIsImF1ZCI6IlNzTENHTmdnMHlBN0I3c0g1ZU5WTUZtQ1A5SlZkZGUzIiwiaWF0IjoxNTkyMjAxNzc2LCJleHAiOjE1OTIyMzc3NzZ9.NfOcvlsmhi6na-fut67v3PCOhku1EFYM9SvUCaqhSrM4D5ItQS9d-4Z_H8n3x5nc6r4rvTG09Pn3Gk-sDdf1137QmSdgzC-HfYYVEmR5xbiLYHPmZZnxL9ItjKNBYYbY9VBWzSpT434Vzz7DnjiJkyos3mDrLMACjDLQQ-6jCVplDXkOh0NHzQBWy6traQhkKkLceeZ3sa9Bc4PjQt18jzS5a50VHjitaczIZje7ILPeKtG0T3sNIrISyl5HZUK_KXmyzTMKw_9I9zAExkT9GGMBwqxfC6XpQ57wIvBZJN-i4uVNSd3Qjtw1yrCpz-vPMvIk7sbODtEAATtPpLapww",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"{{editSurveyName}}\",\n  \"description\": \"Changed survey description - {{editSurveyName}}\",\n  \"surveyFrom\": \"2020-02-01T00:00:00Z\",\n  \"surveyTo\": \"2020-02-01T00:00:00Z\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/rasters/:rasterUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"rasters",
														":rasterUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string"
														},
														{
															"key": "rasterUuid",
															"value": "{{rasterUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": [
												{
													"name": "Successful only when a user has access to org edit perms",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"organisation\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												},
												{
													"name": "When the update org call fails internally",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Partial edit an vector's details",
									"item": [
										{
											"name": "Edit a vector's details(Patch)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"editVectorName\",\"vectorName_\"+Math.floor((Math.random() * 10000000000) + 1));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.expect(pm.response.json().status).to.eql(\"success\")){\r",
															"    pm.environment.set(\"vectorName\",pm.environment.get(\"editVectorName\"));\r",
															"}\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Body matches string : 'success'\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response body has vector name as : '\"+pm.environment.get(\"editVectorName\")+\"'\", function () {\r",
															"    pm.expect(pm.response.json().data.vector.name).to.eql(pm.environment.get(\"editVectorName\"));\r",
															"});\r",
															"pm.test(\"Response body has vector type as : '\"+pm.environment.get(\"editVectorType\")+\"'\", function () {\r",
															"    pm.expect(pm.response.json().data.vector.type).to.eql(pm.environment.get(\"editVectorType\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n \"name\": \"{{editVectorName}}\"\r\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/vectors/:vectorUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"vectors",
														":vectorUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string"
														},
														{
															"key": "vectorUuid",
															"value": "{{vectorUuid}}"
														}
													]
												}
											},
											"response": [
												{
													"name": "When the update survey call fails internally",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user has access to survey edit perms",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												}
											]
										},
										{
											"name": "Patch vector - Edit type only",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"\r",
															"//types = data.rasterType;\r",
															"types = \"shapefile\";\r",
															"pm.environment.set(\"editVectorType\", types);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Body matches string : 'success'\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response body has vector name as : '\"+pm.environment.get(\"editVectorName\")+\"'\", function () {\r",
															"    pm.expect(pm.response.json().data.vector.name).to.eql(pm.environment.get(\"editVectorName\"));\r",
															"});\r",
															"pm.test(\"Response body has vector type as : '\"+pm.environment.get(\"editVectorType\")+\"'\", function () {\r",
															"    pm.expect(pm.response.json().data.vector.type).to.eql(pm.environment.get(\"editVectorType\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n \"type\":\"{{editVectorType}}\"\r\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/vectors/:vectorUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"vectors",
														":vectorUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"type": "string",
															"value": "{{orgUuid}}"
														},
														{
															"key": "siteUuid",
															"type": "string",
															"value": "{{siteUuid}}"
														},
														{
															"key": "surveyUuid",
															"type": "string",
															"value": "{{surveyUuid}}"
														},
														{
															"key": "vectorUuid",
															"value": "{{vectorUuid}}"
														}
													]
												}
											},
											"response": [
												{
													"name": "Successful only when a user has access to survey edit perms",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												},
												{
													"name": "When the update survey call fails internally",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Patch vector - Duplicate request",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"editVectorName\",\"vectorName_\"+Math.floor((Math.random() * 10000000000) + 1));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.expect(pm.response.json().status).to.eql(\"success\")){\r",
															"    pm.environment.set(\"vectorName\",pm.environment.get(\"editVectorName\"));\r",
															"}\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Body matches string : 'success'\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response body has vector name as : '\"+pm.environment.get(\"editVectorName\")+\"'\", function () {\r",
															"    pm.expect(pm.response.json().data.vector.name).to.eql(pm.environment.get(\"editVectorName\"));\r",
															"});\r",
															"pm.test(\"Response body has vector type as : '\"+pm.environment.get(\"editVectorType\")+\"'\", function () {\r",
															"    pm.expect(pm.response.json().data.vector.type).to.eql(pm.environment.get(\"editVectorType\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n \"name\": \"{{editVectorName}}\",\r\n \"type\":\"{{editVectorType}}\"\r\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/vectors/:vectorUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"vectors",
														":vectorUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string"
														},
														{
															"key": "vectorUuid",
															"value": "{{vectorUuid}}"
														}
													]
												}
											},
											"response": [
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user has access to survey edit perms",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												},
												{
													"name": "When the update survey call fails internally",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Patch vector - wrong orgUuid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//types = data.rasterType;\r",
															"types = \"dtm\";\r",
															"pm.environment.set(\"editRasterType\", types);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"pm.test(\"Response body has tatus as 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"var errorMessage = \"Resource Not Found\";\r",
															"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n \"name\": \"{{editRasterName}}\",\r\n \"type\":\"{{editRasterType}}\"\r\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/vectors/:vectorUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"vectors",
														":vectorUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "++++",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string"
														},
														{
															"key": "vectorUuid",
															"value": "{{vectorUuid}}"
														}
													]
												}
											},
											"response": [
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "When the update survey call fails internally",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user has access to survey edit perms",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												}
											]
										},
										{
											"name": "Patch vector - wrong siteUuid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//types = data.rasterType;\r",
															"types = \"dtm\";\r",
															"pm.environment.set(\"editRasterType\", types);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"pm.test(\"Response body has tatus as 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"var errorMessage = \"Resource Not Found\";\r",
															"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n \"name\": \"{{editRasterName}}\",\r\n \"type\":\"{{editRasterType}}\"\r\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/vectors/:vectorUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"vectors",
														":vectorUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "^^^^",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string"
														},
														{
															"key": "vectorUuid",
															"value": "{{vectorUuid}}"
														}
													]
												}
											},
											"response": [
												{
													"name": "When the update survey call fails internally",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user has access to survey edit perms",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												}
											]
										},
										{
											"name": "Patch vector - wrong surveyUuid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//types = data.rasterType;\r",
															"types = \"dtm\";\r",
															"pm.environment.set(\"editRasterType\", types);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"pm.test(\"Response body has tatus as 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"var errorMessage = \"Resource Not Found\";\r",
															"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n \"name\": \"{{editRasterName}}\",\r\n \"type\":\"{{editRasterType}}\"\r\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/vectors/:vectorUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"vectors",
														":vectorUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"type": "string",
															"value": "{{orgUuid}}"
														},
														{
															"key": "siteUuid",
															"type": "string",
															"value": "{{siteUuid}}"
														},
														{
															"key": "surveyUuid",
															"type": "string",
															"value": "asd asd as"
														},
														{
															"key": "vectorUuid",
															"value": "{{vectorUuid}}"
														}
													]
												}
											},
											"response": [
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "When the update survey call fails internally",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user has access to survey edit perms",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												}
											]
										},
										{
											"name": "Patch vector - wrong vectorUuid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//types = data.rasterType;\r",
															"types = \"dtm\";\r",
															"pm.environment.set(\"editRasterType\", types);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"pm.test(\"Response body has tatus as 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"var errorMessage = \"Resource Not Found\";\r",
															"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n \"name\": \"{{editRasterName}}\",\r\n \"type\":\"{{editRasterType}}\"\r\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/vectors/:vectorUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"vectors",
														":vectorUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"type": "string",
															"value": "{{orgUuid}}"
														},
														{
															"key": "siteUuid",
															"type": "string",
															"value": "{{siteUuid}}"
														},
														{
															"key": "surveyUuid",
															"type": "string",
															"value": "{{surveyUuid}}"
														},
														{
															"key": "vectorUuid",
															"value": "va,nskahfkhaskldhakj"
														}
													]
												}
											},
											"response": [
												{
													"name": "Successful only when a user has access to survey edit perms",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												},
												{
													"name": "When the update survey call fails internally",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Edit vector - Invalid type for vector",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//types = data.rasterType;\r",
															"types = \"NDVI\";\r",
															"pm.environment.set(\"invalidType\", types);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Response body status is : 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Response Body message is 'Validation Error'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\")  ;\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"var errorMessage = \"'\"+pm.environment.get(\"invalidType\")+\"' is not a choice. Choices are ['geojson', 'shapefile'].\";\r",
															"pm.test(\"Response body validation error message as : '\"+errorMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().validation_errors.type[0][0]).to.eql(errorMessage);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n \"name\": \"{{editVectorName}}\",\r\n \"type\":\"{{invalidType}}\"\r\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/vectors/:vectorUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"vectors",
														":vectorUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"type": "string",
															"value": "{{orgUuid}}"
														},
														{
															"key": "siteUuid",
															"type": "string",
															"value": "{{siteUuid}}"
														},
														{
															"key": "surveyUuid",
															"type": "string",
															"value": "{{surveyUuid}}"
														},
														{
															"key": "vectorUuid",
															"value": "{{vectorUuid}}"
														}
													]
												}
											},
											"response": [
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "When the update survey call fails internally",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user has access to survey edit perms",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"thumbnail\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												}
											]
										},
										{
											"name": "Patch vector - More than 50 char name",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Response body status is 'failure'\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Response body message is 'Validation Error'\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.message).to.eql(\"Validation Error\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\")  ;\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"var errMessage = \"Ensure this field has no more than 50 characters.\";\r",
															"pm.test(\"Response body validation error message is '\"+errMessage+\"' \", function () {\r",
															"    pm.expect(pm.response.json().validation_errors.name[0][0]).to.eql(errMessage);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n \"name\": \"{{editRasterName}} - Deleasdasdadadadhauygfawdawdawdwadasdaiquhf4a564a6w4da64da6dw8aw6d4a684d6aw4da684d68a4da65d4aw65d4aw68d!@#&(*@!&$*!&^$*&@!^$*!^$*te2\",\n \"type\":\"rgb\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/vectors/:vectorUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"vectors",
														":vectorUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string"
														},
														{
															"key": "vectorUuid",
															"value": "{{vectorUuid}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Patch vector - Without request body",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.expect(pm.response.json().status).to.eql(\"success\")){\r",
															"    pm.environment.set(\"rasterName\",pm.environment.get(\"editRasterName\"));\r",
															"}\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Body matches string : 'success'\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response body has vector name as : '\"+pm.environment.get(\"editVectorName\")+\"'\", function () {\r",
															"    pm.expect(pm.response.json().data.vector.name).to.eql(pm.environment.get(\"editVectorName\"));\r",
															"});\r",
															"pm.test(\"Response body has vector type as : '\"+pm.environment.get(\"editVectorType\")+\"'\", function () {\r",
															"    pm.expect(pm.response.json().data.vector.type).to.eql(pm.environment.get(\"editVectorType\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/vectors/:vectorUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"vectors",
														":vectorUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string"
														},
														{
															"key": "vectorUuid",
															"value": "{{vectorUuid}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Patch vector - Invalid request body json",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"pm.test(\"Response body status is 'failure'\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.status).to.eql(\"failure\");\r",
															"});\r",
															"var errorMessage = \"JSON parse error\";\r",
															"pm.test(\"Response body validation error message is '\"+errorMessage+\"' \", function () {\r",
															"    pm.expect(pm.response.json().message).to.contain(errorMessage);\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\")  ;\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": ,\r\n    \"type\": \r\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/vectors/:vectorUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"vectors",
														":vectorUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string"
														},
														{
															"key": "vectorUuid",
															"value": "{{vectorUuid}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Patch  vector - All properties null",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Response body status is 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Response body message is 'Validation Error'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\")  ;\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"var errorMessage = \"field is required.\";\r",
															"pm.test(\"Response body validation error message for surveyFrom is '\"+errorMessage+\"' \", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.validation_errors.type[0][0]).to.eql(errorMessage);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"name\": null,\r\n  \"type\": null\r\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/vectors/:vectorUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"vectors",
														":vectorUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string"
														},
														{
															"key": "vectorUuid",
															"value": "{{vectorUuid}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Patch  vector - invalid content-type header",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 415\", function () {\r",
															"    pm.response.to.have.status(415);\r",
															"});\r",
															"pm.test(\"Response Body has status as 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Response Body has message as 'Unsupported media type'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.contain(\"Unsupported media type\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Unsupported Media Type\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/vnd.api+json"
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"{{editSurveyName}}\",\n  \"description\": \"Changed survey description - {{editSurveyName}}\",\n  \"surveyFrom\": \"2020-02-01T00:00:00Z\",\n  \"surveyTo\": \"2020-02-01T00:00:00Z\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/vectors/:vectorUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"vectors",
														":vectorUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string"
														},
														{
															"key": "vectorUuid",
															"value": "{{vectorUuid}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Patch vector - invalid accept header",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 406\", function () {\r",
															"    pm.response.to.have.status(406);\r",
															"});\r",
															"var message = \"Could not satisfy the request Accept header.\";\r",
															"pm.test(\"Response body message is '\"+message+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(message);\r",
															"});\r",
															"pm.test(\"Response body status is 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Acceptable\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"type": "text",
														"value": "application/atom+xml"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"{{editSurveyName}}\",\n  \"description\": \"Changed survey description - {{editSurveyName}}\",\n  \"surveyFrom\": \"2020-02-01T00:00:00Z\",\n  \"surveyTo\": \"2020-02-01T00:00:00Z\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/vectors/:vectorUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"vectors",
														":vectorUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string"
														},
														{
															"key": "vectorUuid",
															"value": "{{vectorUuid}}"
														}
													]
												}
											},
											"response": [
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user has access to org edit perms",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"organisation\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												},
												{
													"name": "When the update org call fails internally",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Patch vector - Invalid auth token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 401\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"pm.test(\"Status code name has Unauthorized\", function () {\r",
															"    pm.response.to.have.status(\"Unauthorized\");\r",
															"});\r",
															"pm.test(\"response body status value is 'forbidden'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"forbidden\");\r",
															"});\r",
															"var errMessage = \"Log in to do this action\";\r",
															"pm.test(\"response body message is '\"+errMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errMessage);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1qTkZRVUkyT1RRM01qTXpOa1l4TmpCQ04wSTVNa0kxUmpFNVFVSkVOelkzTnpnNFJqTXpRZyJ9.eyJodHRwczovL2V4YW1wbGUuY29tL3JvbGVzIjpbInVzZXIiXSwiaHR0cHM6Ly9kamFuZ28td2ViYXBwL3JvbGUiOiJ1c2VyIiwibmlja25hbWUiOiJwYW5rYWouZGV2cmFuaSIsIm5hbWUiOiJwYW5rYWouZGV2cmFuaUBhc3RlcmlhLmNvLmluIiwicGljdHVyZSI6Imh0dHBzOi8vcy5ncmF2YXRhci5jb20vYXZhdGFyLzRjN2YzYzM0OWNkYzkzZmMxODVmMTMzMThhZjIzMjcxP3M9NDgwJnI9cGcmZD1odHRwcyUzQSUyRiUyRmNkbi5hdXRoMC5jb20lMkZhdmF0YXJzJTJGcGEucG5nIiwidXBkYXRlZF9hdCI6IjIwMjAtMDYtMTJUMDc6Mzc6MzkuMDE0WiIsImlzcyI6Imh0dHBzOi8vaW5zaWdodDEuYXV0aDAuY29tLyIsInN1YiI6ImF1dGgwfDVlYzdiMTBjZTZmNGUwMGJmMjAzNzZjMyIsImF1ZCI6IlNzTENHTmdnMHlBN0I3c0g1ZU5WTUZtQ1A5SlZkZGUzIiwiaWF0IjoxNTkyMjAxNzc2LCJleHAiOjE1OTIyMzc3NzZ9.NfOcvlsmhi6na-fut67v3PCOhku1EFYM9SvUCaqhSrM4D5ItQS9d-4Z_H8n3x5nc6r4rvTG09Pn3Gk-sDdf1137QmSdgzC-HfYYVEmR5xbiLYHPmZZnxL9ItjKNBYYbY9VBWzSpT434Vzz7DnjiJkyos3mDrLMACjDLQQ-6jCVplDXkOh0NHzQBWy6traQhkKkLceeZ3sa9Bc4PjQt18jzS5a50VHjitaczIZje7ILPeKtG0T3sNIrISyl5HZUK_KXmyzTMKw_9I9zAExkT9GGMBwqxfC6XpQ57wIvBZJN-i4uVNSd3Qjtw1yrCpz-vPMvIk7sbODtEAATtPpLapww",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"{{editSurveyName}}\",\n  \"description\": \"Changed survey description - {{editSurveyName}}\",\n  \"surveyFrom\": \"2020-02-01T00:00:00Z\",\n  \"surveyTo\": \"2020-02-01T00:00:00Z\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/vectors/:vectorUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"vectors",
														":vectorUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string"
														},
														{
															"key": "vectorUuid",
															"value": "{{vectorUuid}}"
														}
													]
												}
											},
											"response": [
												{
													"name": "When the update org call fails internally",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user has access to org edit perms",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"organisation",
																":organisationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"organisation\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												}
											]
										}
									]
								},
								{
									"name": "Remove a vector (soft delete)",
									"item": [
										{
											"name": "Remove vector - wrong orgUuid",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"pm.test(\"Response body status is : 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"var errorMessage = \"Resource Not Found\";\r",
															"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/vectors/:vectorUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"vectors",
														":vectorUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"type": "string",
															"value": "nkajhskjfsa"
														},
														{
															"key": "siteUuid",
															"type": "string",
															"value": "{{siteUuid}}"
														},
														{
															"description": "(Required) ",
															"key": "surveyUuid",
															"type": "string",
															"value": "{{surveyUuid}}"
														},
														{
															"key": "vectorUuid",
															"type": "string",
															"value": "{{vectorUuid}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Remove vector - wrong siteUuid",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"pm.test(\"Response body status is : 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"var errorMessage = \"Resource Not Found\";\r",
															"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/vectors/:vectorUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"vectors",
														":vectorUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"type": "string",
															"value": "{{orgUuid}}"
														},
														{
															"key": "siteUuid",
															"type": "string",
															"value": ",cnakjhkua"
														},
														{
															"description": "(Required) ",
															"key": "surveyUuid",
															"type": "string",
															"value": "{{surveyUuid}}"
														},
														{
															"key": "vectorUuid",
															"type": "string",
															"value": "{{vectorUuid}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Remove vector - wrong surveyUuid",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"pm.test(\"Response body status is : 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"var errorMessage = \"Resource Not Found\";\r",
															"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/vectors/:vectorUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"vectors",
														":vectorUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "wadadsa",
															"type": "string",
															"description": "(Required) "
														},
														{
															"key": "vectorUuid",
															"value": "{{vectorUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Remove vector - wrong vectorUuid",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"pm.test(\"Response body status is : 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"var errorMessage = \"Resource Not Found\";\r",
															"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/vectors/:vectorUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"vectors",
														":vectorUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string",
															"description": "(Required) "
														},
														{
															"key": "vectorUuid",
															"value": "lajofjsakld",
															"type": "string"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Remove a vector (soft delete)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Response body status is : 'success'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
															"});\r",
															"pm.test(\"Response body has message : 'Deleted Project'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(\"Deleted Vector\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/vectors/:vectorUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"vectors",
														":vectorUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string"
														},
														{
															"key": "vectorUuid",
															"value": "{{vectorUuid}}",
															"type": "string"
														}
													]
												},
												"description": "This is an api reuqest to delete an annotation."
											},
											"response": []
										},
										{
											"name": "Remove vector - Duplicate request",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"pm.test(\"Response body status is : 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"var errorMessage = \"Resource Not Found\";\r",
															"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/vectors/:vectorUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"vectors",
														":vectorUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string",
															"description": "(Required) "
														},
														{
															"key": "vectorUuid",
															"value": "{{vectorUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Remove vector - Invalid accept header",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 406\", function () {\r",
															"    pm.response.to.have.status(406);\r",
															"});\r",
															"var message = \"Could not satisfy the request Accept header.\";\r",
															"pm.test(\"Response body message is '\"+message+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(message);\r",
															"});\r",
															"pm.test(\"Response body status is 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Acceptable\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/rss+xml",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/vectors/:vectorUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"vectors",
														":vectorUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string",
															"description": "(Required) "
														},
														{
															"key": "vectorUuid",
															"value": "{{vectorUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Remove vector - Invalid auth token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 401\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"pm.test(\"Status code name has Unauthorized\", function () {\r",
															"    pm.response.to.have.status(\"Unauthorized\");\r",
															"});\r",
															"pm.test(\"response body status value is 'forbidden'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"forbidden\");\r",
															"});\r",
															"var errMessage = \"Log in to do this action\";\r",
															"pm.test(\"response body message is '\"+errMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errMessage);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1qTkZRVUkyT1RRM01qTXpOa1l4TmpCQ04wSTVNa0kxUmpFNVFVSkVOelkzTnpnNFJqTXpRZyJ9.eyJodHRwczovL2V4YW1wbGUuY29tL3JvbGVzIjpbInVzZXIiXSwiaHR0cHM6Ly9kamFuZ28td2ViYXBwL3JvbGUiOiJ1c2VyIiwibmlja25hbWUiOiJwYW5rYWouZGV2cmFuaSIsIm5hbWUiOiJwYW5rYWouZGV2cmFuaUBhc3RlcmlhLmNvLmluIiwicGljdHVyZSI6Imh0dHBzOi8vcy5ncmF2YXRhci5jb20vYXZhdGFyLzRjN2YzYzM0OWNkYzkzZmMxODVmMTMzMThhZjIzMjcxP3M9NDgwJnI9cGcmZD1odHRwcyUzQSUyRiUyRmNkbi5hdXRoMC5jb20lMkZhdmF0YXJzJTJGcGEucG5nIiwidXBkYXRlZF9hdCI6IjIwMjAtMDYtMTJUMDc6Mzc6MzkuMDE0WiIsImlzcyI6Imh0dHBzOi8vaW5zaWdodDEuYXV0aDAuY29tLyIsInN1YiI6ImF1dGgwfDVlYzdiMTBjZTZmNGUwMGJmMjAzNzZjMyIsImF1ZCI6IlNzTENHTmdnMHlBN0I3c0g1ZU5WTUZtQ1A5SlZkZGUzIiwiaWF0IjoxNTkyMjAxNzc2LCJleHAiOjE1OTIyMzc3NzZ9.NfOcvlsmhi6na-fut67v3PCOhku1EFYM9SvUCaqhSrM4D5ItQS9d-4Z_H8n3x5nc6r4rvTG09Pn3Gk-sDdf1137QmSdgzC-HfYYVEmR5xbiLYHPmZZnxL9ItjKNBYYbY9VBWzSpT434Vzz7DnjiJkyos3mDrLMACjDLQQ-6jCVplDXkOh0NHzQBWy6traQhkKkLceeZ3sa9Bc4PjQt18jzS5a50VHjitaczIZje7ILPeKtG0T3sNIrISyl5HZUK_KXmyzTMKw_9I9zAExkT9GGMBwqxfC6XpQ57wIvBZJN-i4uVNSd3Qjtw1yrCpz-vPMvIk7sbODtEAATtPwwapww",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/vectors/:vectorUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"vectors",
														":vectorUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string",
															"description": "(Required) "
														},
														{
															"key": "vectorUuid",
															"value": "{{vectorUuid}}",
															"type": "string"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "ImageList",
					"item": [
						{
							"name": "Get all the ImageList User has access to",
							"item": [
								{
									"name": "Get all the imagelists User has access to",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if(pm.expect(pm.response.json().status).to.eql(\"success\")){\r",
													"pm.environment.set(\"imageListUuid\", pm.response.json().data.imageLists[0].uuid);\r",
													"}\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Body matches string : 'success'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/imageLists",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"imageLists"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												},
												{
													"key": "surveyUuid",
													"value": "{{surveyUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all imageLists - with request body",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Body matches string : 'success'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n \"name\": \"{{rasterName}}\",\r\n \"rasterType\": \"RGB\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/imageLists",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"imageLists"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"type": "string",
													"value": "{{orgUuid}}"
												},
												{
													"key": "siteUuid",
													"type": "string",
													"value": "{{siteUuid}}"
												},
												{
													"key": "surveyUuid",
													"type": "string",
													"value": "{{surveyUuid}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all imageLists - wrong orgUuid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"pm.test(\"Response body has status as 'failure'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"var errorMessage = \"Resource Not Found\";\r",
													"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n \"name\": \"{{annotationName}}\",\r\n \"geojson\": {\r\n  \"type\": \"Feature\",\r\n  \"geometry\": {\r\n   \"type\": \"Point\",\r\n   \"coordinates\": [\r\n    6426718.850533903,\r\n    21610080.91059555\r\n   ]\r\n  },\r\n  \"properties\": {}\r\n }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/imageLists",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"imageLists"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"type": "string",
													"value": "awijalnkskc"
												},
												{
													"key": "siteUuid",
													"type": "string",
													"value": "{{siteUuid}}"
												},
												{
													"key": "surveyUuid",
													"type": "string",
													"value": "{{surveyUuid}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all imageLists - wrong siteUuid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"pm.test(\"Response body has status as 'failure'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"var errorMessage = \"Resource Not Found\";\r",
													"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n \"name\": \"{{annotationName}}\",\r\n \"geojson\": {\r\n  \"type\": \"Feature\",\r\n  \"geometry\": {\r\n   \"type\": \"Point\",\r\n   \"coordinates\": [\r\n    6426718.850533903,\r\n    21610080.91059555\r\n   ]\r\n  },\r\n  \"properties\": {}\r\n }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/imageLists",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"imageLists"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "asdka[spd",
													"type": "string"
												},
												{
													"key": "surveyUuid",
													"value": "{{surveyUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all imageLists - wrong surveyUuid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"pm.test(\"Response body has status as 'failure'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"var errorMessage = \"Resource Not Found\";\r",
													"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n \"name\": \"{{annotationName}}\",\r\n \"geojson\": {\r\n  \"type\": \"Feature\",\r\n  \"geometry\": {\r\n   \"type\": \"Point\",\r\n   \"coordinates\": [\r\n    6426718.850533903,\r\n    21610080.91059555\r\n   ]\r\n  },\r\n  \"properties\": {}\r\n }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/imageLists",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"imageLists"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"type": "string",
													"value": "{{orgUuid}}"
												},
												{
													"key": "siteUuid",
													"type": "string",
													"value": "{{siteUuid}}"
												},
												{
													"key": "surveyUuid",
													"type": "string",
													"value": "adsaev;llk"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all imageLists - Invalid accept header",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 406\", function () {\r",
													"    pm.response.to.have.status(406);\r",
													"});\r",
													"var message = \"Could not satisfy the request Accept header.\";\r",
													"pm.test(\"Response body message is '\"+message+\"'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(message);\r",
													"});\r",
													"pm.test(\"Response body status is 'failure'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Not Acceptable\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/javascript"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/imageLists",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"imageLists"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"type": "string",
													"value": "{{orgUuid}}"
												},
												{
													"key": "siteUuid",
													"type": "string",
													"value": "{{siteUuid}}"
												},
												{
													"key": "surveyUuid",
													"type": "string",
													"value": "{{surveyUuid}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all imageLists - Invalid auth token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"pm.test(\"Status code name has Unauthorized\", function () {\r",
													"    pm.response.to.have.status(\"Unauthorized\");\r",
													"});\r",
													"pm.test(\"response body status value is 'forbidden'\", function () {\r",
													"    pm.expect(pm.response.json().status).to.eql(\"forbidden\");\r",
													"});\r",
													"var errMessage = \"Log in to do this action\";\r",
													"pm.test(\"response body message is '\"+errMessage+\"'\", function () {\r",
													"    pm.expect(pm.response.json().message).to.eql(errMessage);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1qTkZRVUkyT1RRM01qTXpOa1l4TmpCQ04wSTVNa0kxUmpFNVFVSkVOelkzTnpnNFJqTXpRZyJ9.eyJodHRwczovL2V4YW1wbGUuY29tL3JvbGVzIjpbInVzZXIiXSwiaHR0cHM6Ly9kamFuZ28td2ViYXBwL3JvbGUiOiJ1c2VyIiwibmlja25hbWUiOiJwYW5rYWouZGV2cmFuaSIsIm5hbWUiOiJwYW5rYWouZGV2cmFuaUBhc3RlcmlhLmNvLmluIiwicGljdHVyZSI6Imh0dHBzOi8vcy5ncmF2YXRhci5jb20vYXZhdGFyLzRjN2YzYzM0OWNkYzkzZmMxODVmMTMzMThhZjIzMjcxP3M9NDgwJnI9cGcmZD1odHRwcyUzQSUyRiUyRmNkbi5hdXRoMC5jb20lMkZhdmF0YXJzJTJGcGEucG5nIiwidXBkYXRlZF9hdCI6IjIwMjAtMDYtMTBUMDc6Mzc6MjEuNDM4WiIsImlzcyI6Imh0dHBzOi8vaW5zaWdodDEuYXV0aDAuY29tLyIsInN1YiI6ImF1dGgwfDVlYzdiMTBjZTZmNGUwMGJmMjAzNzZjMyIsImF1ZCI6IlNzTENHTmdnMHlBN0I3c0g1ZU5WTUZtQ1A5SlZkZGUzIiwiaWF0IjoxNTkxODc4OTI1LCJleHAiOjE1OTE5MTQ5MjV9.b-FwIG8vG9rtPDVAhQjlf2tzV9nlq8RFqL1w264skuxsXR01b067gXzOAh5i0VXQ_J5WDMTV-DDkpeUZwE_m57Tl1jSJ_4n0dSWFd39_TI0jNiDQ23qt_OfmDTjEVf0b7GMj3hDk5Vwi0S7BumpE67jX2Pk1QayPXpfBGz2z3kC8qi1pXddWnCPB_E-LtZ6fwmbyOQ-HDSbkcdadBlqtRAPpNWx7APOf-6XbdDB6nF19s_BD1oKJNX2ieKqfV3Ggf2opGHtwrvusd2yFYnCbvdy9pnOTsB4SmrZUMDEArAmTTp5pXqx6UytJ1TQ2fqsBE6DEPCwYK_jLL7QLjFmsWR",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/imageLists",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organisations",
												":organisationUuid",
												"sites",
												":siteUuid",
												"surveys",
												":surveyUuid",
												"imageLists"
											],
											"variable": [
												{
													"key": "organisationUuid",
													"value": "{{orgUuid}}",
													"type": "string"
												},
												{
													"key": "siteUuid",
													"value": "{{siteUuid}}",
													"type": "string"
												},
												{
													"key": "surveyUuid",
													"value": "{{surveyUuid}}",
													"type": "string"
												}
											]
										}
									},
									"response": [
										{
											"name": "Fired on the main/landing page",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisations",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisations"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"organisations\": [\n   {\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"permalink\": \"<string>\",\n    \"uuid\": \"<string>\",\n    \"metaData\": {\n     \"userRole\": {}\n    }\n   },\n   {\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"permalink\": \"<string>\",\n    \"uuid\": \"<string>\",\n    \"metaData\": {\n     \"userRole\": {}\n    }\n   }\n  ]\n }\n}"
										},
										{
											"name": "User is not logged in",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/v2/organisations",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"organisations"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "imagelist/{imagelist Uuid}",
							"item": [
								{
									"name": "Get details of a ImageList User has access to",
									"item": [
										{
											"name": "Get details of a imageLists User has access to",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Response body has status as 'success'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response body imageList uuid is equal to : '\"+pm.environment.get(\"imageListUuid\")+\"'\", function () {\r",
															"    pm.expect(pm.response.json().data.imageList.uuid).to.eql(pm.environment.get(\"imageListUuid\"));\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/imageLists/:imageListUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"imageLists",
														":imageListUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string",
															"description": "(Required) "
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string",
															"description": "(Required) "
														},
														{
															"key": "surveyUuid",
															"value": "{{surveyUuid}}",
															"type": "string",
															"description": "(Required) "
														},
														{
															"key": "imageListUuid",
															"value": "{{imageListUuid}}"
														}
													]
												}
											},
											"response": [
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/core/v1/organisation/:organisationUuid/site/:siteUuid/survey/:surveyUuid/annotation/:annotationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"core",
																"v1",
																"organisation",
																":organisationUuid",
																"site",
																":siteUuid",
																"survey",
																":surveyUuid",
																"annotation",
																":annotationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																},
																{
																	"key": "siteUuid"
																},
																{
																	"key": "surveyUuid"
																},
																{
																	"key": "annotationUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "When the get annotation details call fails internally",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/core/v1/organisation/:organisationUuid/site/:siteUuid/survey/:surveyUuid/annotation/:annotationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"core",
																"v1",
																"organisation",
																":organisationUuid",
																"site",
																":siteUuid",
																"survey",
																":surveyUuid",
																"annotation",
																":annotationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																},
																{
																	"key": "siteUuid"
																},
																{
																	"key": "surveyUuid"
																},
																{
																	"key": "annotationUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user has access to annotation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/core/v1/organisation/:organisationUuid/site/:siteUuid/survey/:surveyUuid/annotation/:annotationUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"core",
																"v1",
																"organisation",
																":organisationUuid",
																"site",
																":siteUuid",
																"survey",
																":surveyUuid",
																"annotation",
																":annotationUuid"
															],
															"variable": [
																{
																	"key": "organisationUuid"
																},
																{
																	"key": "siteUuid"
																},
																{
																	"key": "surveyUuid"
																},
																{
																	"key": "annotationUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"queued\",\n \"message\": \"laboris sint\",\n \"data\": {\n  \"annotation\": {\n   \"name\": \"nostrud eu\",\n   \"refUuid\": {\n    \"organisationUuid\": \"velit in nostrud Excepteur\",\n    \"siteUuid\": \"Lorem fugiat mollit\",\n    \"surveyUuid\": \"irure elit ea\"\n   },\n   \"geojson\": {\n    \"type\": \"Feature\",\n    \"geometry\": {\n     \"type\": \"Point\",\n     \"coordinates\": [\n      -4283317.660607502,\n      -60014066.241007894\n     ]\n    },\n    \"properties\": \"<object>\"\n   },\n   \"permalink\": \"aliqua minim velit ut in\",\n   \"uuid\": \"incididunt sit\",\n   \"createdBy\": \"Ut Duis sit\",\n   \"createdAt\": -22587323.52630721,\n   \"updatedAt\": 89449165.98390305,\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												}
											]
										},
										{
											"name": "Get imageList- with request body",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Response body has status as 'success'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"Response body imageList uuid is equal to : '\"+pm.environment.get(\"imageListUuid\")+\"'\", function () {\r",
															"    pm.expect(pm.response.json().data.imageList.uuid).to.eql(pm.environment.get(\"imageListUuid\"));\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n \"name\": \"{{annotationName}}\",\r\n \"geojson\": {\r\n  \"type\": \"Feature\",\r\n  \"geometry\": {\r\n   \"type\": \"Point\",\r\n   \"coordinates\": [\r\n    6426718.850533903,\r\n    21610080.91059555\r\n   ]\r\n  },\r\n  \"properties\": {}\r\n }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/imageLists/:imageListUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"imageLists",
														":imageListUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"type": "string",
															"value": "{{orgUuid}}"
														},
														{
															"key": "siteUuid",
															"type": "string",
															"value": "{{siteUuid}}"
														},
														{
															"description": "(Required) ",
															"key": "surveyUuid",
															"type": "string",
															"value": "{{surveyUuid}}"
														},
														{
															"key": "imageListUuid",
															"value": "{{imageListUuid}}"
														}
													]
												}
											},
											"response": [
												{
													"name": "Successful only when a user has access to survey",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												},
												{
													"name": "When the get survey details call fails internally",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Get imageList - wrong orgUuid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"pm.test(\"Response body has status as 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"var errorMessage = \"Resource Not Found\";\r",
															"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/imageLists/:imageListUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"imageLists",
														":imageListUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"type": "string",
															"value": "awdadw"
														},
														{
															"key": "siteUuid",
															"type": "string",
															"value": "{{siteUuid}}"
														},
														{
															"description": "(Required) ",
															"key": "surveyUuid",
															"type": "string",
															"value": "{{surveyUuid}}"
														},
														{
															"key": "imageListUuid",
															"value": "{{imageListUuid}}"
														}
													]
												}
											},
											"response": [
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "When the get survey details call fails internally",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user has access to survey",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												}
											]
										},
										{
											"name": "Get imageList - wrong siteUuid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"pm.test(\"Response body has status as 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"var errorMessage = \"Resource Not Found\";\r",
															"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/imageLists/:imageListUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"imageLists",
														":imageListUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"type": "string",
															"value": "{{orgUuid}}"
														},
														{
															"key": "siteUuid",
															"type": "string",
															"value": "MALJSKLSLKF"
														},
														{
															"description": "(Required) ",
															"key": "surveyUuid",
															"type": "string",
															"value": "{{surveyUuid}}"
														},
														{
															"key": "imageListUuid",
															"value": ""
														}
													]
												}
											},
											"response": [
												{
													"name": "When the get survey details call fails internally",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user has access to survey",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												},
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Get vector - wrong surveyUuid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"pm.test(\"Response body has status as 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"var errorMessage = \"Resource Not Found\";\r",
															"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/imageLists/:imageListUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"imageLists",
														":imageListUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"value": "{{orgUuid}}",
															"type": "string"
														},
														{
															"key": "siteUuid",
															"value": "{{siteUuid}}",
															"type": "string"
														},
														{
															"key": "surveyUuid",
															"value": "awewafasczaaaww",
															"type": "string",
															"description": "(Required) "
														},
														{
															"key": "imageListUuid",
															"value": "{{imageListUuid}}"
														}
													]
												}
											},
											"response": [
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "When the get survey details call fails internally",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user has access to survey",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												}
											]
										},
										{
											"name": "Get imageList - wrong imageListUuid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"pm.test(\"Response body has status as 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"var errorMessage = \"Resource Not Found\";\r",
															"var errorMessage = \"Resource Not Found\";\r",
															"pm.test(\"Response body has message as : '\"+errorMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errorMessage);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/imageLists/:imageListUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"imageLists",
														":imageListUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"type": "string",
															"value": "{{orgUuid}}"
														},
														{
															"key": "siteUuid",
															"type": "string",
															"value": "{{siteUuid}}"
														},
														{
															"description": "(Required) ",
															"key": "surveyUuid",
															"type": "string",
															"value": "{{surveyUuid}}"
														},
														{
															"key": "imageListUuid",
															"value": "asljdkn,asma"
														}
													]
												}
											},
											"response": [
												{
													"name": "Successful only when a user has access to survey",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												},
												{
													"name": "When the get survey details call fails internally",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Get imageList - Invalid accept header",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 406\", function () {\r",
															"    pm.response.to.have.status(406);\r",
															"});\r",
															"var message = \"Could not satisfy the request Accept header.\";\r",
															"pm.test(\"Response body message is '\"+message+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(message);\r",
															"});\r",
															"pm.test(\"Response body status is 'failure'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"failure\");\r",
															"});\r",
															"pm.test(\"Content-Type is present\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"});\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Acceptable\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/octet-stream"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/imageLists/:imageListUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"imageLists",
														":imageListUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"type": "string",
															"value": "{{orgUuid}}"
														},
														{
															"key": "siteUuid",
															"type": "string",
															"value": "{{siteUuid}}"
														},
														{
															"description": "(Required) ",
															"key": "surveyUuid",
															"type": "string",
															"value": "{{surveyUuid}}"
														},
														{
															"key": "imageListUuid",
															"value": "{{imageListUuid}}"
														}
													]
												}
											},
											"response": [
												{
													"name": "When the get survey details call fails internally",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Successful only when a user has access to survey",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												},
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Get imageList - Invalid auth token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 401\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"pm.test(\"Status code name has Unauthorized\", function () {\r",
															"    pm.response.to.have.status(\"Unauthorized\");\r",
															"});\r",
															"pm.test(\"response body status value is 'forbidden'\", function () {\r",
															"    pm.expect(pm.response.json().status).to.eql(\"forbidden\");\r",
															"});\r",
															"var errMessage = \"Log in to do this action\";\r",
															"pm.test(\"response body message is '\"+errMessage+\"'\", function () {\r",
															"    pm.expect(pm.response.json().message).to.eql(errMessage);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1qTkZRVUkyT1RRM01qTXpOa1l4TmpCQ04wSTVNa0kxUmpFNVFVSkVOelkzTnpnNFJqTXpRZyJ9.eyJodHRwczovL2V4YW1wbGUuY29tL3JvbGVzIjpbInVzZXIiXSwiaHR0cHM6Ly9kamFuZ28td2ViYXBwL3JvbGUiOiJ1c2VyIiwibmlja25hbWUiOiJwYW5rYWouZGV2cmFuaSIsIm5hbWUiOiJwYW5rYWouZGV2cmFuaUBhc3RlcmlhLmNvLmluIiwicGljdHVyZSI6Imh0dHBzOi8vcy5ncmF2YXRhci5jb20vYXZhdGFyLzRjN2YzYzM0OWNkYzkzZmMxODVmMTMzMThhZjIzMjcxP3M9NDgwJnI9cGcmZD1odHRwcyUzQSUyRiUyRmNkbi5hdXRoMC5jb20lMkZhdmF0YXJzJTJGcGEucG5nIiwidXBkYXRlZF9hdCI6IjIwMjAtMDYtMTFUMTI6MzU6MjQuMTk4WiIsImlzcyI6Imh0dHBzOi8vaW5zaWdodDEuYXV0aDAuY29tLyIsInN1YiI6ImF1dGgwfDVlYzdiMTBjZTZmNGUwMGJmMjAzNzZjMyIsImF1ZCI6IlNzTENHTmdnMHlBN0I3c0g1ZU5WTUZtQ1A5SlZkZGUzIiwiaWF0IjoxNTkxOTQ3NDYwLCJleHAiOjE1OTE5ODM0NjB9.kYNMikKc84EQXRC32dwkOXW0gkJKfqQTOLVmOkKs5QmvVKcVQNZVbo4fQFuYf07Qu1OpvYKmqBHf3Z5H8nsy-Mfeyufgr86X_p5vdThkpCGMzg3uX06LqKoVDcRRzDndQpmvve5Ripla3ucN5IME363U1EfwqmDPs4jBoAxuB80qurcVq3NBn8dOJzJNCRgGW-aHPP6LJAvezGgWpiDnKRcKLIbU2ig7h5t-8LhWOKDi48TBHGyOQYdxqUE7fC2NCi6ghTX7SnLxXA6S1SMwpqQgAApEnjklY8ImuP6in3Rd5JnvJJedDZTcYWK43iKBMoe5exhYd547XNtpQWttWE",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid/imageLists/:imageListUuid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organisations",
														":organisationUuid",
														"sites",
														":siteUuid",
														"surveys",
														":surveyUuid",
														"imageLists",
														":imageListUuid"
													],
													"variable": [
														{
															"key": "organisationUuid",
															"type": "string",
															"value": "{{orgUuid}}"
														},
														{
															"key": "siteUuid",
															"type": "string",
															"value": "{{siteUuid}}"
														},
														{
															"description": "(Required) ",
															"key": "surveyUuid",
															"type": "string",
															"value": "{{surveyUuid}}"
														},
														{
															"key": "imageListUuid",
															"value": "{{imageListUuid}}"
														}
													]
												}
											},
											"response": [
												{
													"name": "Successful only when a user has access to survey",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\",\n \"data\": {\n  \"survey\": {\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"permalink\": \"<string>\",\n   \"uuid\": \"<string>\",\n   \"thumbnailURL\": \"<string>\",\n   \"published\": \"<boolean>\",\n   \"publishedAt\": \"<number>\",\n   \"archived\": \"<boolean>\",\n   \"archivedAt\": \"<number>\",\n   \"surveyFrom\": \"<number>\",\n   \"surveyTo\": \"<number>\",\n   \"metaData\": {\n    \"userRole\": {}\n   }\n  }\n }\n}"
												},
												{
													"name": "When the get survey details call fails internally",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "User is not logged in",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/survey/:surveyUuid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"survey",
																":surveyUuid"
															],
															"variable": [
																{
																	"key": "surveyUuid"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "CleanUp",
					"item": [
						{
							"name": "Removing the survey created",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response body status is : 'success'\", function () {\r",
											"    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
											"});\r",
											"pm.test(\"Response body has message : 'Deleted Project'\", function () {\r",
											"    pm.expect(pm.response.json().message).to.eql(\"Deleted Survey\");\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid/surveys/:surveyUuid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"organisations",
										":organisationUuid",
										"sites",
										":siteUuid",
										"surveys",
										":surveyUuid"
									],
									"variable": [
										{
											"key": "organisationUuid",
											"value": "{{orgUuid}}",
											"type": "string"
										},
										{
											"key": "siteUuid",
											"value": "{{siteUuid}}",
											"type": "string"
										},
										{
											"key": "surveyUuid",
											"value": "{{surveyUuid}}",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Removing the site created",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Body matches string : 'success'\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success\");\r",
											"});\r",
											"pm.test(\"Response body has message : 'Deleted Site'\", function () {\r",
											"    pm.expect(pm.response.json().message).to.eql(\"Deleted Site\");\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/organisations/:organisationUuid/sites/:siteUuid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"organisations",
										":organisationUuid",
										"sites",
										":siteUuid"
									],
									"variable": [
										{
											"key": "organisationUuid",
											"value": "{{orgUuid}}",
											"type": "string"
										},
										{
											"key": "siteUuid",
											"value": "{{siteUuid}}",
											"type": "string"
										}
									]
								}
							},
							"response": [
								{
									"name": "User is not logged in",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/site/:siteUuid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"site",
												":siteUuid"
											],
											"variable": [
												{
													"key": "siteUuid"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "When the delete site call fails internally",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/site/:siteUuid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"site",
												":siteUuid"
											],
											"variable": [
												{
													"key": "siteUuid"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Successful only when a user has access to site delete perms",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/site/:siteUuid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"site",
												":siteUuid"
											],
											"variable": [
												{
													"key": "siteUuid"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Removing the org created and reset variables",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.clear();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/organisations/:organisationUuid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"organisations",
										":organisationUuid"
									],
									"variable": [
										{
											"key": "organisationUuid",
											"value": "{{orgUuid}}",
											"type": "string",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "When the delete org call fails internally",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"organisation",
												":organisationUuid"
											],
											"variable": [
												{
													"key": "organisationUuid"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "User is not logged in",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"organisation",
												":organisationUuid"
											],
											"variable": [
												{
													"key": "organisationUuid"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Successful only when a user has access to org delete perms",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/organisation/:organisationUuid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"organisation",
												":organisationUuid"
											],
											"variable": [
												{
													"key": "organisationUuid"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"status\": \"<string>\",\n \"message\": \"<string>\"\n}"
								}
							]
						}
					]
				}
			],
			"description": "This collection is created to test all different scenarios for a single API using different requests.",
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{authToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{authToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "invalidAuthToken",
			"value": "Log in to do this action"
		},
		{
			"key": "notFoundErrorMessage",
			"value": "Resource Not Found"
		},
		{
			"key": "requiredFieldErrorMessage",
			"value": "This field is required."
		},
		{
			"key": "invalidAcceptHeaderMessage",
			"value": "Could not satisfy the request Accept header."
		}
	]
}